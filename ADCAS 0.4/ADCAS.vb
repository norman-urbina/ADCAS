Imports System
Imports System.Data.OleDb
Imports System.Text.RegularExpressions

Public Class ADCAS
    Dim LimPLcont1 As Double
    Dim LimPLcont2 As Double
    Public Shared MfPrima As Double
    Public Shared RnPLcont As Double
    Dim Tipo As Integer     'Define el tipo de conexion
    Dim Sistema As String   'Define el sistema de marco
    Dim Calculate As Integer = 0 'Variable para saber si se corre el Diseño o no (igual a 0 si no se ha corrido, igual a 1 si se corrió al menos una vez)
    Dim LoadDB_SMF As Integer  'Variable para controlar la primera y única conexión a la Base de Datos de las SMF
    Dim SiPLcont As Boolean  'Variable que estima saber si las placas de continuidad son necesarias en todo momento

    ' Campos de la clase
    '
    Private errorProvider1 As New ErrorProvider()
    Private m_fileName As String = String.Empty

    Sub limpiarCampos(ByRef Grupo As Windows.Forms.GroupBox)
        'Dim tmp As Control
        'For Each tmp In Contenedor
        '    If tmp.GetType Is GetType(TabControl) Then
        '        limpiarCampos(DirectCast(tmp, TabControl).Controls)
        '    ElseIf tmp.GetType Is GetType(TabPage) Then
        '        limpiarCampos(DirectCast(tmp, TabPage).Controls)
        '    ElseIf tmp.GetType Is GetType(GroupBox) Then
        '        limpiarCampos(DirectCast(tmp, GroupBox).Controls)
        '    Else
        '        'TextBox, aunque puede ser cualquier otro control.
        '        If TypeOf tmp Is TextBox Then
        '            DirectCast(tmp, TextBox).Clear()
        '        ElseIf TypeOf tmp Is MaskedTextBox Then
        '            DirectCast(tmp, MaskedTextBox).Clear()
        '        End If
        '    End If
        'Next
        Try
            Dim listaTextBoxes = (From tb As TextBox In Grupo.Controls.OfType(Of TextBox)() _
                                     Select tb).ToList()

            For Each tb As TextBox In listaTextBoxes
                ' Limpiamos el valor del control TextBox.
                tb.Clear()
                If tb.BackColor = Color.Red Then
                    tb.BackColor = Color.White
                End If
            Next
        Catch ex As Exception

        End Try

    End Sub

    Private Sub limpiarcamposLabels(ByRef Grupo As Windows.Forms.GroupBox)

        Try
            Dim listaLabels = (From lbl As Label In Grupo.Controls.OfType(Of Label)() _
                               Select lbl).ToList()
            For Each lbl As Label In listaLabels
                If lbl.Text.Contains("Label") Or lbl.Text.Contains("kips") Or lbl.Text.Contains("<") Or lbl.Text.Contains(">") Then
                    lbl.Text = String.Empty
                End If
                If lbl.ForeColor = Color.Red Then
                    lbl.ForeColor = Color.White
                End If
            Next
        Catch ex As Exception

        End Try

    End Sub

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        ConexionesSMF.Visible = True
        FlowLayoutPanel1.Visible = False
        FlowLayoutPanel2N.Visible = False
        FlowLayoutPanel2.Visible = False
        'variable de tipo de Marco
        Sistema = "SMF"

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexiones de Momento FR"

        'COLOR DE FONDO DEL BOTON UNA VEZ QUE HA SIDO CLICKEADO
        Button1.BackgroundImage = My.Resources.BOTON_SMF_iluminado2
        Button2.BackgroundImage = My.Resources.BOTON_SCBF2
        Button3.BackgroundImage = My.Resources.BOTON_EBF2
        Button15.BackgroundImage = My.Resources.BOTON_BRBF2

        '//////////////////////////
        'Conexión a Base de datos
        '-------------------------
        'Variable para saber que se conectó ya una vez y no volver a ejecutar el código
        If LoadDB_SMF = 1 Then
            GoTo Line0
        End If
        If LoadDB_SMF = 0 Then
            ''TODO: This line of code loads data into the 'PernosDataSet.PernosPLsimple' table. You can move, or remove it, as needed.
            Me.PernosPLsimpleTableAdapter.Fill(Me.PernosDataSet.PernosPLsimple)
            ''TODO: This line of code loads data into the 'AcerosDataSet.Acero_en_placasBFP' table. You can move, or remove it, as needed.
            Me.Acero_en_placasBFPTableAdapter.Fill(Me.AcerosDataSet.Acero_en_placasBFP)
            ''TODO: This line of code loads data into the 'PernosDataSet.LeminBFP' table. You can move, or remove it, as needed.
            Me.LeminBFPTableAdapter.Fill(Me.PernosDataSet.LeminBFP)
            conectarseSecciones()
            conecPernos()
            conecEncroach()
Line0:
            Me.ComboBox1.SelectedIndex = 0
            Me.ComboBox2.SelectedItem = "No"
            Me.ComboBox8.SelectedItem = "No"
            Me.ComboBox4.SelectedIndex = 0
            Me.ComboBox3.SelectedIndex = 0
            Me.ComboBox5.SelectedIndex = 0
            Me.ComboBox6.SelectedIndex = 0
            Me.ComboBox9.SelectedIndex = 0
            'Combobox preseleccionados en el Diseño de la conexion alma-columna (BFP)
            Me.ComboBox7.SelectedIndex = 0
            Me.ComboBox12.SelectedIndex = 0
            Me.ComboBox11.SelectedIndex = 0
            Me.ComboBox10.SelectedIndex = 0
            Me.ComboBox14.SelectedIndex = 0

            LoadDB_SMF = 1
        End If

    End Sub

    Private Sub Button2_Click_1(sender As Object, e As EventArgs) Handles Button2.Click
        ConexionesSMF.Visible = False
        FlowLayoutPanel1.Visible = False
        FlowLayoutPanel2N.Visible = False
        GroupBox1.Visible = False
        FlowLayoutPanel2.Visible = False

        FlowLayoutPanel2N.Visible = False
        FlowLayoutPanel1.Visible = True
        'variable de tipo de Marco
        Sistema = "SCBF"

        Piv = 0
        Piv2 = 0

        'COLOR DE FONDO DEL BOTON UNA VEZ QUE HA SIDO CLICKEADO
        Button1.BackgroundImage = My.Resources.BOTON_SMF2
        Button2.BackgroundImage = My.Resources.BOTON_SCBF_iluminado2
        Button3.BackgroundImage = My.Resources.BOTON_EBF2
        Button15.BackgroundImage = My.Resources.BOTON_BRBF2

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexiones de arriostre en Marcos Especiales Concéntricos"

        'Cambio de posición de labels
        Label353.Text = "Arriostres Inferiores:"
        Label363.Text = "Arriostres Inferiores:"
        Label353.Location = New System.Drawing.Point(17, 60)
        Label363.Location = New System.Drawing.Point(17, 60)

        'textbox 2t
        TextBox219.Enabled = True

    End Sub

    Private Sub ADCAS_FormClosing(sender As Object, e As FormClosingEventArgs) Handles Me.FormClosing
        If Not Sistema = String.Empty Then
            Dim exitADCAS As MsgBoxResult
            exitADCAS = CType(MsgBox("¿Desea guardar los cambios antes de salir?", vbQuestion + vbYesNoCancel, "Salir"), MsgBoxResult)

            If exitADCAS = vbYes Then
                Dim NombreArchivo As String = m_fileName
                ' Validamos los datos obteniendo si procede
                ' un objeto Persona.
                '
                Dim D As Datos = GetData()
                If (D Is Nothing) Then
                    e.Cancel = True
                    Return
                Else
                    If (NombreArchivo = String.Empty) Then
                        ' Si el valor del campo es una cadena de longitud
                        ' cero, seleccionamos el archivo para guardar.
                        '
                        Using sfd As New SaveFileDialog()
                            sfd.Filter = ".CAS|*.dat|Todos los archivos|*.*"
                            Dim dr As DialogResult = sfd.ShowDialog(Me)
                            If (dr <> DialogResult.OK) Then
                                e.Cancel = True
                                Return
                            Else
                                NombreArchivo = sfd.FileName
                            End If
                        End Using
                    End If

                    Try
                        ' Procedemos a serializar la clase.
                        '
                        Datos.Save(D, NombreArchivo)

                        ' Si todo ha ido bien, modificamos en el
                        ' campo la ruta del archivo guardado.
                        '
                        m_fileName = NombreArchivo

                    Catch ex As Exception
                        ' Se ha producido un error.
                        MessageBox.Show(ex.Message)
                    End Try
                End If

                coneXSecc.Close()
                conPerns.Close()
                conexEncroach.Close()
                End
            ElseIf exitADCAS = vbNo Then
                coneXSecc.Close()
                conPerns.Close()
                conexEncroach.Close()
                End
            Else
                e.Cancel = True
            End If
        Else
            coneXSecc.Close()
            conPerns.Close()
            conexEncroach.Close()
        End If

    End Sub

    Private Sub ADCAS_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        LoadDB_SMF = 0

        ''TODO: This line of code loads data into the 'PernosDataSet.PernosPLsimple' table. You can move, or remove it, as needed.
        'Me.PernosPLsimpleTableAdapter.Fill(Me.PernosDataSet.PernosPLsimple)
        ''TODO: This line of code loads data into the 'AcerosDataSet.Acero_en_placasBFP' table. You can move, or remove it, as needed.
        'Me.Acero_en_placasBFPTableAdapter.Fill(Me.AcerosDataSet.Acero_en_placasBFP)
        ''TODO: This line of code loads data into the 'PernosDataSet.LeminBFP' table. You can move, or remove it, as needed.
        'Me.LeminBFPTableAdapter.Fill(Me.PernosDataSet.LeminBFP)
        'conectarseSecciones()
        'conecPernos()
        'conecEncroach()

        ' Instalamos el procedimiento de evento TextChanged para los controles TextBox.

        AddHandler TextBox2.TextChanged, AddressOf TextBoxOnTextChanged
        AddHandler TextBox7.TextChanged, AddressOf TextBoxOnTextChanged
        AddHandler TextBox4.TextChanged, AddressOf TextBoxOnTextChanged
        AddHandler TextBox201N.TextChanged, AddressOf TextBoxOnTextChanged
        AddHandler TextBox205N.TextChanged, AddressOf TextBoxOnTextChanged
        AddHandler TextBox209.TextChanged, AddressOf TextBoxOnTextChanged
        AddHandler TextBox212.TextChanged, AddressOf TextBoxOnTextChanged
        AddHandler TextBox295.TextChanged, AddressOf TextBoxOnTextChanged
        AddHandler TextBox300.TextChanged, AddressOf TextBoxOnTextChanged
        AddHandler TextBox317.TextChanged, AddressOf TextBoxOnTextChanged
        AddHandler TextBox291.TextChanged, AddressOf TextBoxOnTextChanged

        ConexionesSMF.Visible = False
        GroupBox1.Visible = False
        'Me.ComboBox1.SelectedIndex = 0
        'Me.ComboBox2.SelectedItem = "No"
        'Me.ComboBox8.SelectedItem = "No"
        'Me.ComboBox4.SelectedIndex = 0
        'Me.ComboBox3.SelectedIndex = 0
        'Me.ComboBox5.SelectedIndex = 0
        'Me.ComboBox6.SelectedIndex = 0
        'Me.ComboBox9.SelectedIndex = 0
        ''Combobox preseleccionados en el Diseño de la conexion alma-columna (BFP)
        'Me.ComboBox12.SelectedIndex = 0
        'Me.ComboBox11.SelectedIndex = 0
        'Me.ComboBox10.SelectedIndex = 0
        'Me.ComboBox14.SelectedIndex = 0

        'BOTONES DESACTIVADOS
        CalcularToolStripMenuItem1.Enabled = False
        GuardarComoToolStripMenuItem1.Enabled = False
        GuardarToolStripMenuItem1.Enabled = False

    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        ConexionesSMF.Visible = False
        GroupBox1.Visible = False
        FlowLayoutPanel1.Visible = False
        FlowLayoutPanel2.Visible = False
        FlowLayoutPanel2N.Visible = True
        'variable de tipo de Marco
        Sistema = "EBF"

        'COLOR DE FONDO DEL BOTON UNA VEZ QUE HA SIDO CLICKEADO
        Button1.BackgroundImage = My.Resources.BOTON_SMF2
        Button2.BackgroundImage = My.Resources.BOTON_SCBF2
        Button3.BackgroundImage = My.Resources.BOTON_EBF_iluminado2
        Button15.BackgroundImage = My.Resources.BOTON_BRBF2


        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexiones de arriostre en Marcos Excéntricos"

        'Cambio de posición de labels
        Label353.Text = "Arriostre:"
        Label363.Text = "Arriostre:"
        Label353.Location = New System.Drawing.Point(68, 60)
        Label363.Location = New System.Drawing.Point(68, 60)

        'textbox 2t
        TextBox219.Enabled = False


    End Sub

    Private Sub TextBox3_KeyPress_1(sender As Object, e As KeyPressEventArgs) Handles TextBox3.KeyPress
        'LLAMADO DE LA FUNCIÓN PARA ACEPTAR SOLO NUMEROS
        soloNumeros(Me.TextBox3, e)

        'CONDICIONAL PARA trasladar el foco al dar ENTER
        If Asc(e.KeyChar) = 13 Then
            TextBox5.Focus()
        End If
    End Sub

    Private Sub TextBox5_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox5.KeyPress
        soloNumeros(Me.TextBox5, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox6.Focus()
        End If
    End Sub

    Private Sub TextBox6_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox6.KeyPress
        soloNumeros(Me.TextBox6, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox4.Focus()
        End If
    End Sub

    Private Sub TextBox4_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox4.KeyPress
        soloNumeros(Me.TextBox4, e)
        If Asc(e.KeyChar) = 13 Then
            ComboBox1.Focus()
        End If
    End Sub

    Private Sub ComboBox1_KeyPress1(sender As Object, e As KeyPressEventArgs) Handles ComboBox1.KeyPress
        If Asc(e.KeyChar) = 13 Then
            ComboBox8.Focus()
        Else
            e.Handled = True
        End If
    End Sub
    Private Sub ComboBox8_KeyPress1(sender As Object, e As KeyPressEventArgs) Handles ComboBox8.KeyPress
        If Asc(e.KeyChar) = 13 Then
            ComboBox2.Focus()
        Else
            e.Handled = True
        End If
    End Sub
    Private Sub ComboBox2_KeyPress1(sender As Object, e As KeyPressEventArgs) Handles ComboBox2.KeyPress
        If Asc(e.KeyChar) = 13 Then
            'FOCO
            If Me.LabelDiseño.Text = "Conexión de Momento con Sección de Viga Reducida" Then
            TextBox27.Focus()
            ElseIf Me.LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida Rigidizada" Then
                ComboBox3.Focus()
            ElseIf Me.LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida sin Rigidizar" Then
                ComboBox6.Focus()
            ElseIf Me.LabelDiseño.Text = "Conexión de Momento con Placa de Patín Empernada" Then
                TextBox105.Focus()
            Else
                TextBox81.Focus()
        End If
        Else
            e.Handled = True
        End If
    End Sub
    Private Sub TextBox27_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox27.KeyPress
        soloNumeros(Me.TextBox27, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox27.Text) < Val(TextBox26.Text) Or Val(TextBox27.Text) > Val(TextBox24.Text) Then
                MsgBox("Valor inadecuado", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox27.Focus()
                TextBox27.Text = ""
            Else
                TextBox27.BackColor = Color.White
                TextBox25.Focus()
            End If

        End If
    End Sub

    Private Sub TextBox25_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox25.KeyPress
        soloNumeros(Me.TextBox25, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox25.Text) < Val(TextBox23.Text) Or Val(TextBox25.Text) > Val(TextBox22.Text) Then
                MsgBox("Valor inadecuado", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox25.Focus()
                TextBox25.Text = ""
            Else
                TextBox25.BackColor = Color.White
                TextBox21.Focus()
            End If

        End If
    End Sub

    Private Sub TextBox21_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox21.KeyPress
        soloNumeros(Me.TextBox21, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox21.Text) < Val(TextBox20.Text) Or Val(TextBox21.Text) > Val(TextBox19.Text) Then
                MsgBox("Valor inadecuado", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox21.Focus()
                TextBox21.Text = ""
            Else
                TextBox21.BackColor = Color.White
                MsgBox("Puede proceder a realizar los cálculos de Diseño desde el Menú 'Diseño->Calcular', o bien, presionando la tecla F5. Asegúrese de haber ingresado todos los datos que se solicitan antes de continuar.", MsgBoxStyle.Information, "Ayuda de ADCAS")
            End If
        End If
    End Sub

    Private Sub ComboBox1_KeyPress(sender As Object, e As KeyPressEventArgs)
        If Asc(e.KeyChar) = 13 Then
            ComboBox2.Focus()
        End If
    End Sub
    Private Sub ComboBox2_KeyPress(sender As Object, e As KeyPressEventArgs)
        If Asc(e.KeyChar) = 13 Then
            ComboBox8.Focus()
        End If
    End Sub

    Private Sub ComboBox8_KeyPress(sender As Object, e As KeyPressEventArgs)
        If Asc(e.KeyChar) = 13 Then
            TextBox27.Focus()
        End If
    End Sub

    Private Sub VideoTutorialesToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles VideoTutorialesToolStripMenuItem1.Click
        Try
            System.Diagnostics.Process.Start("https://www.youtube.com/watch?v=eBo94mgZ8EY&list=PLaZMn43C9RU0ADet5Rjn5DdRjpNrwYSGO")
        Catch ex As Exception
            MsgBox("No cuenta con conexión a internet", MsgBoxStyle.Exclamation, "VideoTutoriales")
        End Try
    End Sub

    Private Sub AcercaDeToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles AcercaDeToolStripMenuItem1.Click
        Dim ACde As New AboutBox1
        ACde.ShowDialog()
    End Sub
    Public Shared Ruta As String = System.AppDomain.CurrentDomain.BaseDirectory()

    Private Sub ManualPDFToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles ManualPDFToolStripMenuItem1.Click
        Shell("explorer.exe " + """" + """" + Ruta.ToString + "Manual de ADCAS.pdf" + """" + """", AppWinStyle.MaximizedFocus)
    End Sub
    Private Sub AISC36010ToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AISC36010ToolStripMenuItem.Click
        Shell("explorer.exe " + """" + """" + Ruta.ToString + "AISC 360-10.pdf" + """" + """", AppWinStyle.MaximizedFocus)
    End Sub

    Private Sub AISC35810ToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AISC35810ToolStripMenuItem.Click
        Shell("explorer.exe " + """" + """" + Ruta.ToString + "AISC 358-10.pdf" + """" + """", AppWinStyle.MaximizedFocus)
    End Sub

    Private Sub AISC34110ToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles AISC34110ToolStripMenuItem.Click
        Shell("explorer.exe " + """" + """" + Ruta.ToString + "AISC 341-10.pdf" + """" + """", AppWinStyle.MaximizedFocus)
    End Sub

    Private Sub SalirToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles SalirToolStripMenuItem1.Click
        Me.Close()
    End Sub

    Private Sub NuevoToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles NuevoToolStripMenuItem1.Click
        Button1.Visible = True
        Button1.Enabled = True
        Button2.Visible = True
        Button2.Enabled = True
        Button3.Visible = True
        Button3.Enabled = True
        Button15.Visible = True
        Button15.Enabled = True

        GuardarComoToolStripMenuItem1.Enabled = False
        GuardarToolStripMenuItem1.Enabled = False
        CalcularToolStripMenuItem1.Enabled = False

        'Creamos una nueva ficha.
        Nuevo()
    End Sub
    

    Private Sub AbrirToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles AbrirToolStripMenuItem1.Click
        ' Procedemos a abrir el archivo.
        Open()

    End Sub


    Private Sub GuardarToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles GuardarToolStripMenuItem1.Click
        ' Procedemos a guardar el archivo.
        Save(m_fileName)
    End Sub


    Private Sub GuardarComoToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles GuardarComoToolStripMenuItem1.Click
        ' Procedemos a guardar el archivo.
        Save(String.Empty)
    End Sub

#Region "Métodos privados de la clase."

    ''' <summary>
    ''' Convierte un array de Byte en un objeto Image.
    ''' </summary>
    ''' <param name="data">Array de Byte que se desea convertir.</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Shared Function BytesToImage(data As Byte()) As Image

        If (data Is Nothing) Then Return Nothing

        ' Creamos una secuencia en la memoria con la
        ' matriz de bytes especificada.
        '
        Dim ms As New IO.MemoryStream(data)

        ' Devolvemos el objeto Image creado, utilizando si procede
        ' la información de administración del color incrustada, y
        ' validando siempre los datos de la imagen.
        '
        Return Image.FromStream(ms, True, True)
    End Function

    Private Function GetData() As Datos

        ' Procedemos a validar los valores de los distintos
        ' controles existentes en el formulario.
        '
        Dim d As New Datos '(TextBox1.Text)
        If Sistema = "SMF" Then
            If (TextBox2.Text = String.Empty) Then
                errorProvider1.SetError(TextBox2, "Secciones requeridas.")
                Return Nothing
            End If

            ' Comprobamos que se haya especificado un nombre.
            '
            If (TextBox7.Text = String.Empty) Then
                errorProvider1.SetError(TextBox7, "Especificación de acero requerida.")
                Return Nothing
            End If

            If (TextBox4.Text = String.Empty) Then
                errorProvider1.SetError(TextBox4, "Valor de cargas requerido.")
                Return Nothing
            End If

            d.SeccViga = TextBox2.Text
            d.SeccCol = TextBox1.Text
            d.Calc = Calculate
            d.Tipo_de_Conexion = Tipo
            d.Sistema = Sistema
            d.YesoNo_plconts = SiPLcont
            'p.Sexo = If(rdbMale.Checked, 0, 1)
            Dim InstSecc As Secciones = Secciones.GetSingleton
            Dim InsAcero As Aceros = Aceros.GetSingleton
            d.perfilViga = InstSecc.ComboBox1.SelectedValue
            d.perfilCol = InstSecc.ComboBox2.SelectedValue
            d.AceroViga = InsAcero.ComboBox1.SelectedValue
            d.AceroCol = InsAcero.ComboBox2.SelectedValue
            d.AceroPlaca = InsAcero.ComboBox3.SelectedValue
            d.MatViga = TextBox8.Text
            d.MatCol = TextBox7.Text
            d.MatPlaca = TextBox9.Text
            d.CV = TextBox3.Text
            d.CM = TextBox5.Text
            d.Claro = TextBox6.Text
            d.Carga_Axial = TextBox4.Text

            d.Vigas_conectadas = ComboBox1.SelectedIndex
            d.Losa = ComboBox8.SelectedIndex
            d.Conex_Extremo = ComboBox2.SelectedIndex
            d.espesor_plCont = TextBox43.Text
            d.plcontBckColor = TextBox43.BackColor
            d.recorte1_plCont = TextBox40.Text
            d.BckColor1 = TextBox40.BackColor
            d.contacto1_plCont = TextBox41.Text
            d.recorte2_plCont = TextBox45.Text
            d.BckColor2 = TextBox45.BackColor
            d.contacto2_plCont = TextBox44.Text
            d.biselRecto = If(RadioButton9.Checked, 0, 1)
            d.soldplCont = Label75.Text
            d.Rsold_plCont = TextBox49.Text
            d.Dsold_plCont = TextBox47.Text
            d.As_plCont = TextBox164.Text
            d.BckColor3 = TextBox164.BackColor
            d.AsminplCont = Label289.Text
            d.sold2plCont = TextBox165.Text
            d.sold_capPlate = TextBox72.Text
            d.tRefNodal = TextBox52.Text
            d.BckColor4 = TextBox52.BackColor
            d.confPlNodal = If(RadioButton1.Checked, 0, 1)
            d.dispPlNodal = If(RadioButton3.Checked, 0, 1)
            d.soldPlNodal = If(RadioButton5.Checked, 0, 1)
            d.bordPlNodal = If(RadioButton7.Checked, 0, 1)
            d.plNodal_dist = TextBox60.Text
            d.BckColor5 = TextBox60.BackColor
            d.bisel_plNodal = TextBox63.Text
            d.BckColor6 = TextBox63.BackColor
            d.soldFilete_plNodal = TextBox65.Text
            d.tmin_plNodalSobresale = TextBox67.Text

            If Tipo = 1 Then 'Es una Conexion RBS
                d.dim_a = TextBox27.Text
                d.bckcolorRBS1 = TextBox27.BackColor
                d.ainf = TextBox26.Text
                d.asup = TextBox24.Text

                d.dim_b = TextBox25.Text
                d.bckcolorRBS2 = TextBox25.BackColor
                d.binf = TextBox23.Text
                d.bsup = TextBox22.Text

                d.dim_c = TextBox21.Text
                d.bckcolorRBS3 = TextBox21.BackColor
                d.cinf = TextBox20.Text
                d.csup = TextBox19.Text

                d.tplRBS = TextBox37.Text
                d.BckColor7 = TextBox37.BackColor

            ElseIf Tipo = 2 Then 'Es una Conexion BUEEP
                d.pernoBEEP = ComboBox6.SelectedIndex
                d.holeBEEP = ComboBox4.SelectedIndex
                d.diamReq = TextBox77.Text
                d.diamBEEP = ComboBox5.SelectedIndex
                d.gramilBEEP = TextBox90.Text
                d.BckColorBEEP1 = TextBox90.BackColor
                d.bpBEEP = TextBox88.Text
                d.BckColorBEEP2 = TextBox88.BackColor
                d.pfoBEEP = TextBox80.Text
                d.pfiBEEP = TextBox100.Text
                d.deBEEP = TextBox98.Text
                d.BckColorBEEP3 = TextBox98.BackColor
                d.treqBEEP = TextBox95.Text
                d.tpBEEP = TextBox96.Text
                d.plcontBEEP = TextBox160.Text
                d.tcfMinBEEP = TextBox161.Text
                d.BckColor = TextBox161.BackColor

            ElseIf Tipo = 3 Then 'Es una Conexion BSEEP
                d.pernoBEEP = ComboBox6.SelectedIndex
                d.holeBEEP = ComboBox4.SelectedIndex
                d.diamReq = TextBox77.Text
                d.diamBEEP = ComboBox5.SelectedIndex
                d.gramilBEEP = TextBox90.Text
                d.BckColorBEEP1 = TextBox90.BackColor
                d.bpBEEP = TextBox88.Text
                d.BckColorBEEP2 = TextBox88.BackColor
                d.pfoBEEP = TextBox80.Text
                d.pfiBEEP = TextBox100.Text
                d.deBEEP = TextBox98.Text
                d.BckColorBEEP3 = TextBox98.BackColor
                d.pbBEEP = TextBox94.Text
                d.BckColorBEEP4 = TextBox94.BackColor
                d.tipoBSEEP = ComboBox3.SelectedIndex
                d.treqBEEP = TextBox95.Text
                d.tpBEEP = TextBox96.Text
                d.Lst = TextBox101.Text
                d.hst = TextBox102.Text
                d.Lst_grafica = TextBox97.Text
                d.hst_grafica = TextBox99.Text
                d.FysBEEP = TextBox103.Text
                d.tsBSEEP = TextBox104.Text
                d.tsmin = LabelTsmin.Text
                d.plcontBEEP = TextBox160.Text
                d.tcfMinBEEP = TextBox161.Text
                d.BckColor = TextBox161.BackColor

            ElseIf Tipo = 4 Then 'Es una Conexion BFP
                d.holgBFP = TextBox105.Text
                d.dbMaxBFP = TextBox107.Text
                d.dbBFP = ComboBox7.SelectedIndex
                d.Lemax1 = TextBox109.Text
                d.Leh1 = TextBox111.Text
                d.bckcolorBFP1 = TextBox111.BackColor
                d.Lev1 = TextBox110.Text
                d.bckcolorBFP2 = TextBox110.BackColor
                d.Lc1 = TextBox112.Text
                d.bckcolorBFP3 = TextBox112.BackColor
                d.gramilBFP = TextBox113.Text
                d.gmin = TextBox114.Text
                d.bckcolorBFP4 = TextBox114.BackColor
                d.g_workgage = TextBox115.Text
                d.holeBFP = ComboBox9.SelectedIndex
                d.tpBFP = TextBox118.Text
                d.bfp = TextBox116.Text
                d.Lemax2 = TextBox122.Text
                d.Leh2 = TextBox121.Text
                d.bckcolorBFP5 = TextBox121.BackColor
                d.Lev2 = TextBox120.Text
                d.bckcolorBFP6 = TextBox120.BackColor
                d.Lc2 = TextBox119.Text
                d.bckcolorBFP7 = TextBox119.BackColor
                d.Npernos = TextBox134.Text
                d.N_prop = TextBox135.Text
                d.s_prop = TextBox130.Text
                d.bckcolorBFP8 = TextBox130.BackColor
                d.smin = TextBox131.Text
                d.smax = TextBox129.Text
                d.S1_BFP = TextBox128.Text
                d.Sh_BFP = TextBox127.Text
                d.Lc3 = TextBox132.Text
                d.bckcolorBFP9 = TextBox132.BackColor
                d.AcerPlSimple_BFP = ComboBox12.SelectedIndex
                d.PernPlSimple_BFP = ComboBox13.SelectedIndex
                d.DiamPernPlSimple_BFP = ComboBox11.SelectedIndex
                d.NumPernPlSimple_BFP = ComboBox10.SelectedIndex
                d.SoldPlSimple_BFP = ComboBox14.SelectedIndex
                d.NotaLeh = Label320.Text
                d.VisibleBFP1 = If(Label320.Visible, 0, 1)
                d.NotaSoldadura = Label326.Text
                d.VisibleBFP2 = If(Label326.Visible, 0, 1)
                d.aIntroducido = TextBox184.Text
                d.LehIntroducido = TextBox185.Text
                d.esp_sIntrod = TextBox183.Text
                d.LevIntroducido = TextBox187.Text
                d.tplSimpleBFP = TextBox188.Text
                d.SoldFilete_PlSimpleBFP = TextBox190.Text
                d.bckcolorBFP10 = TextBox190.BackColor
                d.Soldmin_PlSimpleBFP = TextBox191.Text
                d.bckcolorBFP11 = TextBox182.BackColor

            ElseIf Tipo = 5 Then 'Es una Conexion WUF-W
                d.holeacces_a = TextBox81.Text
                d.holeacces_b = TextBox79.Text
                d.holeacces_c = TextBox75.Text
                d.holeacces_d = TextBox82.Text
                d.holgMontaje = TextBox93.Text
                d.aPrimaVal = TextBox85.Text
                d.bPrimaVal = TextBox83.Text
                d.cPrimaVal = TextBox76.Text
                d.dPrimaVal = TextBox74.Text
                d.ePrimaVal = TextBox73.Text
                d.anchoEstimadoPL = TextBox86.Text
                d.longCalcPL = TextBox87.Text
                d.longPropPL = TextBox89.Text
                d.aPrimaNew = TextBox92.Text
                d.bckcolorWUFW1 = TextBox92.BackColor
                d.tpPropPL = TextBox192.Text
                d.bckcolorWUFW2 = TextBox192.BackColor
                d.twbWUF = Label329.Text
                d.FyPLSimpleBFP = TextBox193.Text
                d.RyPLSimpleBFP = TextBox199.Text
            End If

        ElseIf Sistema = "SCBF" Then

            d.LthetaCalc = OpcionesDiseño.LthetaBr
            d.momindCalc = OpcionesDiseño.MomInd
            d.CompFrm = OpcionesDiseño.CompConsid

            If Tipo = 6 Then

                If (TextBox201N.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox201N, "Sección requerida.")
                    Return Nothing
                End If

                If (TextBox205N.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox205N, "Tipo de acero requerido.")
                    Return Nothing
                End If

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema

                'Datos iniciales de la conexión SCBF1
                '   Secciones
                d.BR1VC = TextBox201N.Text
                d.BR2VC = TextBox202N.Text
                d.BMVC = TextBox203N.Text
                d.CLVC = TextBox204N.Text
                '   Aceros
                d.StBR1VC = TextBox205N.Text
                d.StBr2VC = TextBox206N.Text
                d.StBMVC = TextBox207N.Text
                d.StCLVC = TextBox208N.Text
                d.StPLVC = TextBox214N.Text
                '   Viga
                d.CMBMVC = TextBox209N.Text
                d.CLBMVC = TextBox210N.Text
                d.LBMVC = TextBox211N.Text
                '   Pisos
                d.SHVC = TextBox212N.Text
                d.SH2VC = TextBox213N.Text

                'Datos de diseño de la conexión tipo = 6
                '   Conexión arriostre-placa gusset
                d.SweldVC = TextBox215N.Text
                d.LwbrVC = TextBox216N.Text
                d.gAwtmrVC = TextBox217N.Text
                d.tVC = TextBox218N.Text
                '   Gometría de la placa gusset
                d.PhiGussetVC = TextBox204.Text
                '   phi'
                d.holeacces_a = TextBox207.Text
                '   2t
                d.dostGussetVC = TextBox219.Text
                '   L
                d.LGussetVC = TextBox205.Text
                '   LA
                d.LAGussetVC = TextBox206.Text
                '   LB
                d.LBGussetVC = TextBox337.Text


                '   Pernos

                d.bPSVC = ComboBox19.Text
                d.tPSVC = TextBox287.Text
                d.BTipoVC = ComboBox15.Text
                d.BDiamVC = ComboBox16.Text
                d.GPSqnt = TextBox265.Text
                d.GPSspc = TextBox288.Text
                d.BPSqnt = TextBox289.Text
                d.BPSspc = TextBox278.Text

                '   Soldadura

                d.DGBSVC = TextBox279.Text
                d.DGCSVC = TextBox282.Text

            ElseIf Tipo = 7 Then
                If (TextBox201N.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox201N, "Sección requerida.")
                    Return Nothing
                End If

                If (TextBox205N.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox205N, "Tipo de acero requerido.")
                    Return Nothing
                End If

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema
                'Datos iniciales de la conexión SCBF1
                '   Secciones
                d.BR1VC = TextBox201N.Text
                d.BR2VC = TextBox202N.Text
                d.BMVC = TextBox203N.Text
                d.CLVC = TextBox204N.Text
                '   Aceros
                d.StBR1VC = TextBox205N.Text
                d.StBr2VC = TextBox206N.Text
                d.StBMVC = TextBox207N.Text
                d.StCLVC = TextBox208N.Text
                d.StPLVC = TextBox214N.Text
                '   Viga
                d.CMBMVC = TextBox209N.Text
                d.CLBMVC = TextBox210N.Text
                d.LBMVC = TextBox211N.Text
                '   Pisos
                d.SHVC = TextBox212N.Text
                d.SH2VC = TextBox213N.Text

                'Datos de diseño

                'Datos de diseño de la conexión tipo = 6
                '   Conexión arriostre-placa gusset
                d.SweldVC = TextBox215N.Text
                d.LwbrVC = TextBox216N.Text
                d.gAwtmrVC = TextBox217N.Text
                d.tVC = TextBox218N.Text
                '   Gometría de la placa gusset
                d.PhiGussetVC = TextBox204.Text
                '   phi'
                d.holeacces_a = TextBox207.Text
                '   2t
                d.dostGussetVC = TextBox219.Text
                '   L
                d.LGussetVC = TextBox205.Text
                '   LA
                d.LAGussetVC = TextBox206.Text
                '   LB
                d.LBGussetVC = TextBox337.Text

                d.DBCVC = TextBox221.Text
                d.DGBSVC = TextBox222.Text
                d.DGCSVC = TextBox223.Text

            ElseIf Tipo = 8 Then
                If (TextBox201N.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox201N, "Sección requerida.")
                    Return Nothing
                End If

                If (TextBox205N.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox205N, "Tipo de acero requerido.")
                    Return Nothing
                End If

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema
                'Datos iniciales de la conexión SCBF1
                '   Secciones
                d.BR1VC = TextBox201N.Text
                d.BR2VC = TextBox202N.Text
                d.BMVC = TextBox203N.Text
                d.CLVC = TextBox204N.Text
                '   Aceros
                d.StBR1VC = TextBox205N.Text
                d.StBr2VC = TextBox206N.Text
                d.StBMVC = TextBox207N.Text
                d.StCLVC = TextBox208N.Text
                d.StPLVC = TextBox214N.Text
                '   Viga
                d.CMBMVC = TextBox209N.Text
                d.CLBMVC = TextBox210N.Text
                d.LBMVC = TextBox211N.Text
                '   Pisos
                d.SHVC = TextBox212N.Text
                d.SH2VC = TextBox213N.Text

                'Datos de diseño de la conexión
                '   Conexión arriostre-placa gusset superior
                d.Dbr2VC = textbox348.Text
                d.LwbrVC = textbox347.Text
                d.gAwtmrVC = textbox346.Text
                d.tVC = textbox345.Text
                '   Gometría de la placa gusset superior
                '   phi
                d.PhiGussetVC = TextBox362.Text
                '   phi'
                d.holeacces_a = TextBox359.Text
                '   2t
                d.dostGussetVC = TextBox354.Text
                '   L
                d.LGussetVC = TextBox361.Text
                '   LA
                d.LAGussetVC = TextBox360.Text
                '   LB
                d.LBGussetVC = TextBox350.Text
                '   Conexión arriostre-placa gusset inferior
                d.Dbr2VC = textbox380.Text
                d.Lwbr2VC = textbox379.Text
                d.gAwtmr2VC = textbox378.Text
                d.t2VC = textbox377.Text
                '   Geometría de la placa gusset inferior
                '   phi
                d.phigusset2VC = TextBox376.Text
                '   phi'
                d.holeacces_b = TextBox373.Text
                '   2t
                d.dostGusset2VC = TextBox348.Text
                '   L
                d.Lgusset2VC = TextBox375.Text
                '   LA
                d.LAgusset2VC = TextBox374.Text
                '   LB
                d.LBGusset2VC = TextBox361.Text
                '   Tamaños de soldadura
                d.DBCVC = TextBox240.Text
                d.DGBSVC = TextBox239.Text
                d.DGBIVC = TextBox238.Text
                d.DGCSVC = TextBox255.Text
                d.DGCIVC = TextBox256.Text

            ElseIf Tipo = 9 Then

                If (TextBox201N.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox201N, "Sección requerida.")
                    Return Nothing
                End If

                If (TextBox205N.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox205N, "Tipo de acero requerido.")
                    Return Nothing
                End If

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema
                'Datos iniciales de la conexión SCBF1
                '   Secciones
                d.BR1VC = TextBox201N.Text
                d.BR2VC = TextBox202N.Text
                d.BMVC = TextBox203N.Text
                '   Aceros
                d.StBR1VC = TextBox205N.Text
                d.StBr2VC = TextBox206N.Text
                d.StBMVC = TextBox207N.Text
                d.StPLVC = TextBox214N.Text
                '   Viga
                d.CMBMVC = TextBox209N.Text
                d.CLBMVC = TextBox210N.Text
                d.LBMVC = TextBox211N.Text
                '   Pisos
                d.SHVC = TextBox212N.Text
                d.SH2VC = TextBox213N.Text

                '   Cnx superior
                d.SweldVC = TextBox260.Text
                d.LwbrVC = TextBox259.Text
                d.gAwtmrVC = TextBox258.Text
                d.tVC = TextBox257.Text
                d.PhiGussetVC = TextBox270.Text
                d.dostGussetVC = TextBox267.Text
                d.aGusset = TextBox263.Text
                d.LflGusset = TextBox268.Text
                d.LGussetVC = TextBox261.Text
                d.LAGussetVC = TextBox269.Text
                '   Cnx inferior
                d.Dbr2VC = TextBox274.Text
                d.Lwbr2VC = TextBox273.Text
                d.gAwtmr2VC = TextBox272.Text
                d.phigusset2VC = TextBox284.Text
                d.t2VC = TextBox271.Text
                d.dostGusset2VC = TextBox281.Text
                d.aGusset2 = TextBox277.Text
                d.LflGusset2 = TextBox264.Text
                d.Lgusset2VC = TextBox275.Text
                d.LAgusset2VC = TextBox283.Text
                'If CheckBox1.CheckState = CheckState.Checked Then
                '    d.CheckedBox1 = True
                'Else
                '    d.CheckedBox1 = False
                'End If
                '   Tamaños de soldadura
                d.DGBSVC = TextBox285.Text
                d.DGBIVC = TextBox286.Text

            ElseIf Tipo = 10 Then

                If (TextBox209.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox209, "Sección requerida.")
                    Return Nothing
                End If

                If (TextBox212.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox212, "Tipo de acero requerido.")
                    Return Nothing
                End If

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema

                '   Secciones
                d.BR1VC = TextBox209.Text
                d.BMVC = TextBox208.Text
                d.CLVC = TextBox211.Text
                '   Aceros
                d.StBR1VC = TextBox212.Text
                d.StBMVC = TextBox215.Text
                d.StCLVC = TextBox214.Text
                d.StPLVC = TextBox210.Text
                '   Viga
                d.CMBMVC = TextBox209N.Text
                d.CLBMVC = TextBox210N.Text
                d.LBMVC = TextBox211N.Text
                '   Pisos
                d.SH2VC = TextBox213N.Text

                'Datos de diseño de la conexión tipo = 10
                '   Conexión arriostre-placa gusset
                d.SweldVC = TextBox215N.Text
                d.LwbrVC = TextBox216N.Text
                d.gAwtmrVC = TextBox217N.Text
                d.tVC = TextBox218N.Text
                '   Ángulo del arriostre
                '   Gometría de la placa gusset
                d.PhiGussetVC = TextBox204.Text
                d.LGussetVC = TextBox219.Text
                d.LAGussetVC = TextBox205.Text
                d.LBGussetVC = TextBox206.Text
                d.dostGussetVC = TextBox207.Text

                '   Pernos

                d.bPSVC = ComboBox19.Text
                d.tPSVC = TextBox287.Text
                d.BTipoVC = ComboBox15.Text
                d.BDiamVC = ComboBox16.Text
                d.GPSqnt = TextBox265.Text
                d.GPSspc = TextBox288.Text
                d.BPSqnt = TextBox289.Text
                d.BPSspc = TextBox278.Text

                '   Soldadura

                d.DGBIVC = TextBox279.Text
                d.DGCIVC = TextBox282.Text

            ElseIf Tipo = 11 Then
                If (TextBox209.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox209, "Sección requerida.")
                    Return Nothing
                End If

                If (TextBox212.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox212, "Tipo de acero requerido.")
                    Return Nothing
                End If

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema

                '   Secciones
                d.BR1VC = TextBox209.Text
                d.BMVC = TextBox208.Text
                d.CLVC = TextBox211.Text
                '   Aceros
                d.StBR1VC = TextBox212.Text
                d.StBMVC = TextBox215.Text
                d.StCLVC = TextBox214.Text
                d.StPLVC = TextBox210.Text
                '   Viga
                d.CMBMVC = TextBox209N.Text
                d.CLBMVC = TextBox210N.Text
                d.LBMVC = TextBox211N.Text
                '   Pisos
                d.SH2VC = TextBox213N.Text
                
                'datos de diseño

                d.SweldVC = TextBox215N.Text
                d.LwbrVC = TextBox216N.Text

                d.PhiGussetVC = TextBox204.Text
                d.tVC = TextBox218N.Text
                d.dostGussetVC = TextBox207.Text
                d.LGussetVC = TextBox219.Text
                d.LAGussetVC = TextBox219.Text
                d.LAGussetVC = TextBox205.Text
                d.LBGussetVC = TextBox206.Text

                d.DBCVC = TextBox221.Text
                d.DGBIVC = TextBox222.Text
                d.DGCIVC = TextBox223.Text

            End If

        ElseIf Sistema = "EBF" Then

            d.LthetaCalc = OpcionesDiseño.LthetaBr
            d.momindCalc = OpcionesDiseño.MomInd
            d.CompFrm = OpcionesDiseño.CompConsid

            If Tipo = 12 Then

                If (TextBox295.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox295, "Sección requerida.")
                    Return Nothing
                End If

                If (TextBox300.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox300, "Tipo de acero requerido.")
                    Return Nothing
                End If

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema

                'Secciones
                '   recicla d.br2vc y lo asigna como la viga secundaria

                d.BR1VC = TextBox297.Text
                d.BMVC = TextBox295.Text
                d.CLVC = TextBox296.Text
                d.BR2VC = TextBox294.Text

                'Aceros
                '   recicla d.stbr2vc y lo asigna como el acero de la viga secundaria

                d.StBR1VC = TextBox298.Text
                d.StBr2VC = TextBox299.Text
                d.StBMVC = TextBox300.Text
                d.StCLVC = TextBox302.Text
                d.StPLVC = TextBox301.Text

                'Formulario de cargas EBF
                '   RECICLA LOS DATOS DE LAS SMF

                d.MatPlaca = CargasEBF2.TextBox1.Text
                d.espesor_plCont = CargasEBF2.TextBox2.Text
                d.recorte1_plCont = CargasEBF2.TextBox3.Text
                d.contacto1_plCont = CargasEBF2.TextBox4.Text
                d.recorte2_plCont = CargasEBF2.TextBox5.Text
                d.contacto2_plCont = CargasEBF2.TextBox6.Text
                d.soldplCont = CargasEBF2.TextBox7.Text
                d.Rsold_plCont = CargasEBF2.TextBox8.Text
                d.Dsold_plCont = CargasEBF2.TextBox9.Text
                d.As_plCont = CargasEBF2.TextBox10.Text
                d.AsminplCont = CargasEBF2.TextBox11.Text
                d.sold2plCont = CargasEBF2.TextBox12.Text
                d.sold_capPlate = CargasEBF2.TextBox13.Text
                d.tRefNodal = CargasEBF2.TextBox14.Text
                d.plNodal_dist = CargasEBF2.TextBox15.Text
                d.bisel_plNodal = CargasEBF2.TextBox16.Text
                d.soldFilete_plNodal = CargasEBF2.TextBox17.Text
                d.tmin_plNodalSobresale = CargasEBF2.TextBox18.Text
                d.dim_a = CargasEBF2.TextBox19.Text
                d.ainf = CargasEBF2.TextBox20.Text
                d.asup = CargasEBF2.TextBox21.Text
                d.dim_b = CargasEBF2.TextBox22.Text
                d.cinf = CargasEBF2.TextBox23.Text
                d.csup = CargasEBF2.TextBox24.Text
                d.tplRBS = CargasEBF2.TextBox25.Text
                d.diamReq = CargasEBF2.TextBox26.Text
                d.gramilBEEP = CargasEBF2.TextBox27.Text
                d.bpBEEP = CargasEBF2.TextBox28.Text
                d.pfoBEEP = CargasEBF2.TextBox29.Text
                d.pfiBEEP = CargasEBF2.TextBox30.Text
                d.deBEEP = CargasEBF2.TextBox31.Text
                d.pbBEEP = CargasEBF2.TextBox32.Text
                d.treqBEEP = CargasEBF2.TextBox33.Text
                d.tpBEEP = CargasEBF2.TextBox34.Text
                d.Lst = CargasEBF2.TextBox35.Text
                d.hst = CargasEBF2.TextBox36.Text
                d.Lst_grafica = CargasEBF2.TextBox37.Text
                d.hst_grafica = CargasEBF2.TextBox38.Text
                d.FysBEEP = CargasEBF2.TextBox39.Text
                d.tsBSEEP = CargasEBF2.TextBox40.Text
                d.tsmin = CargasEBF2.TextBox41.Text
                d.plcontBEEP = CargasEBF2.TextBox42.Text
                d.tcfMinBEEP = CargasEBF2.TextBox43.Text
                d.holgBFP = CargasEBF2.TextBox44.Text
                d.dbMaxBFP = CargasEBF2.TextBox45.Text
                d.Lemax1 = CargasEBF2.TextBox46.Text
                d.Leh1 = CargasEBF2.TextBox47.Text
                d.Lev1 = CargasEBF2.TextBox48.Text
                d.Lc1 = CargasEBF2.TextBox49.Text
                d.gramilBFP = CargasEBF2.TextBox50.Text
                d.gmin = CargasEBF2.TextBox51.Text
                d.g_workgage = CargasEBF2.TextBox52.Text
                d.tpBFP = CargasEBF2.TextBox53.Text
                d.bfp = CargasEBF2.TextBox54.Text
                d.Lemax2 = CargasEBF2.TextBox55.Text
                d.Leh2 = CargasEBF2.TextBox56.Text

                'Longitud de los enlaces

                d.FyPLSimpleBFP = TextBox290.Text
                d.RyPLSimpleBFP = TextBox292.Text

                'Dimensiones del marco

                d.LBMVC = TextBox303.Text
                d.SHVC = TextBox304.Text

                'Datos de diseño de la conexión tipo = 10
                '   Conexión arriostre-placa gusset
                d.SweldVC = TextBox215N.Text
                d.LwbrVC = TextBox216N.Text
                d.gAwtmrVC = TextBox217N.Text
                d.tVC = TextBox218N.Text
                'Datos de diseño de la conexión tipo = 6
                '   Conexión arriostre-placa gusset
                d.SweldVC = TextBox215N.Text
                d.LwbrVC = TextBox216N.Text
                d.gAwtmrVC = TextBox217N.Text
                d.tVC = TextBox218N.Text
                '   Gometría de la placa gusset
                d.PhiGussetVC = TextBox204.Text
                '   phi'
                d.holeacces_a = TextBox207.Text
                '   2t
                d.dostGussetVC = TextBox219.Text
                '   L
                d.LGussetVC = TextBox205.Text
                '   LA
                d.LAGussetVC = TextBox206.Text
                '   LB
                d.LBGussetVC = TextBox337.Text

                '   Pernos

                d.bPSVC = ComboBox19.Text
                d.tPSVC = TextBox287.Text
                d.BTipoVC = ComboBox15.Text
                d.BDiamVC = ComboBox16.Text
                d.GPSqnt = TextBox265.Text
                d.GPSspc = TextBox288.Text
                d.BPSqnt = TextBox289.Text
                d.BPSspc = TextBox278.Text

                '   Soldadura

                d.DGBIVC = TextBox279.Text
                d.DGCIVC = TextBox282.Text

            ElseIf Tipo = 13 Then

                If (TextBox295.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox295, "Sección requerida.")
                    Return Nothing
                End If

                If (TextBox300.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox300, "Tipo de acero requerido.")
                    Return Nothing
                End If

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema

                'Secciones
                '   recicla d.br2vc y lo asigna como la viga secundaria

                d.BR1VC = TextBox297.Text
                d.BMVC = TextBox295.Text
                d.CLVC = TextBox296.Text
                d.BR2VC = TextBox294.Text

                'Aceros
                '   recicla d.stbr2vc y lo asigna como el acero de la viga secundaria

                d.StBR1VC = TextBox298.Text
                d.StBr2VC = TextBox299.Text
                d.StBMVC = TextBox300.Text
                d.StCLVC = TextBox302.Text
                d.StPLVC = TextBox301.Text

                'Formulario de cargas EBF
                '   RECICLA LOS DATOS DE LAS SMF

                d.MatPlaca = CargasEBF2.TextBox1.Text
                d.espesor_plCont = CargasEBF2.TextBox2.Text
                d.recorte1_plCont = CargasEBF2.TextBox3.Text
                d.contacto1_plCont = CargasEBF2.TextBox4.Text
                d.recorte2_plCont = CargasEBF2.TextBox5.Text
                d.contacto2_plCont = CargasEBF2.TextBox6.Text
                d.soldplCont = CargasEBF2.TextBox7.Text
                d.Rsold_plCont = CargasEBF2.TextBox8.Text
                d.Dsold_plCont = CargasEBF2.TextBox9.Text
                d.As_plCont = CargasEBF2.TextBox10.Text
                d.AsminplCont = CargasEBF2.TextBox11.Text
                d.sold2plCont = CargasEBF2.TextBox12.Text
                d.sold_capPlate = CargasEBF2.TextBox13.Text
                d.tRefNodal = CargasEBF2.TextBox14.Text
                d.plNodal_dist = CargasEBF2.TextBox15.Text
                d.bisel_plNodal = CargasEBF2.TextBox16.Text
                d.soldFilete_plNodal = CargasEBF2.TextBox17.Text
                d.tmin_plNodalSobresale = CargasEBF2.TextBox18.Text
                d.dim_a = CargasEBF2.TextBox19.Text
                d.ainf = CargasEBF2.TextBox20.Text
                d.asup = CargasEBF2.TextBox21.Text
                d.dim_b = CargasEBF2.TextBox22.Text
                d.cinf = CargasEBF2.TextBox23.Text
                d.csup = CargasEBF2.TextBox24.Text
                d.tplRBS = CargasEBF2.TextBox25.Text
                d.diamReq = CargasEBF2.TextBox26.Text
                d.gramilBEEP = CargasEBF2.TextBox27.Text
                d.bpBEEP = CargasEBF2.TextBox28.Text
                d.pfoBEEP = CargasEBF2.TextBox29.Text
                d.pfiBEEP = CargasEBF2.TextBox30.Text
                d.deBEEP = CargasEBF2.TextBox31.Text
                d.pbBEEP = CargasEBF2.TextBox32.Text
                d.treqBEEP = CargasEBF2.TextBox33.Text
                d.tpBEEP = CargasEBF2.TextBox34.Text
                d.Lst = CargasEBF2.TextBox35.Text
                d.hst = CargasEBF2.TextBox36.Text
                d.Lst_grafica = CargasEBF2.TextBox37.Text
                d.hst_grafica = CargasEBF2.TextBox38.Text
                d.FysBEEP = CargasEBF2.TextBox39.Text
                d.tsBSEEP = CargasEBF2.TextBox40.Text
                d.tsmin = CargasEBF2.TextBox41.Text
                d.plcontBEEP = CargasEBF2.TextBox42.Text
                d.tcfMinBEEP = CargasEBF2.TextBox43.Text
                d.holgBFP = CargasEBF2.TextBox44.Text
                d.dbMaxBFP = CargasEBF2.TextBox45.Text
                d.Lemax1 = CargasEBF2.TextBox46.Text
                d.Leh1 = CargasEBF2.TextBox47.Text
                d.Lev1 = CargasEBF2.TextBox48.Text
                d.Lc1 = CargasEBF2.TextBox49.Text
                d.gramilBFP = CargasEBF2.TextBox50.Text
                d.gmin = CargasEBF2.TextBox51.Text
                d.g_workgage = CargasEBF2.TextBox52.Text
                d.tpBFP = CargasEBF2.TextBox53.Text
                d.bfp = CargasEBF2.TextBox54.Text
                d.Lemax2 = CargasEBF2.TextBox55.Text
                d.Leh2 = CargasEBF2.TextBox56.Text

                'Longitud de los enlaces

                d.FyPLSimpleBFP = TextBox290.Text
                d.RyPLSimpleBFP = TextBox292.Text

                'Dimensiones del marco

                d.LBMVC = TextBox303.Text
                d.SHVC = TextBox304.Text

                'Datos de diseño de la conexión tipo = 6
                '   Conexión arriostre-placa gusset
                d.SweldVC = TextBox215N.Text
                d.LwbrVC = TextBox216N.Text
                d.gAwtmrVC = TextBox217N.Text
                d.tVC = TextBox218N.Text
                '   Gometría de la placa gusset
                '   phi
                d.PhiGussetVC = TextBox204.Text
                '   phi'
                d.holeacces_a = TextBox207.Text
                '   2t
                d.dostGussetVC = TextBox219.Text
                '   L
                d.LGussetVC = TextBox205.Text
                '   LA
                d.LAGussetVC = TextBox206.Text
                '   LB
                d.LBGussetVC = TextBox337.Text

                d.DBCVC = TextBox221.Text
                d.DGBIVC = TextBox222.Text
                d.DGCIVC = TextBox223.Text

            ElseIf Tipo = 14 Then

                If (TextBox306.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox306, "Sección requerida.")
                    Return Nothing
                End If

                If (TextBox309.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox309, "Tipo de acero requerido.")
                    Return Nothing
                End If

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema

                'Secciones
                '

                d.BR1VC = TextBox306.Text
                d.BMVC = TextBox305.Text

                'Aceros
                '   recicla d.stbr2vc y lo asigna como el acero de la viga secundaria

                d.StBR1VC = TextBox308.Text
                d.StBMVC = TextBox309.Text
                d.StPLVC = TextBox307.Text

                'Formulario de cargas EBF
                '   RECICLA LOS DATOS DE LAS SMF

                d.MatPlaca = CargasEBF2.TextBox1.Text
                d.espesor_plCont = CargasEBF2.TextBox2.Text
                d.recorte1_plCont = CargasEBF2.TextBox3.Text
                d.contacto1_plCont = CargasEBF2.TextBox4.Text
                d.recorte2_plCont = CargasEBF2.TextBox5.Text
                d.contacto2_plCont = CargasEBF2.TextBox6.Text
                d.soldplCont = CargasEBF2.TextBox7.Text
                d.Rsold_plCont = CargasEBF2.TextBox8.Text
                d.Dsold_plCont = CargasEBF2.TextBox9.Text
                d.As_plCont = CargasEBF2.TextBox10.Text
                d.AsminplCont = CargasEBF2.TextBox11.Text
                d.sold2plCont = CargasEBF2.TextBox12.Text
                d.sold_capPlate = CargasEBF2.TextBox13.Text
                d.tRefNodal = CargasEBF2.TextBox14.Text
                d.plNodal_dist = CargasEBF2.TextBox15.Text
                d.bisel_plNodal = CargasEBF2.TextBox16.Text
                d.soldFilete_plNodal = CargasEBF2.TextBox17.Text
                d.tmin_plNodalSobresale = CargasEBF2.TextBox18.Text
                d.dim_a = CargasEBF2.TextBox19.Text
                d.ainf = CargasEBF2.TextBox20.Text
                d.asup = CargasEBF2.TextBox21.Text
                d.dim_b = CargasEBF2.TextBox22.Text
                d.cinf = CargasEBF2.TextBox23.Text
                d.csup = CargasEBF2.TextBox24.Text
                d.tplRBS = CargasEBF2.TextBox25.Text
                d.diamReq = CargasEBF2.TextBox26.Text
                d.gramilBEEP = CargasEBF2.TextBox27.Text
                d.bpBEEP = CargasEBF2.TextBox28.Text
                d.pfoBEEP = CargasEBF2.TextBox29.Text
                d.pfiBEEP = CargasEBF2.TextBox30.Text
                d.deBEEP = CargasEBF2.TextBox31.Text
                d.pbBEEP = CargasEBF2.TextBox32.Text
                d.treqBEEP = CargasEBF2.TextBox33.Text
                d.tpBEEP = CargasEBF2.TextBox34.Text
                d.Lst = CargasEBF2.TextBox35.Text
                d.hst = CargasEBF2.TextBox36.Text
                d.Lst_grafica = CargasEBF2.TextBox37.Text
                d.hst_grafica = CargasEBF2.TextBox38.Text
                d.FysBEEP = CargasEBF2.TextBox39.Text
                d.tsBSEEP = CargasEBF2.TextBox40.Text
                d.tsmin = CargasEBF2.TextBox41.Text
                d.plcontBEEP = CargasEBF2.TextBox42.Text
                d.tcfMinBEEP = CargasEBF2.TextBox43.Text
                d.holgBFP = CargasEBF2.TextBox44.Text
                d.dbMaxBFP = CargasEBF2.TextBox45.Text
                d.Lemax1 = CargasEBF2.TextBox46.Text
                d.Leh1 = CargasEBF2.TextBox47.Text
                d.Lev1 = CargasEBF2.TextBox48.Text
                d.Lc1 = CargasEBF2.TextBox49.Text
                d.gramilBFP = CargasEBF2.TextBox50.Text
                d.gmin = CargasEBF2.TextBox51.Text
                d.g_workgage = CargasEBF2.TextBox52.Text
                d.tpBFP = CargasEBF2.TextBox53.Text
                d.bfp = CargasEBF2.TextBox54.Text
                d.Lemax2 = CargasEBF2.TextBox55.Text
                d.Leh2 = CargasEBF2.TextBox56.Text

                'Longitud del enlace

                d.FyPLSimpleBFP = TextBox290.Text

                'Dimensiones del marco

                d.LBMVC = TextBox303.Text
                d.SHVC = TextBox304.Text

                'Datos de diseño de la conexión tipo = 14
                '   Conexión arriostre-placa gusset
                d.SweldVC = TextBox320.Text
                d.LwbrVC = TextBox318.Text
                d.tVC = TextBox315.Text
                '   Gometría de la placa gusset
                d.PhiGussetVC = TextBox331.Text
                d.LAGussetVC = TextBox333.Text
                '   Soldadura
                d.DGBIVC = TextBox335.Text

            ElseIf Tipo = 15 Then

                If (TextBox295.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox295, "Sección requerida.")
                    Return Nothing
                End If

                If (TextBox300.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox300, "Tipo de acero requerido.")
                    Return Nothing
                End If

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema

                'Secciones
                '   recicla d.br2vc y lo asigna como la viga secundaria

                d.BR1VC = TextBox297.Text
                d.BMVC = TextBox295.Text
                d.CLVC = TextBox296.Text
                d.BR2VC = TextBox294.Text

                'Aceros
                '   recicla d.stbr2vc y lo asigna como el acero de la viga secundaria

                d.StBR1VC = TextBox298.Text
                d.StBr2VC = TextBox299.Text
                d.StBMVC = TextBox300.Text
                d.StCLVC = TextBox302.Text
                d.StPLVC = TextBox301.Text

                'Formulario de cargas EBF
                '   RECICLA LOS DATOS DE LAS SMF

                d.MatPlaca = CargasEBF2.TextBox1.Text
                d.espesor_plCont = CargasEBF2.TextBox2.Text
                d.recorte1_plCont = CargasEBF2.TextBox3.Text
                d.contacto1_plCont = CargasEBF2.TextBox4.Text
                d.recorte2_plCont = CargasEBF2.TextBox5.Text
                d.contacto2_plCont = CargasEBF2.TextBox6.Text
                d.soldplCont = CargasEBF2.TextBox7.Text
                d.Rsold_plCont = CargasEBF2.TextBox8.Text
                d.Dsold_plCont = CargasEBF2.TextBox9.Text
                d.As_plCont = CargasEBF2.TextBox10.Text
                d.AsminplCont = CargasEBF2.TextBox11.Text
                d.sold2plCont = CargasEBF2.TextBox12.Text
                d.sold_capPlate = CargasEBF2.TextBox13.Text
                d.tRefNodal = CargasEBF2.TextBox14.Text
                d.plNodal_dist = CargasEBF2.TextBox15.Text
                d.bisel_plNodal = CargasEBF2.TextBox16.Text
                d.soldFilete_plNodal = CargasEBF2.TextBox17.Text
                d.tmin_plNodalSobresale = CargasEBF2.TextBox18.Text
                d.dim_a = CargasEBF2.TextBox19.Text
                d.ainf = CargasEBF2.TextBox20.Text
                d.asup = CargasEBF2.TextBox21.Text
                d.dim_b = CargasEBF2.TextBox22.Text
                d.cinf = CargasEBF2.TextBox23.Text
                d.csup = CargasEBF2.TextBox24.Text
                d.tplRBS = CargasEBF2.TextBox25.Text
                d.diamReq = CargasEBF2.TextBox26.Text
                d.gramilBEEP = CargasEBF2.TextBox27.Text
                d.bpBEEP = CargasEBF2.TextBox28.Text
                d.pfoBEEP = CargasEBF2.TextBox29.Text
                d.pfiBEEP = CargasEBF2.TextBox30.Text
                d.deBEEP = CargasEBF2.TextBox31.Text
                d.pbBEEP = CargasEBF2.TextBox32.Text
                d.treqBEEP = CargasEBF2.TextBox33.Text
                d.tpBEEP = CargasEBF2.TextBox34.Text
                d.Lst = CargasEBF2.TextBox35.Text
                d.hst = CargasEBF2.TextBox36.Text
                d.Lst_grafica = CargasEBF2.TextBox37.Text
                d.hst_grafica = CargasEBF2.TextBox38.Text
                d.FysBEEP = CargasEBF2.TextBox39.Text
                d.tsBSEEP = CargasEBF2.TextBox40.Text
                d.tsmin = CargasEBF2.TextBox41.Text
                d.plcontBEEP = CargasEBF2.TextBox42.Text
                d.tcfMinBEEP = CargasEBF2.TextBox43.Text
                d.holgBFP = CargasEBF2.TextBox44.Text
                d.dbMaxBFP = CargasEBF2.TextBox45.Text
                d.Lemax1 = CargasEBF2.TextBox46.Text
                d.Leh1 = CargasEBF2.TextBox47.Text
                d.Lev1 = CargasEBF2.TextBox48.Text
                d.Lc1 = CargasEBF2.TextBox49.Text
                d.gramilBFP = CargasEBF2.TextBox50.Text
                d.gmin = CargasEBF2.TextBox51.Text
                d.g_workgage = CargasEBF2.TextBox52.Text
                d.tpBFP = CargasEBF2.TextBox53.Text
                d.bfp = CargasEBF2.TextBox54.Text
                d.Lemax2 = CargasEBF2.TextBox55.Text
                d.Leh2 = CargasEBF2.TextBox56.Text

                'Longitud del enlace

                d.FyPLSimpleBFP = TextBox290.Text

                'Dimensiones del marco

                d.LBMVC = TextBox303.Text
                d.SHVC = TextBox304.Text

                'Datos de diseño de la conexión tipo = 15
                '   Conexión arriostre-placa gusset
                d.SweldVC = TextBox215N.Text
                d.LwbrVC = TextBox216N.Text
                d.gAwtmrVC = TextBox217N.Text
                d.tVC = TextBox218N.Text
                '   Gometría de la placa gusset
                '   phi
                d.PhiGussetVC = TextBox204.Text
                '   phi'
                d.holeacces_a = TextBox207.Text
                '   2t
                d.dostGussetVC = TextBox219.Text
                '   L
                d.LGussetVC = TextBox205.Text
                '   LA
                d.LAGussetVC = TextBox206.Text
                '   LB
                d.LBGussetVC = TextBox337.Text

                '   Pernos

                d.bPSVC = ComboBox19.Text
                d.tPSVC = TextBox287.Text
                d.BTipoVC = ComboBox15.Text
                d.BDiamVC = ComboBox16.Text
                d.GPSqnt = TextBox265.Text
                d.GPSspc = TextBox288.Text
                d.BPSqnt = TextBox289.Text
                d.BPSspc = TextBox278.Text

                '   Soldadura

                d.DGBIVC = TextBox279.Text
                d.DGCIVC = TextBox282.Text

            ElseIf Tipo = 16 Then

                If (TextBox295.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox295, "Sección requerida.")
                    Return Nothing
                End If

                If (TextBox300.Text = String.Empty) Then
                    errorProvider1.SetError(TextBox300, "Tipo de acero requerido.")
                    Return Nothing
                End If

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema

                'Secciones
                '   recicla d.br2vc y lo asigna como la viga secundaria

                d.BR1VC = TextBox297.Text
                d.BMVC = TextBox295.Text
                d.CLVC = TextBox296.Text
                d.BR2VC = TextBox294.Text

                'Aceros
                '   recicla d.stbr2vc y lo asigna como el acero de la viga secundaria

                d.StBR1VC = TextBox298.Text
                d.StBr2VC = TextBox299.Text
                d.StBMVC = TextBox300.Text
                d.StCLVC = TextBox302.Text
                d.StPLVC = TextBox301.Text

                'Formulario de cargas EBF
                '   RECICLA LOS DATOS DE LAS SMF

                d.MatPlaca = CargasEBF2.TextBox1.Text
                d.espesor_plCont = CargasEBF2.TextBox2.Text
                d.recorte1_plCont = CargasEBF2.TextBox3.Text
                d.contacto1_plCont = CargasEBF2.TextBox4.Text
                d.recorte2_plCont = CargasEBF2.TextBox5.Text
                d.contacto2_plCont = CargasEBF2.TextBox6.Text
                d.soldplCont = CargasEBF2.TextBox7.Text
                d.Rsold_plCont = CargasEBF2.TextBox8.Text
                d.Dsold_plCont = CargasEBF2.TextBox9.Text
                d.As_plCont = CargasEBF2.TextBox10.Text
                d.AsminplCont = CargasEBF2.TextBox11.Text
                d.sold2plCont = CargasEBF2.TextBox12.Text
                d.sold_capPlate = CargasEBF2.TextBox13.Text
                d.tRefNodal = CargasEBF2.TextBox14.Text
                d.plNodal_dist = CargasEBF2.TextBox15.Text
                d.bisel_plNodal = CargasEBF2.TextBox16.Text
                d.soldFilete_plNodal = CargasEBF2.TextBox17.Text
                d.tmin_plNodalSobresale = CargasEBF2.TextBox18.Text
                d.dim_a = CargasEBF2.TextBox19.Text
                d.ainf = CargasEBF2.TextBox20.Text
                d.asup = CargasEBF2.TextBox21.Text
                d.dim_b = CargasEBF2.TextBox22.Text
                d.cinf = CargasEBF2.TextBox23.Text
                d.csup = CargasEBF2.TextBox24.Text
                d.tplRBS = CargasEBF2.TextBox25.Text
                d.diamReq = CargasEBF2.TextBox26.Text
                d.gramilBEEP = CargasEBF2.TextBox27.Text
                d.bpBEEP = CargasEBF2.TextBox28.Text
                d.pfoBEEP = CargasEBF2.TextBox29.Text
                d.pfiBEEP = CargasEBF2.TextBox30.Text
                d.deBEEP = CargasEBF2.TextBox31.Text
                d.pbBEEP = CargasEBF2.TextBox32.Text
                d.treqBEEP = CargasEBF2.TextBox33.Text
                d.tpBEEP = CargasEBF2.TextBox34.Text
                d.Lst = CargasEBF2.TextBox35.Text
                d.hst = CargasEBF2.TextBox36.Text
                d.Lst_grafica = CargasEBF2.TextBox37.Text
                d.hst_grafica = CargasEBF2.TextBox38.Text
                d.FysBEEP = CargasEBF2.TextBox39.Text
                d.tsBSEEP = CargasEBF2.TextBox40.Text
                d.tsmin = CargasEBF2.TextBox41.Text
                d.plcontBEEP = CargasEBF2.TextBox42.Text
                d.tcfMinBEEP = CargasEBF2.TextBox43.Text
                d.holgBFP = CargasEBF2.TextBox44.Text
                d.dbMaxBFP = CargasEBF2.TextBox45.Text
                d.Lemax1 = CargasEBF2.TextBox46.Text
                d.Leh1 = CargasEBF2.TextBox47.Text
                d.Lev1 = CargasEBF2.TextBox48.Text
                d.Lc1 = CargasEBF2.TextBox49.Text
                d.gramilBFP = CargasEBF2.TextBox50.Text
                d.gmin = CargasEBF2.TextBox51.Text
                d.g_workgage = CargasEBF2.TextBox52.Text
                d.tpBFP = CargasEBF2.TextBox53.Text
                d.bfp = CargasEBF2.TextBox54.Text
                d.Lemax2 = CargasEBF2.TextBox55.Text
                d.Leh2 = CargasEBF2.TextBox56.Text

                'Longitud del enlace

                d.FyPLSimpleBFP = TextBox290.Text

                'Dimensiones del marco

                d.LBMVC = TextBox303.Text
                d.SHVC = TextBox304.Text

                'datos de diseño

                d.SweldVC = TextBox215N.Text
                d.LwbrVC = TextBox216N.Text

                d.gAwtmrVC = TextBox217N.Text
                d.tVC = TextBox218N.Text

                '   Gometría de la placa gusset
                '   phi
                d.PhiGussetVC = TextBox204.Text
                '   phi'
                d.holeacces_a = TextBox207.Text
                '   2t
                d.dostGussetVC = TextBox219.Text
                '   L
                d.LGussetVC = TextBox205.Text
                '   LA
                d.LAGussetVC = TextBox206.Text
                '   LB
                d.LBGussetVC = TextBox337.Text

                d.DBCVC = TextBox221.Text
                d.DGBIVC = TextBox222.Text
                d.DGCIVC = TextBox223.Text

            End If

        ElseIf Sistema = "BRBF" Then

            d.LthetaCalc = OpcionesDiseño.LthetaBr
            d.momindCalc = OpcionesDiseño.MomInd
            d.CompFrm = OpcionesDiseño.CompConsid

            If (TextBox317.Text = String.Empty) Then
                errorProvider1.SetError(TextBox317, "Sección requerida.")
                Return Nothing
            End If

            If (TextBox291.Text = String.Empty) Then
                errorProvider1.SetError(TextBox291, "Tipo de acero requerido.")
                Return Nothing
            End If

            If Tipo = 17 Then

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema

                'Miembros a conectar

                d.BMVC = TextBox317.Text
                d.CLVC = TextBox319.Text
                '   BRBF's
                '       Beta1
                d.dim_b = PerfilesBRBF.TextBox1.Text
                '       Omega1
                d.cinf = PerfilesBRBF.TextBox2.Text
                '       Asc1
                d.csup = PerfilesBRBF.TextBox3.Text
                '       Beta2
                d.AsminplCont = PerfilesBRBF.TextBox10.Text
                '       Omega2
                d.sold2plCont = PerfilesBRBF.TextBox9.Text
                '       Asc1
                d.sold_capPlate = PerfilesBRBF.TextBox8.Text

                'Acero de los miembros a conectar

                d.StPLVC = TextBox291.Text
                d.StBMVC = TextBox312.Text
                d.StCLVC = TextBox311.Text
                'BRBF's
                '   Fysc1
                d.MatPlaca = SteelBRBF.TextBox1.Text
                '   Ry1
                d.espesor_plCont = SteelBRBF.TextBox2.Text
                '   Fysc2
                d.recorte1_plCont = SteelBRBF.TextBox3.Text
                '   Ry2
                d.contacto1_plCont = SteelBRBF.TextBox4.Text

                'Cargas de la viga
                d.CMBMVC = TextBox326.Text
                d.CLBMVC = TextBox325.Text

                'Longitud e inclinación de los arriostres
                '   Long. Arr. Superior
                d.BR1VC = TextBox328.Text
                '   Inclinación arr. superior
                d.SHVC = TextBox327.Text
                '   Long. Arr. inferior
                d.BR2VC = TextBox314.Text
                '   Incl. Arr. Inferior
                d.SH2VC = TextBox313.Text

                'DATOS DE DISEÑO
                '   GEOMETRÍA DE LA PLACA
                '   Recicla datos de las SMF
                '       Lug
                d.Claro = TextBox224.Text
                d.SeccCol = TextBox228.Text
                d.contacto2_plCont = TextBox226.Text
                d.CV = TextBox227.Text
                d.CM = TextBox225.Text
                '       Pernos
                d.GPSqnt = TextBox229.Text
                d.BDiamVC = ComboBox17.Text
                '       Espesor
                d.diamReq = TextBox244.Text
                '       Placa
                d.gramilBEEP = TextBox243.Text
                d.bpBEEP = TextBox242.Text
                d.pfoBEEP = TextBox241.Text

                'SOLDADURA
                d.DBCVC = TextBox405.Text
                d.DGBSVC = TextBox404.Text
                d.DGCSVC = TextBox402.Text
                
            ElseIf Tipo = 18 Then

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema

                'Miembros a conectar

                d.BMVC = TextBox317.Text
                d.CLVC = TextBox319.Text
                '   BRBF's
                '       Beta1
                d.dim_b = PerfilesBRBF.TextBox1.Text
                '       Omega1
                d.cinf = PerfilesBRBF.TextBox2.Text
                '       Asc1
                d.csup = PerfilesBRBF.TextBox3.Text
                '       Beta2
                d.AsminplCont = PerfilesBRBF.TextBox10.Text
                '       Omega2
                d.sold2plCont = PerfilesBRBF.TextBox9.Text
                '       Asc1
                d.sold_capPlate = PerfilesBRBF.TextBox8.Text

                'Acero de los miembros a conectar

                d.StPLVC = TextBox291.Text
                d.StBMVC = TextBox312.Text
                d.StCLVC = TextBox311.Text
                'BRBF's
                '   Fysc1
                d.MatPlaca = SteelBRBF.TextBox1.Text
                '   Ry1
                d.espesor_plCont = SteelBRBF.TextBox2.Text
                '   Fysc2
                d.recorte1_plCont = SteelBRBF.TextBox3.Text
                '   Ry2
                d.contacto1_plCont = SteelBRBF.TextBox4.Text

                'Cargas de la viga
                d.CMBMVC = TextBox326.Text
                d.CLBMVC = TextBox325.Text

                'Longitud e inclinación de los arriostres
                '   Long. Arr. Superior
                d.BR1VC = TextBox328.Text
                '   Inclinación arr. superior
                d.SHVC = TextBox327.Text
                '   Long. Arr. inferior
                d.BR2VC = TextBox314.Text
                '   Incl. Arr. Inferior
                d.SH2VC = TextBox313.Text

                'DATOS DE DISEÑO
                '   GEOMETRÍA DE LA PLACA
                '   Recicla datos de las SMF
                '       Lug superior
                d.Claro = TextBox250.Text
                d.SeccCol = TextBox246.Text
                d.contacto2_plCont = TextBox248.Text
                d.CV = TextBox247.Text
                d.CM = TextBox249.Text
                '       Pernos superiores
                d.tPSVC = TextBox245.Text
                d.diamReq = ComboBox18.Text
                '       Espesor pl. Superior
                d.gramilBEEP = TextBox340.Text
                '       Placa superior
                d.bpBEEP = TextBox343.Text
                d.pfoBEEP = TextBox342.Text
                d.pfiBEEP = TextBox341.Text
                d.soldFilete_plNodal = TextBox339.Text
                d.soldplCont = TextBox252.Text
                d.Rsold_plCont = TextBox254.Text
                d.Dsold_plCont = TextBox253.Text
                d.As_plCont = TextBox338.Text
                d.deBEEP = TextBox251.Text
                d.pbBEEP = ComboBox20.Text
                d.tpBEEP = TextBox389.Text
                d.Lst = TextBox392.Text
                d.hst = TextBox391.Text
                d.Lst_grafica = TextBox390.Text
                '   Tamaños de soldadura
                d.DBCVC = TextBox405.Text
                d.DGBSVC = TextBox404.Text
                d.DGBIVC = TextBox402.Text
                d.DGCSVC = TextBox403.Text
                d.DGCIVC = TextBox401.Text

            ElseIf Tipo = 19 Then

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema

                'Miembros a conectar

                d.BMVC = TextBox317.Text
                '   BRBF's
                '       Beta2
                d.AsminplCont = PerfilesBRBF2.TextBox10.Text
                '       Omega2
                d.sold2plCont = PerfilesBRBF2.TextBox9.Text
                '       Asc1
                d.sold_capPlate = PerfilesBRBF2.TextBox8.Text

                'Acero de los miembros a conectar

                d.StPLVC = TextBox291.Text
                d.StBMVC = TextBox312.Text
                'BRBF's
                '   Fysc2
                d.recorte1_plCont = SteelBRBF2.TextBox3.Text
                '   Ry2
                d.contacto1_plCont = SteelBRBF2.TextBox4.Text

                'Cargas de la viga
                d.CMBMVC = TextBox326.Text
                d.CLBMVC = TextBox325.Text

                'Longitud e inclinación de los arriostres
                '   Long. Arr. inferior
                d.BR1VC = TextBox328.Text
                '   Inclinación arr. inferior
                d.SHVC = TextBox327.Text

                'DATOS DE DISEÑO
                '   GEOMETRÍA DE LA PLACA
                '   Recicla datos de las SMF
                '       Lug
                d.Claro = TextBox224.Text
                d.SeccCol = TextBox228.Text
                d.contacto2_plCont = TextBox226.Text
                d.CV = TextBox227.Text
                d.CM = TextBox225.Text
                '       Pernos
                d.GPSqnt = TextBox229.Text
                d.BDiamVC = ComboBox17.Text
                '       Espesor
                d.diamReq = TextBox244.Text
                '       Placa
                d.gramilBEEP = TextBox243.Text
                d.bpBEEP = TextBox242.Text
                d.pfoBEEP = TextBox241.Text
                d.DGBIVC = TextBox408.Text

            ElseIf Tipo = 20 Then

                d.Calc = Calculate
                d.Tipo_de_Conexion = Tipo
                d.Sistema = Sistema

                'Miembros a conectar

                d.BMVC = TextBox317.Text
                '   BRBF's
                '       Beta1
                d.dim_b = PerfilesBRBF2.TextBox1.Text
                '       Omega1
                d.cinf = PerfilesBRBF2.TextBox2.Text
                '       Asc1
                d.csup = PerfilesBRBF2.TextBox3.Text
                '       Beta2
                d.AsminplCont = PerfilesBRBF2.TextBox10.Text
                '       Omega2
                d.sold2plCont = PerfilesBRBF2.TextBox9.Text
                '       Asc1
                d.sold_capPlate = PerfilesBRBF2.TextBox8.Text

                'Acero de los miembros a conectar

                d.StPLVC = TextBox291.Text
                d.StBMVC = TextBox312.Text
                'BRBF's
                '   Fysc1
                d.MatPlaca = SteelBRBF2.TextBox1.Text
                '   Ry1
                d.espesor_plCont = SteelBRBF2.TextBox2.Text
                '   Fysc2
                d.recorte1_plCont = SteelBRBF2.TextBox3.Text
                '   Ry2
                d.contacto1_plCont = SteelBRBF2.TextBox4.Text

                'Cargas de la viga
                d.CMBMVC = TextBox326.Text
                d.CLBMVC = TextBox325.Text

                'Longitud e inclinación de los arriostres
                '   Long. Arr. Superior
                d.BR1VC = TextBox328.Text
                '   Inclinación arr. superior
                d.SHVC = TextBox327.Text
                '   Long. Arr. inferior
                d.BR2VC = TextBox314.Text
                '   Incl. Arr. Inferior
                d.SH2VC = TextBox313.Text

                'DATOS DE DISEÑO
                '   GEOMETRÍA DE LA PLACA
                '   Recicla datos de las SMF
                '       Lug superior
                d.Claro = TextBox250.Text
                d.SeccCol = TextBox246.Text
                d.contacto2_plCont = TextBox248.Text
                d.CV = TextBox247.Text
                d.CM = TextBox249.Text
                '       Pernos superiores
                d.tPSVC = TextBox245.Text
                d.diamReq = ComboBox18.Text
                '       Espesor pl. Superior
                d.gramilBEEP = TextBox340.Text
                '       Placa superior
                d.bpBEEP = TextBox343.Text
                d.pfoBEEP = TextBox342.Text
                d.pfiBEEP = TextBox341.Text
                d.tcfMinBEEP = TextBox339.Text
                d.soldplCont = TextBox252.Text
                d.Rsold_plCont = TextBox254.Text
                d.Dsold_plCont = TextBox253.Text
                d.As_plCont = TextBox338.Text
                d.deBEEP = TextBox251.Text
                d.pbBEEP = ComboBox20.Text
                d.tpBEEP = TextBox389.Text
                d.Lst = TextBox392.Text
                d.hst = TextBox391.Text
                d.Lst_grafica = TextBox390.Text

                'SOLDADURA
                d.DGBSVC = TextBox408.Text
                d.DGBIVC = TextBox409.Text

            End If

        End If

        '   long. e incl. de los arriostres

        d.Lbrcn = Lbr
        d.Lbrcn2 = Lbr2
        d.thetacn = theta
        d.thetacn2 = theta2

        'Datos generales
        d.Mom_gravedad = OpcionesDiseño.Mgconsid
        d.VC_consid = OpcionesDiseño.Vcconsid
        d.VCMpc_consid = OpcionesDiseño.VcMpcconsid
        d.VCRu_consid = OpcionesDiseño.VcRUconsid
        d.BfRBS_consid = OpcionesDiseño.BfredRBS
        d.Hsup_coL = AlturasEntrepiso.Hsup
        d.Hinf_coL = AlturasEntrepiso.Hinf
        d.FormAnchoPLcont = OpenAnchPl
        d.Opcbp_PLcont = AnchoPlcont.OpcSelecc
        d.anchoProp_plcont = AnchoPlcont.TextoAnchoPl

        Return d
    End Function

    ''' <summary>
    ''' Convierte un objeto Image en un array de Byte.
    ''' </summary>
    ''' <param name="image">Objeto Image que se desea convertir.</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Shared Function ImageToBytes(image As Image) As Byte()

        If (image Is Nothing) Then Return Nothing

        ' Obtenemos el formato del archivo gráfico.
        '
        Dim format As Imaging.ImageFormat = image.RawFormat

        Using ms As New IO.MemoryStream()

            ' Guardamos el archivo con el mismo formato.
            '
            image.Save(ms, format)

            ' Devolvemos el array de bytes clonado.
            '
            ' Return DirectCast(ms.ToArray().Clone(), Byte())
            Return ms.ToArray()

        End Using
    End Function
    Private Sub Nuevo()

        If RevMode Then
            GoTo Line0
        End If

        ' Eliminamos el valor del campo que guarda
        ' la ruta del archivo actual.
        '
        m_fileName = String.Empty
        Me.Text = "ADCAS"
        ' Restauramos el valor de los controles.
        '
        ConexionesSMF.Visible = False
        FlowLayoutPanel1.Visible = False
        FlowLayoutPanel2N.Visible = False
        FlowLayoutPanel2.Visible = False
        '
        'Variables que inicialicen en cero
        Calculate = 0
        SiPLcont = False
        OpcionesDiseño.Mgconsid = 0
        OpcionesDiseño.Vcconsid = 0
        OpcionesDiseño.VcMpcconsid = 0
        OpcionesDiseño.VcRUconsid = 0
        OpcionesDiseño.BfredRBS = 0
        AlturasEntrepiso.Hsup = 0
        AlturasEntrepiso.Hinf = 0
        AnchoPlcont.OpcSelecc = 0

        '(Restaura iconos por defecto de los botones)
        Button1.BackgroundImage = My.Resources.BOTON_SMF2
        Button2.BackgroundImage = My.Resources.BOTON_SCBF2
        Button3.BackgroundImage = My.Resources.BOTON_EBF2
        Button15.BackgroundImage = My.Resources.BOTON_BRBF2

        RBS.BackColor = Color.Transparent
        RBS.BackgroundImage = My.Resources.ICONO_RBS

        BUEEP.BackColor = Color.Transparent
        BUEEP.BackgroundImage = My.Resources.ICONObueep

        BFP.BackColor = Color.Transparent
        BFP.BackgroundImage = My.Resources.ICONO_BFP

        WUF.BackColor = Color.Transparent
        WUF.BackgroundImage = My.Resources.ICONO_WUFw

        BSEEP.BackColor = Color.Transparent
        BSEEP.BackgroundImage = My.Resources.ICONO8ES

        Button12N.BackColor = Color.Transparent
        Button12N.BackgroundImage = My.Resources.ICONOscbfPlacaSimple

        Button13N.BackColor = Color.Transparent
        Button13N.BackgroundImage = My.Resources.ICONOscbfSoldada

        Button14N.BackColor = Color.Transparent
        Button14N.BackgroundImage = My.Resources.ICONOebfEnlace

        Button6N1.BackColor = Color.Transparent
        Button6N1.BackgroundImage = My.Resources.ICONOscbfPlacaSimple

        Button7N1.BackColor = Color.Transparent
        Button7N1.BackgroundImage = My.Resources.ICONOscbfSoldada

        Button23N.BackColor = Color.Transparent
        Button23N.BackgroundImage = My.Resources.ICONOsoldadaDoble

        Button24N.BackColor = Color.Transparent
        Button24N.BackgroundImage = My.Resources.ICONOscbfX

        Button26N.BackColor = Color.Transparent
        Button26N.BackgroundImage = My.Resources.ICONOtopePLsimp

        Button27N.BackColor = Color.Transparent
        Button27N.BackgroundImage = My.Resources.ICONOtopeSold

        Button19.BackColor = Color.Transparent
        Button19.BackgroundImage = My.Resources.ICONOtopePLsimp

        Button20.BackColor = Color.Transparent
        Button20.BackgroundImage = My.Resources.ICONOtopeSold

        Button17.BackColor = Color.Transparent
        Button17.BackgroundImage = My.Resources.ICONObrbfSoldada

        Button18.BackColor = Color.Transparent
        Button18.BackgroundImage = My.Resources.ICONOsoldadabrbfDoble

        Button16.BackColor = Color.Transparent
        Button16.BackgroundImage = My.Resources.ICONObrbfV

        Button27.BackColor = Color.Transparent
        Button27.BackgroundImage = My.Resources.ICONObrbfX

        GroupBox1.Visible = False
        GroupBox138N.Visible = False
        Me.ComboBox1.SelectedIndex = 0
        Me.ComboBox2.SelectedItem = "No"
        Me.ComboBox8.SelectedItem = "No"
        Me.ComboBox4.SelectedIndex = 0
        TabControl1N.Visible = False
        TabControlJ1.Visible = False
        TabControl1.Visible = False
        TabControl2.Visible = False
        TabControl3.Visible = False
        TabControl4.Visible = False
        LabelDiseño.Visible = False
        labelStatusBar1.Text = "ADCAS -Aplicación para el Diseño de Conexiones de Acero Sismorresistentes"
        Sistema = String.Empty
        TextBox27.BackColor = Color.White
        TextBox25.BackColor = Color.White
        TextBox21.BackColor = Color.White
        ComboBox5.BackColor = Color.White
        TextBox90.BackColor = Color.White
        TextBox88.BackColor = Color.White
        TextBox80.BackColor = Color.White
        TextBox100.BackColor = Color.White
        TextBox98.BackColor = Color.White
        TextBox94.BackColor = Color.White
        TextBox96.BackColor = Color.White
        ComboBox7.BackColor = Color.White
        TextBox111.BackColor = Color.White
        TextBox110.BackColor = Color.White
        TextBox112.BackColor = Color.WhiteSmoke
        TextBox114.BackColor = Color.WhiteSmoke
        TextBox121.BackColor = Color.WhiteSmoke
        TextBox120.BackColor = Color.WhiteSmoke
        TextBox119.BackColor = Color.WhiteSmoke
        TextBox130.BackColor = Color.White
        TextBox132.BackColor = Color.WhiteSmoke
        TextBox92.BackColor = Color.WhiteSmoke
        TextBox192.BackColor = Color.White
        TextBox43.BackColor = Color.White
        TextBox40.BackColor = Color.White
        TextBox45.BackColor = Color.White
        TextBox164.BackColor = Color.WhiteSmoke
        TextBox52.BackColor = Color.White
        TextBox54.BackColor = Color.WhiteSmoke
        TextBox55.BackColor = Color.WhiteSmoke
        TextBox60.BackColor = Color.White
        TextBox61.BackColor = Color.WhiteSmoke
        TextBox68.BackColor = Color.WhiteSmoke

        TextBox260.BackColor = Color.White
        TextBox259.BackColor = Color.White
        TextBox258.BackColor = Color.White
        TextBox267.BackColor = Color.White
        TextBox274.BackColor = Color.White
        TextBox273.BackColor = Color.White
        TextBox272.BackColor = Color.White
        TextBox271.BackColor = Color.White
        TextBox281.BackColor = Color.White
        TextBox285.BackColor = Color.White
        TextBox286.BackColor = Color.White
        TextBox215N.BackColor = Color.White
        TextBox216N.BackColor = Color.White
        TextBox217N.BackColor = Color.White
        TextBox218N.BackColor = Color.White
        TextBox221.BackColor = Color.White
        TextBox223.BackColor = Color.White
        TextBox265.BackColor = Color.White
        TextBox288.BackColor = Color.White
        TextBox289.BackColor = Color.White
        TextBox278.BackColor = Color.White
        TextBox279.BackColor = Color.White
        TextBox282.BackColor = Color.White
        textbox348.BackColor = Color.White
        textbox347.BackColor = Color.White
        textbox346.BackColor = Color.White
        textbox345.BackColor = Color.White
        textbox359.BackColor = Color.White
        textbox380.BackColor = Color.White
        textbox379.BackColor = Color.White
        textbox378.BackColor = Color.White
        textbox377.BackColor = Color.White
        textbox373.BackColor = Color.White
        TextBox240.BackColor = Color.White
        TextBox239.BackColor = Color.White
        TextBox238.BackColor = Color.White
        TextBox255.BackColor = Color.White
        TextBox256.BackColor = Color.White
        TextBox257.BackColor = Color.White

        Label699.ForeColor = Color.White
        Label697.ForeColor = Color.White
        Label692.ForeColor = Color.White
        Label687.ForeColor = Color.White
        Label686.ForeColor = Color.White
        Label739.ForeColor = Color.White
        Label737.ForeColor = Color.White
        Label731.ForeColor = Color.White
        Label732.ForeColor = Color.White
        Label727.ForeColor = Color.White
        Label726.ForeColor = Color.White
        Label788.ForeColor = Color.White
        Label818.ForeColor = Color.White
        Label652N.ForeColor = Color.White
        Label654N.ForeColor = Color.White
        Label664N.ForeColor = Color.White
        Label665N.ForeColor = Color.White
        Label662N.ForeColor = Color.White
        Label663N.ForeColor = Color.White
        Label207.ForeColor = Color.White
        Label394.ForeColor = Color.White
        Label427.ForeColor = Color.White
        label558.ForeColor = Color.White
        label554.ForeColor = Color.White
        label476.ForeColor = Color.White
        label477.ForeColor = Color.White
        label467.ForeColor = Color.White
        label462.ForeColor = Color.White
        Label537.ForeColor = Color.White
        Label522.ForeColor = Color.White
        Label501.ForeColor = Color.White
        Label603.ForeColor = Color.White
        Label624.ForeColor = Color.White

        ' Seleccionamos todos los controles TextBox existentes
        '
        limpiarCampos(GroupBox2)
        limpiarCampos(GroupBox5)
        limpiarCampos(GroupBox3)
        limpiarCampos(GroupBox6)
        limpiarCampos(GroupBox40)
        limpiarCampos(GroupBox42)
        limpiarCampos(GroupBox46)
        limpiarCampos(GroupBox47)
        limpiarCampos(GroupBox48)
        limpiarCampos(GroupBox50)
        limpiarCampos(GroupBox52)
        limpiarCampos(GroupBox53)
        limpiarCampos(GroupBox43)
        limpiarCampos(GroupBox44)
        limpiarCampos(GroupBox45)
        limpiarCampos(GroupBox82)
        limpiarCampos(GroupBox8)
        limpiarCampos(GroupBox9)
        limpiarCampos(GroupBox10)
        limpiarCampos(GroupBox11)
        limpiarCampos(GroupBox34)
        limpiarCampos(GroupBox35)
        limpiarCampos(GroupBox12)
        limpiarCampos(GroupBox13)
        TextBox35.Clear()
        TextBox37.Clear()
        limpiarCampos(GroupBox55)
        limpiarCampos(GroupBox56)
        TextBox149.Clear()
        limpiarCampos(GroupBox67)
        TextBox145.Clear()
        TextBox148.Clear()
        TextBox147.Clear()
        limpiarCampos(GroupBox64)
        limpiarCampos(GroupBox65)
        limpiarCampos(GroupBox66)
        limpiarCampos(GroupBox70)
        limpiarCampos(GroupBox71)
        TextBox173.Clear()
        TextBox174.Clear()
        TextBox175.Clear()
        TextBox177.Clear()
        TextBox178.Clear()
        TextBox179.Clear()
        limpiarCampos(GroupBox75)
        limpiarCampos(GroupBox80)
        limpiarCampos(GroupBox81)
        TextBox194.Clear()
        limpiarCampos(GroupBox84)
        limpiarCampos(GroupBox85)
        TextBox202.Clear()
        TextBox203.Clear()
        limpiarCampos(GroupBox18)
        limpiarCampos(GroupBox16)
        limpiarCampos(GroupBox17)
        limpiarCampos(GroupBox68)
        limpiarCampos(GroupBox69)
        TextBox172.Clear()
        limpiarCampos(GroupBox21)
        limpiarCampos(GroupBox22)
        TextBox53.Clear()
        limpiarCampos(GroupBox24)
        limpiarCampos(GroupBox26)
        limpiarCampos(GroupBox27)
        limpiarCampos(GroupBox28)
        limpiarCampos(GroupBox30)
        limpiarCampos(GroupBox149N)
        limpiarCampos(GroupBox150N)
        GroupBox149N.Visible = False
        GroupBox150N.Visible = False
        GroupBox177.Visible = False
        GroupBox175.Visible = False
        limpiarCampos(GroupBox178)
        limpiarCampos(GroupBox179)
        limpiarCampos(GroupBox176)
        limpiarCampos(GroupBox180)
        limpiarCampos(GroupBox181)
        limpiarCampos(GroupBox182)
        limpiarCampos(CargasEBF2.GroupBox1)
        limpiarCampos(CargasEBF2.GroupBox2)
        limpiarCampos(CargasEBF2.GroupBox3)
        limpiarCampos(CargasEBF2.GroupBox4)
        limpiarCampos(CargasEBF2.GroupBox5)
        limpiarCampos(CargasEBF2.GroupBox6)
        limpiarCampos(CargasEBF2.GroupBox7)
        limpiarCampos(CargasEBF2.GroupBox8)
        limpiarCampos(CargasEBF2.GroupBox9)
        limpiarCampos(CargasEBF2.GroupBox10)

        'xxxxxxxxxxx Datos iniciales BRBF
        limpiarCampos(GroupBox185)
        limpiarCampos(GroupBox183)
        limpiarCampos(GroupBox139N)
        limpiarCampos(GroupBox187)
        limpiarCampos(GroupBox188)
        limpiarCampos(GroupBox184)


        'Datos iniciales conexiones SCBF
        limpiarCampos(GroupBox139N)
        limpiarCampos(GroupBox140N)
        limpiarCampos(GroupBox141N)
        limpiarCampos(GroupBox142N)
        limpiarCampos(GroupBox149N)
        limpiarCampos(GroupBox150N)
        
        'Datos de diseño conexión Tipo 6, 7, 10, 11
        '   Conexión Arriostre-Placa Gusset
        limpiarcamposLabels(GroupBox146N)
        limpiarcamposLabels(GroupBox143N)
        limpiarcamposLabels(GroupBox144N)
        limpiarcamposLabels(GroupBox145N)

        limpiarcamposLabels(GroupBox88)
        limpiarcamposLabels(GroupBox92)
        limpiarcamposLabels(GroupBox96)
        limpiarcamposLabels(GroupBox89)
        limpiarcamposLabels(GroupBox90)
        limpiarcamposLabels(GroupBox91)
        limpiarcamposLabels(GroupBox93)
        limpiarcamposLabels(GroupBox94)
        limpiarcamposLabels(GroupBox95)
        limpiarcamposLabels(GroupBox97)
        limpiarcamposLabels(GroupBox98)
        limpiarcamposLabels(GroupBox99)
        limpiarCampos(GroupBox143N)
        limpiarCampos(GroupBox144N)
        '       Geometría de la placa gusset
        limpiarCampos(GroupBox148N)
        limpiarcamposLabels(GroupBox87)
        '   Conexión viga-columna
        limpiarcamposLabels(GroupBox88)
        limpiarcamposLabels(GroupBox92)
        limpiarcamposLabels(GroupBox96)
        limpiarcamposLabels(GroupBox89)
        limpiarcamposLabels(GroupBox90)
        limpiarcamposLabels(GroupBox91)
        limpiarcamposLabels(GroupBox93)
        limpiarcamposLabels(GroupBox94)
        limpiarcamposLabels(GroupBox95)
        limpiarcamposLabels(GroupBox97)
        limpiarcamposLabels(GroupBox98)
        limpiarcamposLabels(GroupBox99)
        limpiarCampos(GroupBox143N)
        limpiarCampos(GroupBox144N)
        '   Conexión Arriostre-Placa superior

        giphi = 0
        gsphi = 0
        Lwbr = 0
        Lwbr2 = 0
        t = 0
        tinf = 0
        gLgusset = 0
        gLAgusset = 0
        gLBgusset = 0
        gLpatín = 0
        gia = 0
        gidoste = 0
        giLAgusset = 0
        giLBgusset = 0
        giLpatín = 0
        Lbr = 0
        Lbr2 = 0
        theta = 0
        theta2 = 0

        'TIPO 8 SUPERIOR ARRIOSTRE-PLACA
        limpiarCampos(GroupBox106)
        limpiarCampos(GroupBox105)
        limpiarcamposLabels(GroupBox103)
        limpiarcamposLabels(GroupBox104)
        limpiarcamposLabels(GroupBox105)
        limpiarcamposLabels(GroupBox106)

        limpiarCampos(GroupBox200)
        limpiarcamposLabels(GroupBox199)

        'TIPO 8 INFERIOR   Conexión arriostre-placa inferior

        limpiarcamposLabels(GroupBox204)
        limpiarcamposLabels(GroupBox205)
        limpiarcamposLabels(GroupBox206)
        limpiarcamposLabels(GroupBox207)
        limpiarCampos(GroupBox207)
        limpiarCampos(GroupBox206)

        limpiarCampos(GroupBox203)
        limpiarcamposLabels(GroupBox202)

        '   Conexión Viga-Columna tipo 8

        limpiarcamposLabels(GroupBox115)
        limpiarcamposLabels(GroupBox116)
        limpiarcamposLabels(GroupBox117)
        limpiarcamposLabels(GroupBox118)
        limpiarcamposLabels(GroupBox111)
        limpiarcamposLabels(GroupBox112)
        limpiarcamposLabels(GroupBox113)
        limpiarcamposLabels(GroupBox114)
        limpiarcamposLabels(GroupBox107)
        limpiarcamposLabels(GroupBox108)
        limpiarcamposLabels(GroupBox109)
        limpiarcamposLabels(GroupBox110)
        limpiarcamposLabels(GroupBox126)
        limpiarcamposLabels(GroupBox127)
        limpiarcamposLabels(GroupBox128)
        limpiarcamposLabels(GroupBox129)
        limpiarcamposLabels(GroupBox130)
        limpiarcamposLabels(GroupBox131)
        limpiarcamposLabels(GroupBox132)
        limpiarcamposLabels(GroupBox133)
        TextBox240.Text = ""
        TextBox239.Text = ""
        TextBox238.Text = ""
        TextBox255.Text = ""
        TextBox256.Text = ""

        'Datos de diseño de la conexión Tipo = 9

        '   Conexión Arriostre-Placa superior

        limpiarCampos(GroupBox137)
        Label685.Text = ""
        Label701.Text = ""
        Label699.Text = ""
        Label697.Text = ""
        Label695.Text = ""
        limpiarCampos(GroupBox136)
        Label690.Text = ""
        Label691.Text = ""
        Label692.Text = ""
        Label687.Text = ""
        Label686.Text = ""
        limpiarCampos(GroupBox140)
        Label703.Text = ""
        Label705.Text = ""

        '   Conexión Arriostre-Placa inferior

        limpiarCampos(GroupBox144)
        Label725.Text = ""
        Label741.Text = ""
        Label739.Text = ""
        Label737.Text = ""
        Label735.Text = ""
        limpiarCampos(GroupBox143)
        Label730.Text = "Ancho de Whitmore:"
        Label731.Text = ""
        Label732.Text = ""
        Label727.Text = ""
        Label726.Text = ""
        limpiarCampos(GroupBox147)
        Label743.Text = ""
        Label745.Text = ""
        'CheckBox1.Enabled = True
        'CheckBox1.CheckState = CheckState.Unchecked

        '   Conexiones Placa-Viga

        Label793.Text = ""
        Label774.Text = ""
        Label792.Text = ""
        Label785.Text = ""
        Label782.Text = ""
        Label788.Text = ""
        Label775.Text = ""
        Label780.Text = ""
        Label778.Text = ""
        Label767.Text = ""
        Label764.Text = ""
        Label772.Text = ""
        Label770.Text = ""

        Label823.Text = ""
        Label822.Text = ""
        Label804.Text = ""
        Label815.Text = ""
        Label812.Text = ""
        Label818.Text = ""
        Label805.Text = ""
        Label810.Text = ""
        Label808.Text = ""
        Label797.Text = ""
        Label794.Text = ""
        Label802.Text = ""
        Label800.Text = ""
        TextBox284.Text = ""
        TextBox285.Text = ""

        
        '   Pernos y soldadura

Line0:

        limpiarcamposLabels(GroupBox158)
        limpiarcamposLabels(GroupBox159)
        limpiarcamposLabels(GroupBox162)
        limpiarcamposLabels(GroupBox165)
        limpiarcamposLabels(GroupBox168)
        limpiarcamposLabels(GroupBox166)
        limpiarcamposLabels(GroupBox168)
        limpiarcamposLabels(GroupBox170)
        limpiarcamposLabels(GroupBox172)
        limpiarcamposLabels(GroupBox161)
        limpiarcamposLabels(GroupBox160)
        limpiarcamposLabels(GroupBox163)
        limpiarcamposLabels(GroupBox164)
        limpiarcamposLabels(GroupBox167)
        limpiarcamposLabels(GroupBox169)
        limpiarcamposLabels(GroupBox173)
        limpiarcamposLabels(GroupBox171)

        ComboBox19.SelectedIndex = -1

        'Restauramos algunos valores que se borran en los TextBoxs que deseamos que aparezcan desde un inicio
        TextBox96.Text = "0.5"
        TextBox106.Text = "STD"
        TextBox105.Text = "0.5"
        TextBox126.Text = "ASTM A490/F2280"
        TextBox125.Text = "113"
        TextBox124.Text = "84"

        'CONEXIONES BRBF
        '   Datos iniciales
        limpiarCampos(GroupBox185)
        limpiarCampos(GroupBox183)
        limpiarCampos(GroupBox187)
        limpiarCampos(GroupBox188)
        limpiarCampos(GroupBox184)
        '   DATOS DE DISEÑO
        '       CONEXIÓN CON EL ARRIOSTRE
        TextBox224.Text = ""
        TextBox250.Text = ""
        TextBox339.Text = ""
        TextBox228.Text = ""
        TextBox246.Text = ""
        TextBox252.Text = ""
        TextBox226.Text = ""
        TextBox248.Text = ""
        TextBox254.Text = ""
        TextBox227.Text = ""
        TextBox247.Text = ""
        TextBox253.Text = ""
        TextBox229.Text = ""
        TextBox245.Text = ""
        TextBox251.Text = ""
        TextBox225.Text = ""
        TextBox249.Text = ""
        TextBox338.Text = ""
        limpiarCampos(GroupBox101)
        limpiarCampos(GroupBox102)
        limpiarCampos(GroupBox120)
        limpiarCampos(GroupBox119)
        limpiarCampos(GroupBox121)
        limpiarCampos(GroupBox125)
        limpiarCampos(GroupBox124)
        limpiarCampos(GroupBox123)
        limpiarCampos(GroupBox212)
        limpiarCampos(GroupBox211)
        limpiarCampos(GroupBox209)
        limpiarCampos(GroupBox210)
        limpiarcamposLabels(GroupBox120)
        limpiarcamposLabels(GroupBox119)
        limpiarcamposLabels(GroupBox122)
        limpiarcamposLabels(GroupBox123)
        limpiarcamposLabels(GroupBox209)
        limpiarcamposLabels(GroupBox210)

        limpiarcamposLabels(GroupBox229)
        limpiarcamposLabels(GroupBox230)
        limpiarcamposLabels(GroupBox232)
        limpiarcamposLabels(GroupBox225)
        limpiarcamposLabels(GroupBox228)
        limpiarcamposLabels(GroupBox227)
        limpiarcamposLabels(GroupBox226)
        limpiarcamposLabels(GroupBox217)
        limpiarcamposLabels(GroupBox220)
        limpiarcamposLabels(GroupBox219)
        limpiarcamposLabels(GroupBox218)
        limpiarcamposLabels(GroupBox221)
        limpiarcamposLabels(GroupBox222)
        limpiarcamposLabels(GroupBox223)
        limpiarcamposLabels(GroupBox224)
        limpiarcamposLabels(GroupBox213)
        limpiarcamposLabels(GroupBox216)
        limpiarcamposLabels(GroupBox215)
        limpiarcamposLabels(GroupBox214)

        limpiarcamposLabels(GroupBox237)
        limpiarcamposLabels(GroupBox243)
        limpiarcamposLabels(GroupBox244)
        limpiarcamposLabels(GroupBox245)
        limpiarcamposLabels(GroupBox247)
        limpiarcamposLabels(GroupBox233)
        limpiarcamposLabels(GroupBox248)
        limpiarcamposLabels(GroupBox249)
        limpiarcamposLabels(GroupBox250)
        limpiarcamposLabels(GroupBox251)

        'Label140.Text = ""
        Label1538.Text = ""
        Label1541.Text = ""
        Label1537.Text = ""
        Label1536.Text = ""
        Label1534.Text = ""
        Label1532.Text = ""
        Label1530.Text = ""
        Label1533.Text = ""
        Label1526.Text = ""
        Label1528.Text = ""
        Label1525.Text = ""
        Label1522.Text = ""
        Label1524.Text = ""
        Label1413.Text = ""
        Label1416.Text = ""
        Label1415.Text = ""

        If RevMode = False Then
            Button1.Focus()
        End If

    End Sub
    Private Sub Open()

        Dim fileName As String

        ' Seleccionamos un archivo para abrir.
        '
        Using ofd As New OpenFileDialog()
            ofd.Filter = ".CAS|*.dat|Todos los archivos|*.*"
            Dim dr As DialogResult = ofd.ShowDialog(Me)
            If (dr <> DialogResult.OK) Then Return
            fileName = ofd.FileName
        End Using

        Try
            ' Creamos una nueva instancia de la clase Persona como
            ' resultado de deserializar el archivo especificado.
            '
            Dim d As Datos = Datos.Open(fileName)
            Calculate = d.Calc
            Tipo = d.Tipo_de_Conexion
            Sistema = d.Sistema
            SiPLcont = d.YesoNo_plconts
            'En dependencia del Sistema de Marco, se 
            'muestran los botones correspondientes
            'y se obtienen los datos pertinentes
            If Sistema = "SMF" Then
                Button1_Click(AbrirToolStripMenuItem1, Nothing)
                GroupBox175.Visible = False
                GroupBox138N.Visible = False
                GroupBox177.Visible = False

                TextBox2.Text = d.SeccViga
                TextBox1.Text = d.SeccCol
                Dim InstSecc As Secciones = Secciones.GetSingleton
                Dim InsAcero As Aceros = Aceros.GetSingleton
                InstSecc.Show()
                InstSecc.ComboBox1.SelectedValue = d.perfilViga
                InstSecc.ComboBox2.SelectedValue = d.perfilCol
                InsAcero.Show()
                InstSecc.Hide()
                InsAcero.Hide()

                ComboBox1.SelectedIndex = d.Vigas_conectadas
                ComboBox8.SelectedIndex = d.Losa
                ComboBox2.SelectedIndex = d.Conex_Extremo

                TextBox8.Text = d.MatViga
                InsAcero.ComboBox1.SelectedValue = d.AceroViga
                TextBox7.Text = d.MatCol
                InsAcero.ComboBox2.SelectedValue = d.AceroCol
                TextBox9.Text = d.MatPlaca
                InsAcero.ComboBox3.SelectedValue = d.AceroPlaca
                TextBox3.Text = d.CV
                TextBox5.Text = d.CM
                TextBox6.Text = d.Claro
                TextBox4.Text = d.Carga_Axial
                TextBox43.Text = d.espesor_plCont
                TextBox43.BackColor = d.plcontBckColor
                TextBox40.Text = d.recorte1_plCont
                TextBox40.BackColor = d.BckColor1
                TextBox41.Text = d.contacto1_plCont
                TextBox45.Text = d.recorte2_plCont
                TextBox45.BackColor = d.BckColor2
                TextBox44.Text = d.contacto2_plCont
                If (d.biselRecto = 0) Then
                    RadioButton9.Checked = True
                Else
                    RadioButton10.Checked = True
                End If
                Label75.Text = d.soldplCont
                TextBox49.Text = d.Rsold_plCont
                TextBox47.Text = d.Dsold_plCont
                TextBox164.Text = d.As_plCont
                TextBox164.BackColor = d.BckColor3
                Label289.Text = d.AsminplCont
                TextBox165.Text = d.sold2plCont
                TextBox72.Text = d.sold_capPlate
                TextBox52.Text = d.tRefNodal
                TextBox52.BackColor = d.BckColor4
                If (d.confPlNodal = 0) Then
                    RadioButton1.Checked = True
                Else
                    RadioButton2.Checked = True
                End If
                If (d.dispPlNodal = 0) Then
                    RadioButton3.Checked = True
                Else
                    RadioButton4.Checked = True
                End If

                If (d.soldPlNodal = 0) Then
                    RadioButton5.Checked = True
                Else
                    RadioButton6.Checked = True
                End If
                If (d.bordPlNodal = 0) Then
                    RadioButton7.Checked = True
                Else
                    RadioButton8.Checked = True
                End If
                TextBox60.Text = d.plNodal_dist
                TextBox60.BackColor = d.BckColor5
                TextBox63.Text = d.bisel_plNodal
                TextBox63.BackColor = d.BckColor6
                TextBox65.Text = d.soldFilete_plNodal
                TextBox67.Text = d.tmin_plNodalSobresale

                If Tipo = 1 Then 'Es una Conexion RBS
                    TextBox27.Text = d.dim_a
                    TextBox27.BackColor = d.bckcolorRBS1
                    TextBox26.Text = d.ainf
                    TextBox24.Text = d.asup

                    TextBox25.Text = d.dim_b
                    TextBox25.BackColor = d.bckcolorRBS2
                    TextBox23.Text = d.binf
                    TextBox22.Text = d.bsup

                    TextBox21.Text = d.dim_c
                    TextBox21.BackColor = d.bckcolorRBS3
                    TextBox20.Text = d.cinf
                    TextBox19.Text = d.csup
                    TextBox37.Text = d.tplRBS
                    TextBox37.BackColor = d.BckColor7

                ElseIf Tipo = 2 Then 'Es una Conexion BUEEP
                    ComboBox6.SelectedIndex = d.pernoBEEP
                    ComboBox4.SelectedIndex = d.holeBEEP
                    TextBox77.Text = d.diamReq
                    ComboBox5.SelectedIndex = d.diamBEEP
                    TextBox90.Text = d.gramilBEEP
                    TextBox90.BackColor = d.BckColorBEEP1
                    TextBox88.Text = d.bpBEEP
                    TextBox88.BackColor = d.BckColorBEEP2
                    TextBox80.Text = d.pfoBEEP
                    TextBox100.Text = d.pfiBEEP
                    TextBox98.Text = d.deBEEP
                    TextBox98.BackColor = d.BckColorBEEP3
                    TextBox95.Text = d.treqBEEP
                    TextBox96.Text = d.tpBEEP
                    TextBox160.Text = d.plcontBEEP
                    TextBox161.Text = d.tcfMinBEEP
                    TextBox161.BackColor = d.BckColor

                ElseIf Tipo = 3 Then 'Es una Conexion BSEEP
                    ComboBox6.SelectedIndex = d.pernoBEEP
                    ComboBox4.SelectedIndex = d.holeBEEP
                    TextBox77.Text = d.diamReq
                    ComboBox5.SelectedIndex = d.diamBEEP
                    TextBox90.Text = d.gramilBEEP
                    TextBox90.BackColor = d.BckColorBEEP1
                    TextBox88.Text = d.bpBEEP
                    TextBox88.BackColor = d.BckColorBEEP2
                    TextBox80.Text = d.pfoBEEP
                    TextBox100.Text = d.pfiBEEP
                    TextBox98.Text = d.deBEEP
                    TextBox98.BackColor = d.BckColorBEEP3
                    TextBox94.Text = d.pbBEEP
                    TextBox94.BackColor = d.BckColorBEEP4
                    ComboBox3.SelectedIndex = d.tipoBSEEP
                    TextBox95.Text = d.treqBEEP
                    TextBox96.Text = d.tpBEEP
                    TextBox101.Text = d.Lst
                    TextBox102.Text = d.hst
                    TextBox97.Text = d.Lst_grafica
                    TextBox99.Text = d.hst_grafica
                    TextBox103.Text = d.FysBEEP
                    TextBox104.Text = d.tsBSEEP
                    LabelTsmin.Text = d.tsmin
                    LabelTsmin.Visible = True
                    TextBox160.Text = d.plcontBEEP
                    TextBox161.Text = d.tcfMinBEEP
                    TextBox161.BackColor = d.BckColor

                ElseIf Tipo = 4 Then 'Es una Conexion BFP
                    TextBox105.Text = d.holgBFP
                    TextBox107.Text = d.dbMaxBFP
                    ComboBox7.SelectedIndex = d.dbBFP
                    TextBox109.Text = d.Lemax1
                    TextBox111.Text = d.Leh1
                    TextBox111.BackColor = d.bckcolorBFP1
                    TextBox110.Text = d.Lev1
                    TextBox110.BackColor = d.bckcolorBFP2
                    TextBox112.Text = d.Lc1
                    TextBox112.BackColor = d.bckcolorBFP3
                    TextBox113.Text = d.gramilBFP
                    TextBox114.Text = d.gmin
                    TextBox114.BackColor = d.bckcolorBFP4
                    TextBox115.Text = d.g_workgage
                    ComboBox9.SelectedIndex = d.holeBFP
                    TextBox118.Text = d.tpBFP
                    TextBox116.Text = d.bfp
                    TextBox122.Text = d.Lemax2
                    TextBox121.Text = d.Leh2
                    TextBox121.BackColor = d.bckcolorBFP5
                    TextBox120.Text = d.Lev2
                    TextBox120.BackColor = d.bckcolorBFP6
                    TextBox119.Text = d.Lc2
                    TextBox119.BackColor = d.bckcolorBFP7
                    TextBox134.Text = d.Npernos
                    TextBox135.Text = d.N_prop
                    TextBox130.Text = d.s_prop
                    TextBox130.BackColor = d.bckcolorBFP8
                    TextBox131.Text = d.smin
                    TextBox129.Text = d.smax
                    TextBox128.Text = d.S1_BFP
                    TextBox127.Text = d.Sh_BFP
                    TextBox132.Text = d.Lc3
                    TextBox132.BackColor = d.bckcolorBFP9
                    ComboBox12.SelectedIndex = d.AcerPlSimple_BFP
                    ComboBox13.SelectedIndex = d.PernPlSimple_BFP
                    ComboBox11.SelectedIndex = d.DiamPernPlSimple_BFP
                    ComboBox10.SelectedIndex = d.NumPernPlSimple_BFP
                    ComboBox14.SelectedIndex = d.SoldPlSimple_BFP
                    Label320.Text = d.NotaLeh
                    If (d.VisibleBFP1 = 0) Then
                        Label320.Visible = True
                    Else
                        Label320.Visible = False
                    End If
                    Label326.Text = d.NotaSoldadura
                    If (d.VisibleBFP2 = 0) Then
                        Label326.Visible = True
                    Else
                        Label326.Visible = False
                    End If
                    TextBox184.Text = d.aIntroducido
                    TextBox185.Text = d.LehIntroducido
                    TextBox183.Text = d.esp_sIntrod
                    TextBox187.Text = d.LevIntroducido
                    TextBox188.Text = d.tplSimpleBFP
                    TextBox190.Text = d.SoldFilete_PlSimpleBFP
                    TextBox190.BackColor = d.bckcolorBFP10
                    TextBox191.Text = d.Soldmin_PlSimpleBFP
                    TextBox182.BackColor = d.bckcolorBFP11

                ElseIf Tipo = 5 Then 'Es una Conexion WUF-W
                    TextBox81.Text = d.holeacces_a
                    TextBox79.Text = d.holeacces_b
                    TextBox75.Text = d.holeacces_c
                    TextBox82.Text = d.holeacces_d
                    TextBox93.Text = d.holgMontaje
                    TextBox85.Text = d.aPrimaVal
                    TextBox83.Text = d.bPrimaVal
                    TextBox76.Text = d.cPrimaVal
                    TextBox74.Text = d.dPrimaVal
                    TextBox73.Text = d.ePrimaVal
                    TextBox86.Text = d.anchoEstimadoPL
                    TextBox87.Text = d.longCalcPL
                    TextBox89.Text = d.longPropPL
                    TextBox92.Text = d.aPrimaNew
                    TextBox92.BackColor = d.bckcolorWUFW1
                    TextBox192.Text = d.tpPropPL
                    TextBox192.BackColor = d.bckcolorWUFW2
                    Label329.Text = d.twbWUF
                    TextBox193.Text = d.FyPLSimpleBFP
                    TextBox199.Text = d.RyPLSimpleBFP
                End If

            ElseIf Sistema = "SCBF" Then

                Button2_Click_1(AbrirToolStripMenuItem1, Nothing)
                OpenMode = True
                OpcionesDiseño.LthetaBr = d.LthetaCalc
                OpcionesDiseño.MomInd = d.momindCalc
                OpcionesDiseño.CompConsid = d.CompFrm

                If Tipo = 6 Then

                    Button6N1_Click(AbrirToolStripMenuItem1, Nothing)

                    'Datos iniciales de la conexión SCBF1
                    '   Secciones
                    TextBox201N.Text = d.BR1VC
                    TextBox202N.Text = d.BR2VC
                    TextBox203N.Text = d.BMVC
                    TextBox204N.Text = d.CLVC
                    '   Aceros
                    TextBox205N.Text = d.StBR1VC
                    TextBox206N.Text = d.StBr2VC
                    TextBox207N.Text = d.StBMVC
                    TextBox208N.Text = d.StCLVC
                    TextBox214N.Text = d.StPLVC
                    '   Viga
                    TextBox209N.Text = d.CMBMVC
                    TextBox210N.Text = d.CLBMVC
                    TextBox211N.Text = d.LBMVC
                    '   Pisos
                    TextBox212N.Text = d.SHVC
                    TextBox213N.Text = d.SH2VC
                    '   Formulario BRSecc2
                    BRsecc2.ShowDialog()
                    '   Formulario AceroBR2
                    AceroBR2.ShowDialog()

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    '   Datos de diseño de la conexión SCBF1
                    '   Soldadura, ancho y espesor
                    TextBox215N.Text = d.SweldVC
                    TextBox215N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox216N.Text = d.LwbrVC
                    TextBox216N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox217N.Text = d.gAwtmrVC
                    TextBox217N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox218N.Text = d.tVC
                    TextBox218N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Gometría de la placa gusset
                    TextBox204.Text = d.PhiGussetVC
                    TextBox204_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   phi'
                    TextBox207.Text = d.holeacces_a
                    TextBox207_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   2t
                    TextBox219.Text = d.dostGussetVC
                    TextBox219_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   L
                    TextBox205.Text = d.LGussetVC
                    TextBox205_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LA
                    TextBox206.Text = d.LAGussetVC
                    TextBox206_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LB
                    TextBox337.Text = d.LBGussetVC
                    TextBox337_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Pernos

                    ComboBox19.Text = d.bPSVC
                    TextBox287.Text = d.tPSVC
                    TextBox287_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    ComboBox15.Text = d.BTipoVC
                    ComboBox16.Text = d.BDiamVC
                    TextBox265.Text = d.GPSqnt
                    TextBox265_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox288.Text = d.GPSspc
                    TextBox288_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox289.Text = d.BPSqnt
                    TextBox289_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox278.Text = d.BPSspc
                    TextBox278_KeyPress(AbrirToolStripMenuItem1, Nothing)

                    '   Soldadura

                    TextBox279.Text = d.DGBSVC
                    TextBox279_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox282.Text = d.DGCSVC
                    TextBox282_KeyPress(AbrirToolStripMenuItem1, Nothing)

                ElseIf Tipo = 7 Then

                    Button7N1_Click(AbrirToolStripMenuItem1, Nothing)

                    'Datos iniciales de la conexión SCBF1
                    '   Secciones
                    TextBox201N.Text = d.BR1VC
                    TextBox202N.Text = d.BR2VC
                    TextBox203N.Text = d.BMVC
                    TextBox204N.Text = d.CLVC
                    '   Aceros
                    TextBox205N.Text = d.StBR1VC
                    TextBox206N.Text = d.StBr2VC
                    TextBox207N.Text = d.StBMVC
                    TextBox208N.Text = d.StCLVC
                    TextBox214N.Text = d.StPLVC
                    '   Viga
                    TextBox209N.Text = d.CMBMVC
                    TextBox210N.Text = d.CLBMVC
                    TextBox211N.Text = d.LBMVC
                    '   Pisos
                    TextBox212N.Text = d.SHVC
                    TextBox213N.Text = d.SH2VC
                    '   Formulario BRSecc2
                    BRsecc2.ShowDialog()
                    AceroBR2.ShowDialog()

                    If Calculate = 1 Then
                        CalculosArr()
                    End If

                    '   Datos de diseño de la conexión SCBF1
                    '   Soldadura, ancho y espesor
                    TextBox215N.Text = d.SweldVC
                    TextBox215N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox216N.Text = d.LwbrVC
                    TextBox216N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox217N.Text = d.gAwtmrVC
                    TextBox217N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox218N.Text = d.tVC
                    TextBox218N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Gometría de la placa gusset
                    TextBox204.Text = d.PhiGussetVC
                    TextBox204_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   phi'
                    TextBox207.Text = d.holeacces_a
                    TextBox207_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   2t
                    TextBox219.Text = d.dostGussetVC
                    TextBox219_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   L
                    TextBox205.Text = d.LGussetVC
                    TextBox205_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LA
                    TextBox206.Text = d.LAGussetVC
                    TextBox206_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LB
                    TextBox337.Text = d.LBGussetVC
                    TextBox337_KeyPress(AbrirToolStripMenuItem1, Nothing)

                    '   Tamaños de soldadura
                    TextBox221.Text = d.DBCVC
                    TextBox221_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox222.Text = d.DGBSVC
                    TextBox222_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox223.Text = d.DGCSVC
                    TextBox223_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    OpenMode = False
                ElseIf Tipo = 8 Then
                    Button23N_Click(AbrirToolStripMenuItem1, Nothing)

                    'Datos iniciales de la conexión SCBF1
                    '   Secciones
                    TextBox201N.Text = d.BR1VC
                    TextBox202N.Text = d.BR2VC
                    TextBox203N.Text = d.BMVC
                    TextBox204N.Text = d.CLVC
                    '   Aceros
                    TextBox205N.Text = d.StBR1VC
                    TextBox206N.Text = d.StBr2VC
                    TextBox207N.Text = d.StBMVC
                    TextBox208N.Text = d.StCLVC
                    TextBox214N.Text = d.StPLVC
                    '   Viga
                    TextBox209N.Text = d.CMBMVC
                    TextBox210N.Text = d.CLBMVC
                    TextBox211N.Text = d.LBMVC
                    '   Pisos
                    TextBox212N.Text = d.SHVC
                    TextBox213N.Text = d.SH2VC
                    '   Formulario BRSecc2
                    BRsecc2.ShowDialog()
                    AceroBR2.ShowDialog()

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    'Datos de diseño de la conexión
                    '   Conexión arriostre-placa gusset superior
                    TextBox347.Text = d.LwbrVC
                    textbox347_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox346.Text = d.gAwtmrVC
                    textbox346_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox345.Text = d.tVC
                    textbox345_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Gometría de la placa gusset superior
                    '   phi
                    TextBox362.Text = d.PhiGussetVC
                    textbox362_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   phi'
                    TextBox359.Text = d.holeacces_a
                    textbox359_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   2t
                    TextBox354.Text = d.dostGussetVC
                    textbox354_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   L
                    TextBox361.Text = d.LGussetVC
                    textbox361_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LA
                    TextBox360.Text = d.LAGussetVC
                    textbox360_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LB
                    TextBox350.Text = d.LBGussetVC
                    TextBox350_KeyPress(AbrirToolStripMenuItem1, Nothing)

                    '   Conexión arriostre-placa gusset inferior
                    TextBox380.Text = d.Dbr2VC
                    textbox380_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox379.Text = d.Lwbr2VC
                    TextBox379_KeyPress_1(AbrirToolStripMenuItem1, Nothing)
                    TextBox378.Text = d.gAwtmr2VC
                    TextBox378_KeyPress_1(AbrirToolStripMenuItem1, Nothing)
                    TextBox377.Text = d.t2VC
                    TextBox377_KeyPress_1(AbrirToolStripMenuItem1, Nothing)
                    '   Geometría de la placa gusset inferior
                    '   phi
                    TextBox376.Text = d.phigusset2VC
                    textbox376_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   phi'
                    TextBox373.Text = d.holeacces_b
                    textbox373_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   2t
                    TextBox348.Text = d.dostGusset2VC
                    textbox348_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   L
                    TextBox375.Text = d.Lgusset2VC
                    textbox375_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LA
                    TextBox374.Text = d.LAgusset2VC
                    textbox374_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LB
                    TextBox361.Text = d.LBGusset2VC
                    textbox361_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Tamaños de soldadura
                    TextBox240.Text = d.DBCVC
                    TextBox240_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox239.Text = d.DGBSVC
                    TextBox239_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox238.Text = d.DGBIVC
                    TextBox238_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox255.Text = d.DGCSVC
                    TextBox255_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox256.Text = d.DGCIVC
                    TextBox256_KeyPress(AbrirToolStripMenuItem1, Nothing)

                ElseIf Tipo = 9 Then

                    'Button24N_Click(AbrirToolStripMenuItem1, Nothing)

                    'Datos iniciales de la conexión SCBF1
                    '   Secciones
                    TextBox201N.Text = d.BR1VC
                    TextBox202N.Text = d.BR2VC
                    TextBox203N.Text = d.BMVC
                    '   Aceros
                    TextBox205N.Text = d.StBR1VC
                    TextBox206N.Text = d.StBr2VC
                    TextBox207N.Text = d.StBMVC
                    TextBox214N.Text = d.StPLVC
                    '   Viga
                    TextBox209N.Text = d.CMBMVC
                    TextBox210N.Text = d.CLBMVC
                    TextBox211N.Text = d.LBMVC
                    '   Pisos
                    TextBox212N.Text = d.SHVC
                    TextBox213N.Text = d.SH2VC
                    '   Formulario BRSecc3
                    BrSecc3.ShowDialog()
                    AceroBr3.ShowDialog()

                    'Datos de diseño de la conexión Tipo = 9

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    '   Cnx superior
                    'If d.CheckedBox1 = True Then
                    '    CheckBox1.CheckState = CheckState.Checked
                    'End If
                    TextBox260.Text = d.SweldVC
                    TextBox260_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox259.Text = d.LwbrVC
                    TextBox259_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox258.Text = d.gAwtmrVC
                    TextBox270.Text = d.PhiGussetVC
                    TextBox270_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox257.Text = d.tVC
                    TextBox257_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox267.Text = d.dostGussetVC
                    TextBox267_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox263.Text = d.aGusset
                    TextBox263_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox268.Text = d.LflGusset
                    TextBox268_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox261.Text = d.LGussetVC
                    TextBox261_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox269.Text = d.LAGussetVC
                    TextBox269_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Cnx inferior
                    TextBox274.Text = d.Dbr2VC
                    TextBox274_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox273.Text = d.Lwbr2VC
                    TextBox273_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox272.Text = d.gAwtmr2VC
                    TextBox284.Text = d.phigusset2VC
                    TextBox284_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox271.Text = d.t2VC
                    TextBox271_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox281.Text = d.dostGusset2VC
                    TextBox281_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox277.Text = d.aGusset2
                    TextBox277_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox264.Text = d.LflGusset2
                    TextBox264_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox275.Text = d.Lgusset2VC
                    TextBox275_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox283.Text = d.LAgusset2VC
                    TextBox283_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Tamaños de soldadura
                    TextBox285.Text = d.DGBSVC
                    TextBox285_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox286.Text = d.DGBIVC
                    TextBox286_KeyPress(AbrirToolStripMenuItem1, Nothing)

                ElseIf Tipo = 10 Then
                    '   Secciones
                    TextBox201N.Text = d.BR1VC
                    TextBox202N.Text = d.BR2VC
                    TextBox203N.Text = d.BMVC
                    TextBox204N.Text = d.CLVC
                    '   Aceros
                    TextBox205N.Text = d.StBR1VC
                    TextBox206N.Text = d.StBr2VC
                    TextBox207N.Text = d.StBMVC
                    TextBox208N.Text = d.StCLVC
                    TextBox214N.Text = d.StPLVC
                    '   Viga
                    TextBox209N.Text = d.CMBMVC
                    TextBox210N.Text = d.CLBMVC
                    TextBox211N.Text = d.LBMVC
                    '   Pisos
                    TextBox212N.Text = d.SHVC
                    TextBox213N.Text = d.SH2VC
                    '   Formulario BRSecc
                    BrSecc.ShowDialog()
                    ''   Formulario AceroBR2
                    AceroBr.ShowDialog()

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    '   Datos de diseño de la conexión SCBF1
                    '   Soldadura, ancho y espesor
                    TextBox215N.Text = d.SweldVC
                    TextBox215N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox216N.Text = d.LwbrVC
                    TextBox216N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox217N.Text = d.gAwtmrVC
                    TextBox217N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox218N.Text = d.tVC
                    TextBox218N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Gometría de la placa gusset
                    TextBox204.Text = d.PhiGussetVC
                    TextBox204_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   phi'
                    TextBox207.Text = d.holeacces_a
                    TextBox207_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   2t
                    TextBox219.Text = d.dostGussetVC
                    TextBox219_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   L
                    TextBox205.Text = d.LGussetVC
                    TextBox205_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LA
                    TextBox206.Text = d.LAGussetVC
                    TextBox206_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LB
                    TextBox337.Text = d.LBGussetVC
                    TextBox337_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Tamaños de soldadura
                    TextBox221.Text = d.DBCVC
                    TextBox221_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox222.Text = d.DGBSVC
                    TextBox222_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox223.Text = d.DGCSVC
                    TextBox223_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    OpenMode = False

                ElseIf Tipo = 11 Then

                    Button27N_Click(AbrirToolStripMenuItem1, Nothing)

                    'Datos iniciales de la conexión SCBF1
                    '   Secciones
                    TextBox201N.Text = d.BR1VC
                    TextBox202N.Text = d.BR2VC
                    TextBox203N.Text = d.BMVC
                    TextBox204N.Text = d.CLVC
                    '   Aceros
                    TextBox205N.Text = d.StBR1VC
                    TextBox206N.Text = d.StBr2VC
                    TextBox207N.Text = d.StBMVC
                    TextBox208N.Text = d.StCLVC
                    TextBox214N.Text = d.StPLVC
                    '   Viga
                    TextBox209N.Text = d.CMBMVC
                    TextBox210N.Text = d.CLBMVC
                    TextBox211N.Text = d.LBMVC
                    '   Pisos
                    TextBox212N.Text = d.SHVC
                    TextBox213N.Text = d.SH2VC

                    BrSecc.ShowDialog()
                    AceroBr.ShowDialog()

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    '   Datos de diseño de la conexión SCBF1
                    '   Soldadura, ancho y espesor
                    TextBox215N.Text = d.SweldVC
                    TextBox215N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox216N.Text = d.LwbrVC
                    TextBox216N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox217N.Text = d.gAwtmrVC
                    TextBox217N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox218N.Text = d.tVC
                    TextBox218N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Gometría de la placa gusset
                    TextBox204.Text = d.PhiGussetVC
                    TextBox204_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   phi'
                    TextBox207.Text = d.holeacces_a
                    TextBox207_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   2t
                    TextBox219.Text = d.dostGussetVC
                    TextBox219_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   L
                    TextBox205.Text = d.LGussetVC
                    TextBox205_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LA
                    TextBox206.Text = d.LAGussetVC
                    TextBox206_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LB
                    TextBox337.Text = d.LBGussetVC
                    TextBox337_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Tamaños de soldadura
                    TextBox221.Text = d.DBCVC
                    TextBox221_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox222.Text = d.DGBIVC
                    TextBox222_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox223.Text = d.DGCIVC
                    TextBox223_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    OpenMode = False

                End If

            ElseIf Sistema = "EBF" Then

                Button3_Click(AbrirToolStripMenuItem1, Nothing)
                OpcionesDiseño.LthetaBr = d.LthetaCalc
                OpcionesDiseño.MomInd = d.momindCalc
                OpcionesDiseño.CompConsid = d.CompFrm
                OpenMode = True

                If Tipo = 12 Then

                    Button12N_Click_1(AbrirToolStripMenuItem1, Nothing)

                    'Secciones

                    TextBox297.Text = d.BR1VC
                    TextBox295.Text = d.BMVC
                    TextBox296.Text = d.CLVC
                    TextBox294.Text = d.BR2VC

                    'Aceros

                    TextBox298.Text = d.StBR1VC
                    TextBox299.Text = d.StBr2VC
                    TextBox300.Text = d.StBMVC
                    TextBox302.Text = d.StCLVC
                    TextBox301.Text = d.StPLVC

                    'Formulario Perfiles

                    Perfiles.ShowDialog()

                    'Formulario BRAcero

                    Steel.ShowDialog()

                    'Formulario de CargasEBF2
                    '   Recicla los datos de las conexiones SMF
                    CargasEBF2.TextBox1.Text = d.MatPlaca
                    CargasEBF2.TextBox2.Text = d.espesor_plCont
                    CargasEBF2.TextBox3.Text = d.recorte1_plCont
                    CargasEBF2.TextBox4.Text = d.contacto1_plCont
                    CargasEBF2.TextBox5.Text = d.recorte2_plCont
                    CargasEBF2.TextBox6.Text = d.contacto2_plCont
                    CargasEBF2.TextBox7.Text = d.soldplCont
                    CargasEBF2.TextBox8.Text = d.Rsold_plCont
                    CargasEBF2.TextBox9.Text = d.Dsold_plCont
                    CargasEBF2.TextBox10.Text = d.As_plCont
                    CargasEBF2.TextBox11.Text = d.AsminplCont
                    CargasEBF2.TextBox12.Text = d.sold2plCont
                    CargasEBF2.TextBox13.Text = d.sold_capPlate
                    CargasEBF2.TextBox14.Text = d.tRefNodal
                    CargasEBF2.TextBox15.Text = d.plNodal_dist
                    CargasEBF2.TextBox16.Text = d.bisel_plNodal
                    CargasEBF2.TextBox17.Text = d.soldFilete_plNodal
                    CargasEBF2.TextBox18.Text = d.tmin_plNodalSobresale
                    CargasEBF2.TextBox19.Text = d.dim_a
                    CargasEBF2.TextBox20.Text = d.ainf
                    CargasEBF2.TextBox21.Text = d.asup
                    CargasEBF2.TextBox22.Text = d.dim_b
                    CargasEBF2.TextBox23.Text = d.cinf
                    CargasEBF2.TextBox24.Text = d.csup
                    CargasEBF2.TextBox25.Text = d.tplRBS
                    CargasEBF2.TextBox26.Text = d.diamReq
                    CargasEBF2.TextBox27.Text = d.gramilBEEP
                    CargasEBF2.TextBox28.Text = d.bpBEEP
                    CargasEBF2.TextBox29.Text = d.pfoBEEP
                    CargasEBF2.TextBox30.Text = d.pfiBEEP
                    CargasEBF2.TextBox31.Text = d.deBEEP
                    CargasEBF2.TextBox32.Text = d.pbBEEP
                    CargasEBF2.TextBox33.Text = d.treqBEEP
                    CargasEBF2.TextBox34.Text = d.tpBEEP
                    CargasEBF2.TextBox35.Text = d.Lst
                    CargasEBF2.TextBox36.Text = d.hst
                    CargasEBF2.TextBox37.Text = d.Lst_grafica
                    CargasEBF2.TextBox38.Text = d.hst_grafica
                    CargasEBF2.TextBox39.Text = d.FysBEEP
                    CargasEBF2.TextBox40.Text = d.tsBSEEP
                    CargasEBF2.TextBox41.Text = d.tsmin
                    CargasEBF2.TextBox42.Text = d.plcontBEEP
                    CargasEBF2.TextBox43.Text = d.tcfMinBEEP
                    CargasEBF2.TextBox44.Text = d.holgBFP
                    CargasEBF2.TextBox45.Text = d.dbMaxBFP
                    CargasEBF2.TextBox46.Text = d.Lemax1
                    CargasEBF2.TextBox47.Text = d.Leh1
                    CargasEBF2.TextBox48.Text = d.Lev1
                    CargasEBF2.TextBox49.Text = d.Lc1
                    CargasEBF2.TextBox50.Text = d.gramilBFP
                    CargasEBF2.TextBox51.Text = d.gmin
                    CargasEBF2.TextBox52.Text = d.g_workgage
                    CargasEBF2.TextBox53.Text = d.tpBFP
                    CargasEBF2.TextBox54.Text = d.bfp
                    CargasEBF2.TextBox55.Text = d.Lemax2
                    CargasEBF2.TextBox56.Text = d.Leh2

                    'Longitud de los enlaces

                    TextBox290.Text = d.FyPLSimpleBFP
                    TextBox292.Text = d.RyPLSimpleBFP

                    CargasEBF2.ShowDialog()

                    'Dimensiones del marco

                    TextBox303.Text = d.LBMVC
                    TextBox304.Text = d.SHVC

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    '   Datos de diseño de la conexión SCBF1
                    '   Soldadura, ancho y espesor
                    TextBox215N.Text = d.SweldVC
                    TextBox215N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox216N.Text = d.LwbrVC
                    TextBox216N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox217N.Text = d.gAwtmrVC
                    TextBox217N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox218N.Text = d.tVC
                    TextBox218N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Gometría de la placa gusset
                    TextBox204.Text = d.PhiGussetVC
                    TextBox204_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   phi'
                    TextBox207.Text = d.holeacces_a
                    TextBox207_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   2t
                    TextBox219.Text = d.dostGussetVC
                    TextBox219_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   L
                    TextBox205.Text = d.LGussetVC
                    TextBox205_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LA
                    TextBox206.Text = d.LAGussetVC
                    TextBox206_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LB
                    TextBox337.Text = d.LBGussetVC
                    TextBox337_KeyPress(AbrirToolStripMenuItem1, Nothing)

                    '   Pernos

                    ComboBox19.Text = d.bPSVC
                    TextBox287.Text = d.tPSVC
                    TextBox287_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    ComboBox15.Text = d.BTipoVC
                    ComboBox16.Text = d.BDiamVC
                    TextBox265.Text = d.GPSqnt
                    TextBox265_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox288.Text = d.GPSspc
                    TextBox288_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox289.Text = d.BPSqnt
                    TextBox289_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox278.Text = d.BPSspc
                    TextBox278_KeyPress(AbrirToolStripMenuItem1, Nothing)

                    '   Soldadura

                    TextBox279.Text = d.DGBSVC
                    TextBox279_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox282.Text = d.DGCSVC
                    TextBox282_KeyPress(AbrirToolStripMenuItem1, Nothing)

                ElseIf Tipo = 13 Then

                    Button13N_Click_1(AbrirToolStripMenuItem1, Nothing)

                    'Secciones

                    TextBox297.Text = d.BR1VC
                    TextBox295.Text = d.BMVC
                    TextBox296.Text = d.CLVC
                    TextBox294.Text = d.BR2VC

                    'Aceros

                    TextBox298.Text = d.StBR1VC
                    TextBox299.Text = d.StBr2VC
                    TextBox300.Text = d.StBMVC
                    TextBox302.Text = d.StCLVC
                    TextBox301.Text = d.StPLVC

                    'Formulario SeccBR

                    Perfiles.ShowDialog()

                    'Formulario BRAcero

                    Steel.ShowDialog()

                    'Formulario de CargasEBF2
                    '   Recicla los datos de las conexiones SMF
                    CargasEBF2.TextBox1.Text = d.MatPlaca
                    CargasEBF2.TextBox2.Text = d.espesor_plCont
                    CargasEBF2.TextBox3.Text = d.recorte1_plCont
                    CargasEBF2.TextBox4.Text = d.contacto1_plCont
                    CargasEBF2.TextBox5.Text = d.recorte2_plCont
                    CargasEBF2.TextBox6.Text = d.contacto2_plCont
                    CargasEBF2.TextBox7.Text = d.soldplCont
                    CargasEBF2.TextBox8.Text = d.Rsold_plCont
                    CargasEBF2.TextBox9.Text = d.Dsold_plCont
                    CargasEBF2.TextBox10.Text = d.As_plCont
                    CargasEBF2.TextBox11.Text = d.AsminplCont
                    CargasEBF2.TextBox12.Text = d.sold2plCont
                    CargasEBF2.TextBox13.Text = d.sold_capPlate
                    CargasEBF2.TextBox14.Text = d.tRefNodal
                    CargasEBF2.TextBox15.Text = d.plNodal_dist
                    CargasEBF2.TextBox16.Text = d.bisel_plNodal
                    CargasEBF2.TextBox17.Text = d.soldFilete_plNodal
                    CargasEBF2.TextBox18.Text = d.tmin_plNodalSobresale
                    CargasEBF2.TextBox19.Text = d.dim_a
                    CargasEBF2.TextBox20.Text = d.ainf
                    CargasEBF2.TextBox21.Text = d.asup
                    CargasEBF2.TextBox22.Text = d.dim_b
                    CargasEBF2.TextBox23.Text = d.cinf
                    CargasEBF2.TextBox24.Text = d.csup
                    CargasEBF2.TextBox25.Text = d.tplRBS
                    CargasEBF2.TextBox26.Text = d.diamReq
                    CargasEBF2.TextBox27.Text = d.gramilBEEP
                    CargasEBF2.TextBox28.Text = d.bpBEEP
                    CargasEBF2.TextBox29.Text = d.pfoBEEP
                    CargasEBF2.TextBox30.Text = d.pfiBEEP
                    CargasEBF2.TextBox31.Text = d.deBEEP
                    CargasEBF2.TextBox32.Text = d.pbBEEP
                    CargasEBF2.TextBox33.Text = d.treqBEEP
                    CargasEBF2.TextBox34.Text = d.tpBEEP
                    CargasEBF2.TextBox35.Text = d.Lst
                    CargasEBF2.TextBox36.Text = d.hst
                    CargasEBF2.TextBox37.Text = d.Lst_grafica
                    CargasEBF2.TextBox38.Text = d.hst_grafica
                    CargasEBF2.TextBox39.Text = d.FysBEEP
                    CargasEBF2.TextBox40.Text = d.tsBSEEP
                    CargasEBF2.TextBox41.Text = d.tsmin
                    CargasEBF2.TextBox42.Text = d.plcontBEEP
                    CargasEBF2.TextBox43.Text = d.tcfMinBEEP
                    CargasEBF2.TextBox44.Text = d.holgBFP
                    CargasEBF2.TextBox45.Text = d.dbMaxBFP
                    CargasEBF2.TextBox46.Text = d.Lemax1
                    CargasEBF2.TextBox47.Text = d.Leh1
                    CargasEBF2.TextBox48.Text = d.Lev1
                    CargasEBF2.TextBox49.Text = d.Lc1
                    CargasEBF2.TextBox50.Text = d.gramilBFP
                    CargasEBF2.TextBox51.Text = d.gmin
                    CargasEBF2.TextBox52.Text = d.g_workgage
                    CargasEBF2.TextBox53.Text = d.tpBFP
                    CargasEBF2.TextBox54.Text = d.bfp
                    CargasEBF2.TextBox55.Text = d.Lemax2
                    CargasEBF2.TextBox56.Text = d.Leh2

                    'Longitud de los enlaces

                    TextBox290.Text = d.FyPLSimpleBFP
                    TextBox292.Text = d.RyPLSimpleBFP

                    CargasEBF2.ShowDialog()

                    'Dimensiones del marco

                    TextBox303.Text = d.LBMVC
                    TextBox304.Text = d.SHVC

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    '   Datos de diseño de la conexión SCBF1
                    '   Soldadura, ancho y espesor
                    TextBox215N.Text = d.SweldVC
                    TextBox215N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox216N.Text = d.LwbrVC
                    TextBox216N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox217N.Text = d.gAwtmrVC
                    TextBox217N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox218N.Text = d.tVC
                    TextBox218N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Gometría de la placa gusset
                    TextBox204.Text = d.PhiGussetVC
                    TextBox204_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   phi'
                    TextBox207.Text = d.holeacces_a
                    TextBox207_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   2t
                    TextBox219.Text = d.dostGussetVC
                    TextBox219_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   L
                    TextBox205.Text = d.LGussetVC
                    TextBox205_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LA
                    TextBox206.Text = d.LAGussetVC
                    TextBox206_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LB
                    TextBox337.Text = d.LBGussetVC
                    TextBox337_KeyPress(AbrirToolStripMenuItem1, Nothing)

                    '   Tamaños de soldadura
                    TextBox221.Text = d.DBCVC
                    TextBox221_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox222.Text = d.DGBSVC
                    TextBox222_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox223.Text = d.DGCSVC
                    TextBox223_KeyPress(AbrirToolStripMenuItem1, Nothing)

                ElseIf Tipo = 14 Then

                    Button14N_Click_1(AbrirToolStripMenuItem1, Nothing)

                    'Secciones

                    TextBox306.Text = d.BR1VC
                    TextBox305.Text = d.BMVC

                    'Aceros

                    TextBox308.Text = d.StBR1VC
                    TextBox309.Text = d.StBMVC
                    TextBox307.Text = d.StPLVC

                    'Formulario SeccBR2

                    Perfiles2.ShowDialog()

                    'Formulario BRAcero

                    Steel2.ShowDialog()

                    'Formulario de CargasEBF2
                    '   Recicla los datos de las conexiones SMF
                    CargasEBF2.TextBox1.Text = d.MatPlaca
                    CargasEBF2.TextBox2.Text = d.espesor_plCont
                    CargasEBF2.TextBox3.Text = d.recorte1_plCont
                    CargasEBF2.TextBox4.Text = d.contacto1_plCont
                    CargasEBF2.TextBox5.Text = d.recorte2_plCont
                    CargasEBF2.TextBox6.Text = d.contacto2_plCont
                    CargasEBF2.TextBox7.Text = d.soldplCont
                    CargasEBF2.TextBox8.Text = d.Rsold_plCont
                    CargasEBF2.TextBox9.Text = d.Dsold_plCont
                    CargasEBF2.TextBox10.Text = d.As_plCont
                    CargasEBF2.TextBox11.Text = d.AsminplCont
                    CargasEBF2.TextBox12.Text = d.sold2plCont
                    CargasEBF2.TextBox13.Text = d.sold_capPlate
                    CargasEBF2.TextBox14.Text = d.tRefNodal
                    CargasEBF2.TextBox15.Text = d.plNodal_dist
                    CargasEBF2.TextBox16.Text = d.bisel_plNodal
                    CargasEBF2.TextBox17.Text = d.soldFilete_plNodal
                    CargasEBF2.TextBox18.Text = d.tmin_plNodalSobresale
                    CargasEBF2.TextBox19.Text = d.dim_a
                    CargasEBF2.TextBox20.Text = d.ainf
                    CargasEBF2.TextBox21.Text = d.asup
                    CargasEBF2.TextBox22.Text = d.dim_b
                    CargasEBF2.TextBox23.Text = d.cinf
                    CargasEBF2.TextBox24.Text = d.csup
                    CargasEBF2.TextBox25.Text = d.tplRBS
                    CargasEBF2.TextBox26.Text = d.diamReq
                    CargasEBF2.TextBox27.Text = d.gramilBEEP
                    CargasEBF2.TextBox28.Text = d.bpBEEP
                    CargasEBF2.TextBox29.Text = d.pfoBEEP
                    CargasEBF2.TextBox30.Text = d.pfiBEEP
                    CargasEBF2.TextBox31.Text = d.deBEEP
                    CargasEBF2.TextBox32.Text = d.pbBEEP
                    CargasEBF2.TextBox33.Text = d.treqBEEP
                    CargasEBF2.TextBox34.Text = d.tpBEEP
                    CargasEBF2.TextBox35.Text = d.Lst
                    CargasEBF2.TextBox36.Text = d.hst
                    CargasEBF2.TextBox37.Text = d.Lst_grafica
                    CargasEBF2.TextBox38.Text = d.hst_grafica
                    CargasEBF2.TextBox39.Text = d.FysBEEP
                    CargasEBF2.TextBox40.Text = d.tsBSEEP
                    CargasEBF2.TextBox41.Text = d.tsmin
                    CargasEBF2.TextBox42.Text = d.plcontBEEP
                    CargasEBF2.TextBox43.Text = d.tcfMinBEEP
                    CargasEBF2.TextBox44.Text = d.holgBFP
                    CargasEBF2.TextBox45.Text = d.dbMaxBFP
                    CargasEBF2.TextBox46.Text = d.Lemax1
                    CargasEBF2.TextBox47.Text = d.Leh1
                    CargasEBF2.TextBox48.Text = d.Lev1
                    CargasEBF2.TextBox49.Text = d.Lc1
                    CargasEBF2.TextBox50.Text = d.gramilBFP
                    CargasEBF2.TextBox51.Text = d.gmin
                    CargasEBF2.TextBox52.Text = d.g_workgage
                    CargasEBF2.TextBox53.Text = d.tpBFP
                    CargasEBF2.TextBox54.Text = d.bfp
                    CargasEBF2.TextBox55.Text = d.Lemax2
                    CargasEBF2.TextBox56.Text = d.Leh2

                    'Longitud del enlace

                    TextBox290.Text = d.FyPLSimpleBFP

                    CargasEBF2.ShowDialog()

                    'Dimensiones del marco

                    TextBox303.Text = d.LBMVC
                    TextBox304.Text = d.SHVC

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    'Datos de diseño de la conexión tipo = 14
                    '   Conexión arriostre-placa gusset
                    TextBox320.Text = d.SweldVC
                    TextBox320_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox318.Text = d.LwbrVC
                    TextBox318_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox315.Text = d.tVC
                    TextBox315_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Gometría de la placa gusset
                    TextBox331.Text = d.PhiGussetVC
                    TextBox331_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox333.Text = d.LAGussetVC
                    TextBox333_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Soldadura
                    TextBox335.Text = d.DGBIVC
                    TextBox335_KeyPress(AbrirToolStripMenuItem1, Nothing)

                ElseIf Tipo = 15 Then

                    Button19_Click(AbrirToolStripMenuItem1, Nothing)

                    'Secciones

                    TextBox297.Text = d.BR1VC
                    TextBox295.Text = d.BMVC
                    TextBox296.Text = d.CLVC
                    TextBox294.Text = d.BR2VC

                    'Aceros

                    TextBox298.Text = d.StBR1VC
                    TextBox299.Text = d.StBr2VC
                    TextBox300.Text = d.StBMVC
                    TextBox302.Text = d.StCLVC
                    TextBox301.Text = d.StPLVC

                    'Formulario Perfiles

                    Perfiles.ShowDialog()

                    'Formulario BRAcero

                    Steel.ShowDialog()

                    'Formulario de CargasEBF2
                    '   Recicla los datos de las conexiones SMF
                    CargasEBF2.TextBox1.Text = d.MatPlaca
                    CargasEBF2.TextBox2.Text = d.espesor_plCont
                    CargasEBF2.TextBox3.Text = d.recorte1_plCont
                    CargasEBF2.TextBox4.Text = d.contacto1_plCont
                    CargasEBF2.TextBox5.Text = d.recorte2_plCont
                    CargasEBF2.TextBox6.Text = d.contacto2_plCont
                    CargasEBF2.TextBox7.Text = d.soldplCont
                    CargasEBF2.TextBox8.Text = d.Rsold_plCont
                    CargasEBF2.TextBox9.Text = d.Dsold_plCont
                    CargasEBF2.TextBox10.Text = d.As_plCont
                    CargasEBF2.TextBox11.Text = d.AsminplCont
                    CargasEBF2.TextBox12.Text = d.sold2plCont
                    CargasEBF2.TextBox13.Text = d.sold_capPlate
                    CargasEBF2.TextBox14.Text = d.tRefNodal
                    CargasEBF2.TextBox15.Text = d.plNodal_dist
                    CargasEBF2.TextBox16.Text = d.bisel_plNodal
                    CargasEBF2.TextBox17.Text = d.soldFilete_plNodal
                    CargasEBF2.TextBox18.Text = d.tmin_plNodalSobresale
                    CargasEBF2.TextBox19.Text = d.dim_a
                    CargasEBF2.TextBox20.Text = d.ainf
                    CargasEBF2.TextBox21.Text = d.asup
                    CargasEBF2.TextBox22.Text = d.dim_b
                    CargasEBF2.TextBox23.Text = d.cinf
                    CargasEBF2.TextBox24.Text = d.csup
                    CargasEBF2.TextBox25.Text = d.tplRBS
                    CargasEBF2.TextBox26.Text = d.diamReq
                    CargasEBF2.TextBox27.Text = d.gramilBEEP
                    CargasEBF2.TextBox28.Text = d.bpBEEP
                    CargasEBF2.TextBox29.Text = d.pfoBEEP
                    CargasEBF2.TextBox30.Text = d.pfiBEEP
                    CargasEBF2.TextBox31.Text = d.deBEEP
                    CargasEBF2.TextBox32.Text = d.pbBEEP
                    CargasEBF2.TextBox33.Text = d.treqBEEP
                    CargasEBF2.TextBox34.Text = d.tpBEEP
                    CargasEBF2.TextBox35.Text = d.Lst
                    CargasEBF2.TextBox36.Text = d.hst
                    CargasEBF2.TextBox37.Text = d.Lst_grafica
                    CargasEBF2.TextBox38.Text = d.hst_grafica
                    CargasEBF2.TextBox39.Text = d.FysBEEP
                    CargasEBF2.TextBox40.Text = d.tsBSEEP
                    CargasEBF2.TextBox41.Text = d.tsmin
                    CargasEBF2.TextBox42.Text = d.plcontBEEP
                    CargasEBF2.TextBox43.Text = d.tcfMinBEEP
                    CargasEBF2.TextBox44.Text = d.holgBFP
                    CargasEBF2.TextBox45.Text = d.dbMaxBFP
                    CargasEBF2.TextBox46.Text = d.Lemax1
                    CargasEBF2.TextBox47.Text = d.Leh1
                    CargasEBF2.TextBox48.Text = d.Lev1
                    CargasEBF2.TextBox49.Text = d.Lc1
                    CargasEBF2.TextBox50.Text = d.gramilBFP
                    CargasEBF2.TextBox51.Text = d.gmin
                    CargasEBF2.TextBox52.Text = d.g_workgage
                    CargasEBF2.TextBox53.Text = d.tpBFP
                    CargasEBF2.TextBox54.Text = d.bfp
                    CargasEBF2.TextBox55.Text = d.Lemax2
                    CargasEBF2.TextBox56.Text = d.Leh2

                    'Longitud del enlace

                    TextBox290.Text = d.FyPLSimpleBFP

                    CargasEBF2.ShowDialog()

                    'Dimensiones del marco

                    TextBox303.Text = d.LBMVC
                    TextBox304.Text = d.SHVC

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    '   Datos de diseño de la conexión SCBF1
                    '   Soldadura, ancho y espesor
                    TextBox215N.Text = d.SweldVC
                    TextBox215N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox216N.Text = d.LwbrVC
                    TextBox216N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox217N.Text = d.gAwtmrVC
                    TextBox217N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox218N.Text = d.tVC
                    TextBox218N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Gometría de la placa gusset
                    '   Phi
                    TextBox204.Text = d.PhiGussetVC
                    TextBox204_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   phi'
                    TextBox207.Text = d.holeacces_a
                    TextBox207_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   2t
                    TextBox219.Text = d.dostGussetVC
                    TextBox219_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   L
                    TextBox205.Text = d.LGussetVC
                    TextBox205_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LA
                    TextBox206.Text = d.LAGussetVC
                    TextBox206_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LB
                    TextBox337.Text = d.LBGussetVC
                    TextBox337_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Tamaños de soldadura
                    ComboBox19.Text = d.bPSVC
                    TextBox287.Text = d.tPSVC
                    TextBox287_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    ComboBox15.Text = d.BTipoVC
                    ComboBox16.Text = d.BDiamVC
                    TextBox265.Text = d.GPSqnt
                    TextBox265_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox288.Text = d.GPSspc
                    TextBox288_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox289.Text = d.BPSqnt
                    TextBox289_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox278.Text = d.BPSspc
                    TextBox278_KeyPress(AbrirToolStripMenuItem1, Nothing)

                    '   Soldadura

                    TextBox279.Text = d.DGBIVC
                    TextBox279_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox282.Text = d.DGCIVC
                    TextBox282_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    

                ElseIf Tipo = 16 Then

                    Button20_Click(AbrirToolStripMenuItem1, Nothing)

                    'Secciones

                    TextBox297.Text = d.BR1VC
                    TextBox295.Text = d.BMVC
                    TextBox296.Text = d.CLVC
                    TextBox294.Text = d.BR2VC

                    'Aceros

                    TextBox298.Text = d.StBR1VC
                    TextBox299.Text = d.StBr2VC
                    TextBox300.Text = d.StBMVC
                    TextBox302.Text = d.StCLVC
                    TextBox301.Text = d.StPLVC

                    'Formulario Perfiles

                    Perfiles.ShowDialog()

                    'Formulario BRAcero

                    Steel.ShowDialog()

                    'Formulario de CargasEBF2
                    '   Recicla los datos de las conexiones SMF
                    CargasEBF2.TextBox1.Text = d.MatPlaca
                    CargasEBF2.TextBox2.Text = d.espesor_plCont
                    CargasEBF2.TextBox3.Text = d.recorte1_plCont
                    CargasEBF2.TextBox4.Text = d.contacto1_plCont
                    CargasEBF2.TextBox5.Text = d.recorte2_plCont
                    CargasEBF2.TextBox6.Text = d.contacto2_plCont
                    CargasEBF2.TextBox7.Text = d.soldplCont
                    CargasEBF2.TextBox8.Text = d.Rsold_plCont
                    CargasEBF2.TextBox9.Text = d.Dsold_plCont
                    CargasEBF2.TextBox10.Text = d.As_plCont
                    CargasEBF2.TextBox11.Text = d.AsminplCont
                    CargasEBF2.TextBox12.Text = d.sold2plCont
                    CargasEBF2.TextBox13.Text = d.sold_capPlate
                    CargasEBF2.TextBox14.Text = d.tRefNodal
                    CargasEBF2.TextBox15.Text = d.plNodal_dist
                    CargasEBF2.TextBox16.Text = d.bisel_plNodal
                    CargasEBF2.TextBox17.Text = d.soldFilete_plNodal
                    CargasEBF2.TextBox18.Text = d.tmin_plNodalSobresale
                    CargasEBF2.TextBox19.Text = d.dim_a
                    CargasEBF2.TextBox20.Text = d.ainf
                    CargasEBF2.TextBox21.Text = d.asup
                    CargasEBF2.TextBox22.Text = d.dim_b
                    CargasEBF2.TextBox23.Text = d.cinf
                    CargasEBF2.TextBox24.Text = d.csup
                    CargasEBF2.TextBox25.Text = d.tplRBS
                    CargasEBF2.TextBox26.Text = d.diamReq
                    CargasEBF2.TextBox27.Text = d.gramilBEEP
                    CargasEBF2.TextBox28.Text = d.bpBEEP
                    CargasEBF2.TextBox29.Text = d.pfoBEEP
                    CargasEBF2.TextBox30.Text = d.pfiBEEP
                    CargasEBF2.TextBox31.Text = d.deBEEP
                    CargasEBF2.TextBox32.Text = d.pbBEEP
                    CargasEBF2.TextBox33.Text = d.treqBEEP
                    CargasEBF2.TextBox34.Text = d.tpBEEP
                    CargasEBF2.TextBox35.Text = d.Lst
                    CargasEBF2.TextBox36.Text = d.hst
                    CargasEBF2.TextBox37.Text = d.Lst_grafica
                    CargasEBF2.TextBox38.Text = d.hst_grafica
                    CargasEBF2.TextBox39.Text = d.FysBEEP
                    CargasEBF2.TextBox40.Text = d.tsBSEEP
                    CargasEBF2.TextBox41.Text = d.tsmin
                    CargasEBF2.TextBox42.Text = d.plcontBEEP
                    CargasEBF2.TextBox43.Text = d.tcfMinBEEP
                    CargasEBF2.TextBox44.Text = d.holgBFP
                    CargasEBF2.TextBox45.Text = d.dbMaxBFP
                    CargasEBF2.TextBox46.Text = d.Lemax1
                    CargasEBF2.TextBox47.Text = d.Leh1
                    CargasEBF2.TextBox48.Text = d.Lev1
                    CargasEBF2.TextBox49.Text = d.Lc1
                    CargasEBF2.TextBox50.Text = d.gramilBFP
                    CargasEBF2.TextBox51.Text = d.gmin
                    CargasEBF2.TextBox52.Text = d.g_workgage
                    CargasEBF2.TextBox53.Text = d.tpBFP
                    CargasEBF2.TextBox54.Text = d.bfp
                    CargasEBF2.TextBox55.Text = d.Lemax2
                    CargasEBF2.TextBox56.Text = d.Leh2

                    'Longitud del enlace

                    TextBox290.Text = d.FyPLSimpleBFP

                    CargasEBF2.ShowDialog()

                    'Dimensiones del marco

                    TextBox303.Text = d.LBMVC
                    TextBox304.Text = d.SHVC

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    '   Datos de diseño de la conexión SCBF1
                    '   Soldadura, ancho y espesor
                    TextBox215N.Text = d.SweldVC
                    TextBox215N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox216N.Text = d.LwbrVC
                    TextBox216N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox217N.Text = d.gAwtmrVC
                    TextBox217N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox218N.Text = d.tVC
                    TextBox218N_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Gometría de la placa gusset
                    TextBox204.Text = d.PhiGussetVC
                    TextBox204_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   phi'
                    TextBox207.Text = d.holeacces_a
                    TextBox207_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   2t
                    TextBox219.Text = d.dostGussetVC
                    TextBox219_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   L
                    TextBox205.Text = d.LGussetVC
                    TextBox205_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LA
                    TextBox206.Text = d.LAGussetVC
                    TextBox206_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   LB
                    TextBox337.Text = d.LBGussetVC
                    TextBox337_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Tamaños de soldadura
                    TextBox221.Text = d.DBCVC
                    TextBox221_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox222.Text = d.DGBIVC
                    TextBox222_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox223.Text = d.DGCIVC
                    TextBox223_KeyPress(AbrirToolStripMenuItem1, Nothing)

                End If

            ElseIf Sistema = "BRBF" Then

                Button15_Click(AbrirToolStripMenuItem1, Nothing)
                OpcionesDiseño.LthetaBr = d.LthetaCalc
                OpcionesDiseño.MomInd = d.momindCalc
                OpcionesDiseño.CompConsid = d.CompFrm
                OpenMode = True

                If Tipo = 17 Then

                    Button17_Click(AbrirToolStripMenuItem1, Nothing)

                    Calculate = d.Calc
                    Tipo = d.Tipo_de_Conexion
                    Sistema = d.Sistema

                    'Miembros a conectar

                    TextBox317.Text = d.BMVC
                    TextBox319.Text = d.CLVC
                    '   BRBF's
                    '       Beta1
                    PerfilesBRBF.TextBox1.Text = d.dim_b
                    '       Omega1
                    PerfilesBRBF.TextBox2.Text = d.cinf
                    '       Asc1
                    PerfilesBRBF.TextBox3.Text = d.csup
                    '       Beta2
                    PerfilesBRBF.TextBox10.Text = d.AsminplCont
                    '       Omega2
                    PerfilesBRBF.TextBox9.Text = d.sold2plCont
                    '       Asc1
                    PerfilesBRBF.TextBox8.Text = d.sold_capPlate

                    PerfilesBRBF.ShowDialog()

                    'Acero de los miembros a conectar

                    TextBox291.Text = d.StPLVC
                    TextBox312.Text = d.StBMVC
                    TextBox311.Text = d.StCLVC
                    'BRBF's
                    '   Fysc1
                    SteelBRBF.TextBox1.Text = d.MatPlaca
                    '   Ry1
                    SteelBRBF.TextBox2.Text = d.espesor_plCont
                    '   Fysc2
                    SteelBRBF.TextBox3.Text = d.recorte1_plCont
                    '   Ry2
                    SteelBRBF.TextBox4.Text = d.contacto1_plCont

                    SteelBRBF.ShowDialog()

                    'Cargas de la viga
                    TextBox326.Text = d.CMBMVC
                    TextBox325.Text = d.CLBMVC

                    'Longitud e inclinación de los arriostres
                    '   Long. Arr. Superior
                    TextBox328.Text = d.BR1VC
                    '   Inclinación arr. superior
                    TextBox327.Text = d.SHVC
                    '   Long. Arr. inferior
                    TextBox314.Text = d.BR2VC
                    '   Incl. Arr. Inferior
                    TextBox313.Text = d.SH2VC

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    'DATOS DE DISEÑO
                    '   GEOMETRÍA DE LA PLACA
                    '   Recicla datos de las SMF
                    '       Lug
                    TextBox224.Text = d.Claro
                    TextBox228.Text = d.SeccCol
                    TextBox226.Text = d.contacto2_plCont
                    TextBox227.Text = d.CV
                    TextBox225.Text = d.CM
                    '       Pernos
                    TextBox229.Text = d.GPSqnt
                    ComboBox17.Text = d.BDiamVC
                    '       Espesor
                    TextBox244.Text = d.diamReq
                    TextBox244_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '       Placa
                    TextBox243.Text = d.gramilBEEP
                    TextBox243_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox242.Text = d.bpBEEP
                    TextBox242_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox241.Text = d.pfoBEEP
                    TextBox241_KeyPress(AbrirToolStripMenuItem1, Nothing)

                    'SOLDADURA
                    TextBox405.Text = d.DBCVC
                    TextBox405_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox404.Text = d.DGBSVC
                    TextBox404_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox402.Text = d.DGCSVC
                    TextBox402_KeyPress(AbrirToolStripMenuItem1, Nothing)

                ElseIf Tipo = 18 Then

                    Button18_Click(AbrirToolStripMenuItem1, Nothing)

                    Calculate = d.Calc
                    Tipo = d.Tipo_de_Conexion
                    Sistema = d.Sistema

                    'Miembros a conectar

                    TextBox317.Text = d.BMVC
                    TextBox319.Text = d.CLVC
                    '   BRBF's
                    '       Beta1
                    PerfilesBRBF.TextBox1.Text = d.dim_b
                    '       Omega1
                    PerfilesBRBF.TextBox2.Text = d.cinf
                    '       Asc1
                    PerfilesBRBF.TextBox3.Text = d.csup
                    '       Beta2
                    PerfilesBRBF.TextBox10.Text = d.AsminplCont
                    '       Omega2
                    PerfilesBRBF.TextBox9.Text = d.sold2plCont
                    '       Asc1
                    PerfilesBRBF.TextBox8.Text = d.sold_capPlate

                    PerfilesBRBF.ShowDialog()

                    'Acero de los miembros a conectar

                    TextBox291.Text = d.StPLVC
                    TextBox312.Text = d.StBMVC
                    TextBox311.Text = d.StCLVC
                    'BRBF's
                    '   Fysc1
                    SteelBRBF.TextBox1.Text = d.MatPlaca
                    '   Ry1
                    SteelBRBF.TextBox2.Text = d.espesor_plCont
                    '   Fysc2
                    SteelBRBF.TextBox3.Text = d.recorte1_plCont
                    '   Ry2
                    SteelBRBF.TextBox4.Text = d.contacto1_plCont

                    SteelBRBF.ShowDialog()

                    'Cargas de la viga
                    TextBox326.Text = d.CMBMVC
                    TextBox325.Text = d.CLBMVC

                    'Longitud e inclinación de los arriostres
                    '   Long. Arr. Superior
                    TextBox328.Text = d.BR1VC
                    '   Inclinación arr. superior
                    TextBox327.Text = d.SHVC
                    '   Long. Arr. inferior
                    TextBox314.Text = d.BR2VC
                    '   Incl. Arr. Inferior
                    TextBox313.Text = d.SH2VC

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    'DATOS DE DISEÑO
                    '   GEOMETRÍA DE LA PLACA
                    '   Recicla datos de las SMF
                    '       Lug superior
                    TextBox250.Text = d.Claro
                    TextBox246.Text = d.SeccCol
                    TextBox248.Text = d.contacto2_plCont
                    TextBox247.Text = d.CV
                    TextBox249.Text = d.CM
                    '       Pernos superiores
                    TextBox245.Text = d.tPSVC
                    ComboBox18.Text = d.diamReq
                    '       Espesor pl. Superior
                    TextBox340.Text = d.gramilBEEP
                    TextBox340_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '       Placa superior
                    TextBox343.Text = d.bpBEEP
                    TextBox343_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox342.Text = d.pfoBEEP
                    TextBox342_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox341.Text = d.pfiBEEP
                    TextBox341_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox339.Text = d.soldFilete_plNodal
                    TextBox252.Text = d.soldplCont
                    TextBox254.Text = d.Rsold_plCont
                    TextBox253.Text = d.Dsold_plCont
                    TextBox338.Text = d.As_plCont
                    TextBox251.Text = d.deBEEP
                    ComboBox20.Text = d.pbBEEP
                    TextBox389.Text = d.tpBEEP
                    TextBox392.Text = d.Lst
                    TextBox392_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox391.Text = d.hst
                    TextBox391_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox390.Text = d.Lst_grafica
                    TextBox390_KeyPress(AbrirToolStripMenuItem1, Nothing)

                    'SOLDADURA
                    TextBox405.Text = d.DBCVC
                    TextBox405_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox404.Text = d.DGBSVC
                    TextBox404_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox402.Text = d.DGCSVC
                    TextBox402_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox403.Text = d.DGBIVC
                    TextBox403_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox401.Text = d.DGCIVC
                    TextBox401_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    
                ElseIf Tipo = 19 Then

                    Button16_Click(AbrirToolStripMenuItem1, Nothing)

                    Calculate = d.Calc
                    Tipo = d.Tipo_de_Conexion
                    Sistema = d.Sistema

                    'Miembros a conectar

                    TextBox317.Text = d.BMVC
                    '   BRBF's
                    '       Beta2
                    PerfilesBRBF2.TextBox10.Text = d.AsminplCont
                    '       Omega2
                    PerfilesBRBF2.TextBox9.Text = d.sold2plCont
                    '       Asc1
                    PerfilesBRBF2.TextBox8.Text = d.sold_capPlate

                    PerfilesBRBF2.ShowDialog()

                    'Acero de los miembros a conectar

                    TextBox291.Text = d.StPLVC
                    TextBox312.Text = d.StBMVC
                    'BRBF's
                    '   Fysc2
                    SteelBRBF2.TextBox3.Text = d.recorte1_plCont
                    '   Ry2
                    SteelBRBF2.TextBox4.Text = d.contacto1_plCont

                    SteelBRBF2.ShowDialog()

                    'Cargas de la viga
                    TextBox326.Text = d.CMBMVC
                    TextBox325.Text = d.CLBMVC

                    'Longitud e inclinación de los arriostres
                    '   Long. Arr. inferior
                    TextBox328.Text = d.BR1VC
                    '   Inclinación arr. inferior
                    TextBox327.Text = d.SHVC

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    'DATOS DE DISEÑO
                    '   GEOMETRÍA DE LA PLACA
                    '   Recicla datos de las SMF
                    '       Lug
                    TextBox224.Text = d.Claro
                    TextBox228.Text = d.SeccCol
                    TextBox226.Text = d.contacto2_plCont
                    TextBox227.Text = d.CV
                    TextBox225.Text = d.CM
                    '       Pernos
                    TextBox229.Text = d.GPSqnt
                    ComboBox17.Text = d.BDiamVC
                    '       Espesor
                    TextBox244.Text = d.diamReq
                    TextBox244_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '       Placa
                    TextBox243.Text = d.gramilBEEP
                    TextBox243_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox242.Text = d.bpBEEP
                    TextBox242_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox241.Text = d.pfoBEEP
                    TextBox241_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '       Soldadura
                    TextBox408.Text = d.DGBIVC
                    
                ElseIf Tipo = 20 Then
                    Button27_Click(AbrirToolStripMenuItem1, Nothing)

                    Calculate = d.Calc
                    Tipo = d.Tipo_de_Conexion
                    Sistema = d.Sistema

                    'Miembros a conectar

                    TextBox317.Text = d.BMVC
                    '   BRBF's
                    '       Beta1
                    PerfilesBRBF2.TextBox1.Text = d.dim_b
                    '       Omega1
                    PerfilesBRBF2.TextBox2.Text = d.cinf
                    '       Asc1
                    PerfilesBRBF2.TextBox3.Text = d.csup
                    '       Beta2
                    PerfilesBRBF2.TextBox10.Text = d.AsminplCont
                    '       Omega2
                    PerfilesBRBF2.TextBox9.Text = d.sold2plCont
                    '       Asc1
                    PerfilesBRBF2.TextBox8.Text = d.sold_capPlate


                    PerfilesBRBF2.ShowDialog()

                    'Acero de los miembros a conectar

                    TextBox291.Text = d.StPLVC
                    TextBox312.Text = d.StBMVC
                    'BRBF's
                    '   Fysc1
                    SteelBRBF2.TextBox1.Text = d.MatPlaca
                    '   Ry1
                    SteelBRBF2.TextBox2.Text = d.espesor_plCont
                    '   Fysc2
                    SteelBRBF2.TextBox3.Text = d.recorte1_plCont
                    '   Ry2
                    SteelBRBF2.TextBox4.Text = d.contacto1_plCont

                    SteelBRBF2.ShowDialog()

                    'Cargas de la viga
                    TextBox326.Text = d.CMBMVC
                    TextBox325.Text = d.CLBMVC

                    'Longitud e inclinación de los arriostres
                    '   Long. Arr. Superior
                    TextBox328.Text = d.BR1VC
                    '   Inclinación arr. superior
                    TextBox327.Text = d.SHVC
                    '   Long. Arr. inferior
                    TextBox314.Text = d.BR2VC
                    '   Incl. Arr. Inferior
                    TextBox313.Text = d.SH2VC

                    If Calculate = 1 Then
                        CalcularToolStripMenuItem1_Click(AbrirToolStripMenuItem1, Nothing)
                    End If

                    'DATOS DE DISEÑO
                    '   GEOMETRÍA DE LA PLACA
                    '   Recicla datos de las SMF
                    '       Lug superior
                    TextBox250.Text = d.Claro
                    TextBox246.Text = d.SeccCol
                    TextBox248.Text = d.contacto2_plCont
                    TextBox247.Text = d.CV
                    TextBox249.Text = d.CM
                    '       Pernos superiores
                    TextBox245.Text = d.tPSVC
                    ComboBox18.Text = d.diamReq
                    '       Espesor pl. Superior
                    TextBox340.Text = d.gramilBEEP
                    TextBox340_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '       L's pl. superior
                    TextBox343.Text = d.bpBEEP
                    TextBox343_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox342.Text = d.pfoBEEP
                    TextBox342_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox341.Text = d.pfiBEEP
                    TextBox341_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '   Lug inferior
                    TextBox339.Text = d.tcfMinBEEP
                    TextBox252.Text = d.soldplCont
                    TextBox254.Text = d.Rsold_plCont
                    TextBox253.Text = d.Dsold_plCont
                    TextBox338.Text = d.As_plCont
                    '   Pernos inferiores
                    TextBox251.Text = d.deBEEP
                    ComboBox20.Text = d.pbBEEP
                    '       Espesor pl. inferior
                    TextBox389.Text = d.tpBEEP
                    TextBox389_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    '       L's pl. inferior
                    TextBox392.Text = d.Lst
                    TextBox392_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox391.Text = d.hst
                    TextBox391_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox390.Text = d.Lst_grafica
                    TextBox390_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    'SOLDADURA
                    TextBox408.Text = d.DGBSVC
                    TextBox408_KeyPress(AbrirToolStripMenuItem1, Nothing)
                    TextBox409.Text = d.DGBIVC
                    TextBox409_KeyPress(AbrirToolStripMenuItem1, Nothing)

                End If

            End If

            'Long. e incl. de arriostres

            Lbr = d.Lbrcn
            Lbr2 = d.Lbrcn2
            theta = d.thetacn
            theta2 = d.thetacn2

            'Datos generales Opciones de Diseño definidas por el usuario antes de Guardar
            OpcionesDiseño.Mgconsid = d.Mom_gravedad
            OpcionesDiseño.Vcconsid = d.VC_consid
            OpcionesDiseño.VcMpcconsid = d.VCMpc_consid
            OpcionesDiseño.VcRUconsid = d.VCRu_consid
            OpcionesDiseño.BfredRBS = d.BfRBS_consid
            AlturasEntrepiso.Hsup = d.Hsup_coL
            AlturasEntrepiso.Hinf = d.Hinf_coL
            OpenAnchPl = d.FormAnchoPLcont
            AnchoPlcont.OpcSelecc = d.Opcbp_PLcont
            AnchoPlcont.TextoAnchoPl = d.anchoProp_plcont

            'pbPhoto.Image = FormFicha.BytesToImage(p.Foto)


            ' Si todo ha ido bien, guardamos en el
            ' campo la ruta del archivo abierto.
            '
            m_fileName = fileName

            If Tipo = 1 Then
                RBS_Click_1(AbrirToolStripMenuItem1, Nothing)
            ElseIf Tipo = 2 Then
                BUEEP_Click_1(AbrirToolStripMenuItem1, Nothing)
            ElseIf Tipo = 3 Then
                BSEEP_Click_1(AbrirToolStripMenuItem1, Nothing)
            ElseIf Tipo = 4 Then
                BFP_Click_1(AbrirToolStripMenuItem1, Nothing)
            ElseIf Tipo = 5 Then
                WUF_Click_1(AbrirToolStripMenuItem1, Nothing)
            ElseIf Tipo = 6 Then
                Button6N1_Click(AbrirToolStripMenuItem1, Nothing)
            ElseIf Tipo = 7 Then
                Button7N1_Click(AbrirToolStripMenuItem1, Nothing)
            ElseIf Tipo = 8 Then
                Button23N_Click(AbrirToolStripMenuItem1, Nothing)
            ElseIf Tipo = 9 Then
                Button24N_Click(AbrirToolStripMenuItem1, Nothing)
            ElseIf Tipo = 10 Then
                Button26N_Click(AbrirToolStripMenuItem1, Nothing)
            ElseIf Tipo = 11 Then
                Button27N_Click(AbrirToolStripMenuItem1, Nothing)
            End If

            Me.Text = "ADCAS" + " -" + m_fileName

            If Calculate = 1 Then
                TabControl1N.Visible = False
                TabControlJ1.Visible = False
                TabControl1.Visible = False
                TabControl2.Visible = False
                TabControl3.Visible = False
                TabControl4.Visible = False

                If Sistema = "SMF" Then

                    Precalificacion()
                    CorrerDiseño()
                    TabControlJ1.Visible = True
                    'LIMPIAR LOS TABPAGES DE PLACAS DE CONTINUIDAD Y ZONA DE PANEL NODAL
                    'TapPage3 (Placas de Continuidad)
                    GroupBox15.Visible = False
                    GroupBox19.Visible = False
                    GroupBox36.Visible = False
                    'TabPage4 (Panel Nodal)
                    GroupBox21.Visible = False
                    GroupBox22.Visible = False
                    GroupBox25.Visible = False

                ElseIf Sistema = "SCBF" Then

                    OpenMode = False

                    If Tipo = 8 Then
                        TabControl1.Visible = True
                    ElseIf Tipo = 9 Then
                        TabControl2.Visible = True
                    Else
                        TabControl1N.Visible = True
                    End If
                    
                ElseIf Sistema = "EBF" Then
                    OpenMode = False
                    If Tipo = 14 Then
                        TabControl3.Visible = True
                    ElseIf Tipo = 12 Or Tipo = 13 Or Tipo = 15 Or Tipo = 16 Then
                        TabControl1N.Visible = True
                    End If
                ElseIf Sistema = "BRBF" Then
                    If Calculate = 1 Then
                        TabControl4.Visible = True
                    End If
                    OpenMode = False
                End If

            Else

                OpenMode = False
                TabControlJ1.Visible = False
                TabControl1.Visible = False
                TabControl1N.Visible = False
                TabControl2.Visible = False
                TabControl3.Visible = False
                TabControl4.Visible = False

            End If

            Button1.Visible = True
            Button2.Visible = True
            Button3.Visible = True
            Button15.Visible = True

            GuardarComoToolStripMenuItem1.Enabled = True
            GuardarToolStripMenuItem1.Enabled = True
            CalcularToolStripMenuItem1.Enabled = True


        Catch ex As Exception
            ' Se ha producido un error.
            MessageBox.Show(ex.Message)

        End Try

    End Sub

    Private Sub Save(fileName As String)

        ' Validamos los datos obteniendo si procede
        ' un objeto Persona.
        '
        Dim D As Datos = GetData()
        If (D Is Nothing) Then Return

        If (fileName = String.Empty) Then

            ' Si el valor del campo es una cadena de longitud
            ' cero, seleccionamos el archivo para guardar.
            '
            Using sfd As New SaveFileDialog()
                sfd.Filter = ".CAS|*.dat|Todos los archivos|*.*"
                Dim dr As DialogResult = sfd.ShowDialog(Me)
                If (dr <> DialogResult.OK) Then Return
                fileName = sfd.FileName
            End Using

        End If

        Try
            ' Procedemos a serializar la clase.
            '
            Datos.Save(D, fileName)

            ' Si todo ha ido bien, modificamos en el
            ' campo la ruta del archivo guardado.
            '
            m_fileName = fileName
            Me.Text = "ADCAS" + " -" + m_fileName
        Catch ex As Exception
            ' Se ha producido un error.
            MessageBox.Show(ex.Message)

        End Try

    End Sub

    Private Sub TextBoxOnTextChanged(sender As Object, e As EventArgs)

        ' Referenciamos el control que ha desencadenado el evento.
        '
        Dim tb As TextBox = DirectCast(sender, TextBox)
        errorProvider1.SetError(tb, String.Empty)

    End Sub
#End Region

    'BOTON CALCULAR

    Private Sub CalcularToolStripMenuItem1_Click(sender As Object, e As EventArgs) Handles CalcularToolStripMenuItem1.Click
        If Sistema = "SMF" Then

            If TextBox1.Text = "" Or TextBox8.Text = "" Then
                If TextBox1.Text = "" Then
                    MsgBox("Falta elegir secciones para la viga y la columna. Por favor elija para poder continuar con los cálculos de diseño.", MsgBoxStyle.Critical, "Dato faltante")
                End If
                If TextBox8.Text = "" Then
                    MsgBox("Falta elegir el material de los elementos de la conexión. Por favor elija para poder continuar con los cálculos de diseño.", MsgBoxStyle.Critical, "Dato faltante")
                End If
            ElseIf TextBox5.Text = "" Or TextBox3.Text = "" Then
                MsgBox("Falta ingresar valor de cargas. Por favor ingrese los datos faltantes para continuar con los cálculos de diseño.", MsgBoxStyle.Critical, "Dato faltante")
            ElseIf TextBox6.Text = "" Or TextBox4.Text = "" Then
                If TextBox4.Text = "" Then
                    MsgBox("Falta ingresar valor de carga axial en la columna. Por favor ingrese este dato para continuar con los cálculos de diseño.", MsgBoxStyle.Critical, "Dato faltante")
                End If
                If TextBox6.Text = "" Then
                    MsgBox("Falta ingresar la longitud del claro de la viga. Por favor ingrese este dato para continuar con los cálculos de diseño.", MsgBoxStyle.Critical, "Dato faltante")
                End If
            Else
                Cursor.Current = Cursors.WaitCursor
                ProgressBar1.Visible = True
                Timer1.Start()
                labelStatusBar1.Text = "Cargando..."
                Calculate = 1
                RadioButton9.Checked = True
                CorrerDiseño()

                'LIMPIAR LOS TABPAGES DE PLACAS DE CONTINUIDAD Y ZONA DE PANEL NODAL
                'TapPage3 (Placas de Continuidad)
                GroupBox15.Visible = False
                GroupBox19.Visible = False
                GroupBox36.Visible = False
                'TabPage4 (Panel Nodal)
                GroupBox21.Visible = False
                GroupBox22.Visible = False
                GroupBox25.Visible = False
                'Valores por defecto
                RadioButton1.Checked = True
                RadioButton3.Checked = True
                RadioButton5.Checked = True
                RadioButton7.Checked = True
            End If

        Else

            If Sistema = "SCBF" Then
                If Tipo = 6 Or Tipo = 7 Or Tipo = 8 Then

                    If OpcionesDiseño.LthetaBr = 0 Then
                        ThetaRev(Val(TextBox211N.Text), Val(TextBox212N.Text), Val(TextBox213N.Text))
                    End If
                    MiembroDúctilBr()
                    KLrrev(Val(TextBox211N.Text), Val(TextBox212N.Text), Val(TextBox213N.Text))
                    If TextBox201N.Text = "" Then
                        MsgBox("Falta elegir perfiles de diseño.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox209N.Text = "" Then
                        MsgBox("Falta especificar la carga muerta sobre la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox210N.Text = "" Then
                        MsgBox("Falta especificar la carga viva sobre la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox211N.Text = "" Then
                        MsgBox("Falta especificar el claro la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox212N.Text = "" Then
                        MsgBox("Falta especificar la altura del piso.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox213N.Text = "" Then
                        MsgBox("Falta especificar la altura del piso inferior", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox205N.Text = "" Then
                        MsgBox("Falta especificar los tipos de acero.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf thetai = True Then
                        MsgBox("El ángulo de inclinación de los arriostres superiores es inadecuado. Cambiar la altura de piso y/o el claro de la viga.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf thetai2 = True Then
                        MsgBox("El ángulo de inclinación de los arriostres inferiores es inadecuado. Cambiar la altura del piso inferior y/o el claro de la viga.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDBR = False Then
                        MsgBox("La sección de los arriostres superiores no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de arriostre más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDBR2 = False Then
                        MsgBox("La sección de los arriostres inferiores no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de arriostre más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDCL = False Then
                        MsgBox("La sección de la columna no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de columna más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf MDBM = False Then
                        MsgBox("La sección de la viga no cumple con el requerimiento de sección moderadamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de viga más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf klr200 = False Then
                        MsgBox("Los arriostres superiores no cumplen con las normas de esbeltez de acuerdo a AISC 341-10 F2.5b(1). Por favor cambiar la sección de los arriostres y/o las dimensiones del marco.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf klr2002 = False Then
                        MsgBox("Los arriostres inferiores no cumplen con las normas de esbeltez de acuerdo a AISC 341-10 F2.5b(1). Por favor cambiar la sección de los arriostres y/o las dimensiones del marco.", MsgBoxStyle.Exclamation, "Advertencia")
                    Else

                        CalculosArr()

                        If Tipo = 8 Then
                            SoldaduraArriostre(textbox348, label558, textbox347, label554, label483, Tu, label460, Label562, False)
                            SoldaduraArriostre(textbox380, label1152, textbox379, label1150, label1148, Tu2, label1139, label1154, True)
                        Else
                            SoldaduraArriostre(TextBox215N, Label652N, TextBox216N, Label654N, Label656N, Tu, Label650N, Label649N, False)
                        End If

                        If VBM > VnBM Then
                            MsgBox("El cortante disponible en la viga no satisface el cortante requerido por la conexión. Por favor, escoger un perfil más resistente.", MsgBoxStyle.Exclamation, "Advertencia")
                        Else
                            If (Tipo = 6 Or Tipo = 7) And TextBox207.Text <> "" And TextBox219.Text <> "" And TextBox205.Text <> "" And TextBox206.Text <> "" Then
                                Rediseñado()
                            End If

                            If Tipo = 8 And TextBox348.Text <> "" And TextBox347.Text <> "" And TextBox346.Text <> "" And TextBox345.Text <> "" And TextBox359.Text <> "" And TextBox354.Text <> "" And TextBox361.Text <> "" And TextBox360.Text <> "" And OpenMode = False Then
                                Rediseñado()
                            End If

                            If OpenMode = False Then
                                Cursor.Current = Cursors.WaitCursor
                                ProgressBar1.Visible = True
                                labelStatusBar1.Text = "Cargando..."
                                Timer1.Start()
                            End If
                            TabControl1N.SelectTab(0)
                            Calculate = 1
                        End If

                    End If

                ElseIf Tipo = 9 Then

                    ThetaRev(Val(TextBox211N.Text), Val(TextBox212N.Text), Val(TextBox213N.Text))
                    MiembroDúctilBr()
                    KLrrev(Val(TextBox211N.Text), Val(TextBox212N.Text), Val(TextBox213N.Text))
                    If TextBox201N.Text = "" Then
                        MsgBox("Falta elegir perfiles de diseño.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox209N.Text = "" Then
                        MsgBox("Falta especificar la carga muerta sobre la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox210N.Text = "" Then
                        MsgBox("Falta especificar la carga viva sobre la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox211N.Text = "" Then
                        MsgBox("Falta especificar el claro la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox212N.Text = "" Then
                        MsgBox("Falta especificar la altura del piso.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox213N.Text = "" Then
                        MsgBox("Falta especificar la altura del piso inferior", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox205N.Text = "" Then
                        MsgBox("Falta especificar los tipos de acero.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf thetai = True Then
                        MsgBox("El ángulo de inclinación de los arriostres superiores es inadecuado. Cambiar la altura de piso y/o el claro de la viga.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf thetai2 = True Then
                        MsgBox("El ángulo de inclinación de los arriostres inferiores es inadecuado. Cambiar la altura del piso inferior y/o el claro de la viga.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDBR = False Then
                        MsgBox("La sección de los arriostres superiores no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de arriostre más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDBR2 = False Then
                        MsgBox("La sección de los arriostres inferiores no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de arriostre más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf MDBM = False Then
                        MsgBox("La sección de la viga no cumple con el requerimiento de sección moderadamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de viga más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf klr200 = False Then
                        MsgBox("Los arriostres superiores no cumplen con las normas de esbeltez de acuerdo a AISC 341-10 F2.5b(1). Por favor cambiar la sección de los arriostres y/o las dimensiones del marco.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf klr2002 = False Then
                        MsgBox("Los arriostres inferiores no cumplen con las normas de esbeltez de acuerdo a AISC 341-10 F2.5b(1). Por favor cambiar la sección de los arriostres y/o las dimensiones del marco.", MsgBoxStyle.Exclamation, "Advertencia")
                    Else

                        CalculosArr()

                        SoldaduraArriostre(TextBox260, Label699, TextBox259, Label697, Label695, Tu, Label685, Label701, False)
                        SoldaduraArriostre(TextBox274, Label739, TextBox273, Label737, Label735, Tu2, Label725, Label741, True)

                       If OpenMode = False Then
                            Cursor.Current = Cursors.WaitCursor
                            ProgressBar1.Visible = True
                            Timer1.Start()
                            labelStatusBar1.Text = "Cargando..."
                        End If

                        If TextBox260.Text <> "" And TextBox259.Text <> "" And TextBox258.Text <> "" And TextBox257.Text <> "" And TextBox263.Text <> "" And OpenMode = False Then
                            Rediseñado()
                        End If

                        Calculate = 1

                    End If

                ElseIf Tipo = 10 Or Tipo = 11 Then

                    MiembroDúctilBr()
                    ThetaRev(Val(TextBox211N.Text), Val(TextBox212N.Text), Val(TextBox213N.Text))
                    KLrrev(Val(TextBox211N.Text), Val(TextBox212N.Text), Val(TextBox213N.Text))
                    If TextBox209.Text = "" Then
                        MsgBox("Falta elegir perfiles de diseño.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox212.Text = "" Then
                        MsgBox("Falta elegir los tipos de acero.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox209N.Text = "" Then
                        MsgBox("Falta especificar la carga muerta sobre la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox210N.Text = "" Then
                        MsgBox("Falta especificar la carga viva sobre la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox211N.Text = "" Then
                        MsgBox("Falta especificar el claro la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox213N.Text = "" Then
                        MsgBox("Falta especificar la altura del piso.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf thetai2 = True Then
                        MsgBox("El ángulo de inclinación de los arriostres inferiores es inadecuado. Cambiar la altura de piso y/o el claro de la viga.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDBR2 = False Then
                        MsgBox("La sección de los arriostres inferiores no cumplen con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de arriostre más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDCL = False Then
                        MsgBox("La sección de la columna no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de columna más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf MDBM = False Then
                        MsgBox("La sección de la viga no cumple con el requerimiento de sección moderadamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de viga más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf klr2002 = False Then
                        MsgBox("Los arriostres inferiores no cumplen con las normas de esbeltez de acuerdo a AISC 341-10 F2.5b(1). Por favor cambiar la sección de los arriostres y/o las dimensiones del marco.", MsgBoxStyle.Exclamation, "Advertencia")
                    Else

                        CalculosArr()
                        SoldaduraArriostre(TextBox215N, Label652N, TextBox216N, Label654N, Label656N, Tu2, Label650N, Label649N, True)

                        If VBM > VnBM Then
                            MsgBox("El cortante disponible en la viga no satisface el cortante requerido por la conexión. Por favor, escoger un perfil más resistente.", MsgBoxStyle.Exclamation, "Advertencia")
                        Else
                            If OpenMode = False Then
                                Cursor.Current = Cursors.WaitCursor
                                ProgressBar1.Visible = True
                                Timer1.Start()
                                labelStatusBar1.Text = "Cargando..."
                            End If

                            Calculate = 1

                            If TextBox207.Text <> "" And TextBox219.Text <> "" And TextBox205.Text <> "" And TextBox206.Text <> "" And OpenMode = False Then
                                Rediseñado()
                            End If

                        End If

                    End If
                End If

            ElseIf Sistema = "EBF" Then

                If Tipo = 12 Or Tipo = 13 Then

                    MiembroDúctilEBF()
                    ThetaRevEBF()
                    If TextBox295.Text = "" Then
                        MsgBox("Falta elegir perfiles de diseño.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf OpcionesDiseño.LthetaBr = 1 And Lbr = 0 Then
                        MsgBox("No ha especificado la longitud y ángulo de inclinación del arriostre en las opciones de diseño.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox300.Text = "" Then
                        MsgBox("Falta elegir los tipos de acero.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf CargasEBF2.TextBox1.Text = String.Empty Then
                        MsgBox("Falta especificar cargas en los enlaces y el nodo de la conexión", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox290.Text = "" Then
                        MsgBox("No se ha especificado la longitud del enlace de la viga a conectar.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox292.Text = "" Then
                        MsgBox("No se ha especificado la longitud del enlace de la viga superior.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox303.Text = "" Then
                        MsgBox("No se ha especificado el claro de la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox304.Text = "" Then
                        MsgBox("No se ha especificado la altura del piso.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf thetai = True Then
                        MsgBox("El ángulo de inclinación del arriostre es inadecuado. Cambiar la altura de piso y/o el claro de la viga.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDBR = False Then
                        MsgBox("La sección del arriostre no cumple con el requerimiento de sección moderadamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de arriostre más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDCL = False Then
                        MsgBox("La sección de la columna no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de columna más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf MDBM = False Then
                        MsgBox("La sección de la viga no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de viga más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    Else

                        If OpenMode = False Then
                            Cursor.Current = Cursors.WaitCursor
                            ProgressBar1.Visible = True
                            Timer1.Start()
                            labelStatusBar1.Text = "Cargando..."
                        End If

                        Calculate = 1
                        CalculosArr()
                        SoldaduraArriostre(TextBox215N, Label652N, TextBox216N, Label654N, Label656N, Tu, Label650N, Label649N, False)

                        If TextBox207.Text <> "" And TextBox219.Text <> "" And TextBox205.Text <> "" And TextBox206.Text <> "" And OpenMode = False Then
                            Rediseñado()
                        End If

                    End If

                ElseIf Tipo = 14 Then

                    MiembroDúctilEBF()
                    ThetaRevEBF()
                    If TextBox306.Text = "" Then
                        MsgBox("Falta elegir perfiles de diseño.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox309.Text = "" Then
                        MsgBox("Falta elegir los tipos de acero.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf CargasEBF2.TextBox1.Text = String.Empty Then
                        MsgBox("Falta especificar las cargas en los miembros y el nodo de la coenxión", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox290.Text = "" Then
                        MsgBox("No se ha especificado la longitud del enlace.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox303.Text = "" Then
                        MsgBox("No se ha especificado el claro de la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox304.Text = "" Then
                        MsgBox("No se ha especificado la altura del piso.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf thetai2 = True Then
                        MsgBox("El ángulo de inclinación del arriostre es inadecuado. Cambiar la altura de piso y/o el claro de la viga.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDBR = False Then
                        MsgBox("La sección del arriostre no cumple con el requerimiento de sección moderadamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de arriostre más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf MDBM = False Then
                        MsgBox("La sección de la viga no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de viga más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    Else

                        If OpenMode = False Then
                            Cursor.Current = Cursors.WaitCursor
                            ProgressBar1.Visible = True
                            Timer1.Start()
                            labelStatusBar1.Text = "Cargando..."
                        End If

                        Calculate = 1
                        CalculosArr()
                        SoldaduraArriostre(TextBox320, Label1024, TextBox318, Label1022, Label1020, Tu, Label1002, Label1026, False)

                        If TextBox320.Text <> "" And TextBox318.Text <> "" And TextBox315.Text <> "" And TextBox333.Text <> "" And OpenMode = False Then
                            Rediseñado()
                        End If

                    End If

                ElseIf Tipo = 15 Or Tipo = 16 Then

                    MiembroDúctilEBF()
                    ThetaRevEBF()
                    If TextBox295.Text = "" Then
                        MsgBox("Falta elegir perfiles de diseño.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox300.Text = "" Then
                        MsgBox("Falta elegir los tipos de acero.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf CargasEBF2.TextBox1.Text = String.Empty Then
                        MsgBox("Falta especificar las cargas en los miembros y el nodo de la conexión", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox290.Text = "" Then
                        MsgBox("No se ha especificado la longitud del enlace de la viga inferior.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox303.Text = "" Then
                        MsgBox("No se ha especificado el claro de la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox304.Text = "" Then
                        MsgBox("No se ha especificado la altura del piso.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf thetai2 = True Then
                        MsgBox("El ángulo de inclinación del arriostre es inadecuado. Cambiar la altura de piso y/o el claro de la viga.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDBR = False Then
                        MsgBox("La sección del arriostre no cumple con el requerimiento de sección moderadamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de arriostre más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDCL = False Then
                        MsgBox("La sección de la columna no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de columna más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf MDBM = False Then
                        MsgBox("La sección de la viga a conectar no cumple con el requerimiento de sección moderadamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de viga más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDBR2 = False Then
                        MsgBox("La sección de la viga inferior no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de viga más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    Else

                        If OpenMode = False Then
                            Cursor.Current = Cursors.WaitCursor
                            ProgressBar1.Visible = True
                            Timer1.Start()
                            labelStatusBar1.Text = "Cargando..."
                        End If

                        Calculate = 1
                        CalculosArr()
                        SoldaduraArriostre(TextBox215N, Label652N, TextBox216N, Label654N, Label656N, Tu, Label650N, Label649N, False)

                        If TextBox207.Text <> "" And TextBox219.Text <> "" And TextBox205.Text <> "" And TextBox206.Text <> "" And OpenMode = False Then
                            Rediseñado()
                        End If

                    End If

                End If

            ElseIf Sistema = "BRBF" Then

                If Tipo = 17 Or Tipo = 18 Then
                    MiembroDúctilBRBF()
                    Lbr = Val(TextBox328.Text)
                    theta = Val(TextBox327.Text) * Math.PI / 180
                    Lbr2 = Val(TextBox314.Text)
                    theta2 = Val(TextBox313.Text) * Math.PI / 180
                    If TextBox317.Text = "" Then
                        MsgBox("Falta indicar miembros a conectar.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox291.Text = "" Then
                        MsgBox("Falta especificar el acero de los elementos.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox326.Text = "" Or TextBox325.Text = "" Then
                        MsgBox("Falta especificar cargas sobre la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox328.Text = "" Or TextBox314.Text = "" Then
                        MsgBox("Falta especificar longitud de arriostre BRB.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox327.Text = "" Or TextBox313.Text = "" Then
                        MsgBox("Falta especificar inclinación de arriostre BRB.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf HDBR = False Then
                        MsgBox("La sección de la viga no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de viga más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf HDCL = False Then
                        MsgBox("La sección de la columna no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de columna más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf theta < Math.PI / 6 Or theta > Math.PI / 3 Then
                        MsgBox("El ángulo de inclinación de los arriostres superiores es inadecuado.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf theta2 < Math.PI / 6 Or theta2 > Math.PI / 3 Then
                        MsgBox("El ángulo de inclinación de los arriostres inferiores es inadecuado.", MsgBoxStyle.Exclamation, "Advertencia")
                    Else
                        
                        CargasBRBF()

                        If VBM > VnBM Then
                            MsgBox("El cortante disponible en la viga no satisface el cortante requerido por la conexión. Por favor, escoger un perfil más resistente.", MsgBoxStyle.Exclamation, "Advertencia")
                        Else
                            'Corre el diseño
                            If OpenMode = False Then
                                Cursor.Current = Cursors.WaitCursor
                                ProgressBar1.Visible = True
                                Timer1.Start()
                                labelStatusBar1.Text = "Cargando..."
                            End If

                            Calculate = 1

                            If Tipo = 17 Then
                                TextBox231.Text = Tu.ToString
                                TextBox230.Text = Pu.ToString
                                '___________________________________________
                                'Manipulación de los TAbPages
                                If TabControl4.TabPages.Contains(TabPage17) = False And TabControl4.TabPages.Contains(TabPage20) = False Then
                                    TabControl4.TabPages.Insert(0, TabPage20)
                                    TabControl4.TabPages.Insert(0, TabPage17)
                                    TabControl4.TabPages.Remove(TabPage18)
                                    TabControl4.TabPages.Remove(TabPage19)
                                ElseIf TabControl4.TabPages.Contains(TabPage17) = True And TabControl4.TabPages.Contains(TabPage20) = False Then
                                    TabControl4.TabPages.Insert(1, TabPage20)
                                    TabControl4.TabPages.Remove(TabPage18)
                                    TabControl4.TabPages.Remove(TabPage19)
                                ElseIf TabControl4.TabPages.Contains(TabPage17) = False And TabControl4.TabPages.Contains(TabPage20) = True Then
                                    TabControl4.TabPages.Insert(0, TabPage17)
                                    TabControl4.TabPages.Remove(TabPage18)
                                    TabControl4.TabPages.Remove(TabPage19)
                                Else
                                    TabControl4.TabPages.Remove(TabPage18)
                                    TabControl4.TabPages.Remove(TabPage19)
                                End If
                                '===========================================
                            ElseIf Tipo = 18 Then
                                TextBox387.Text = Tu.ToString
                                TextBox388.Text = Pu.ToString
                                TextBox399.Text = Tu2.ToString
                                TextBox400.Text = Pu2.ToString

                                '___________________________________________
                                'Manipulación de los TAbPages
                                If TabControl4.TabPages.Contains(TabPage18) = False And TabControl4.TabPages.Contains(TabPage20) = False Then
                                    TabControl4.TabPages.Insert(0, TabPage20)
                                    TabControl4.TabPages.Insert(0, TabPage18)
                                    TabControl4.TabPages.Remove(TabPage17)
                                    TabControl4.TabPages.Remove(TabPage19)
                                ElseIf TabControl4.TabPages.Contains(TabPage18) = True And TabControl4.TabPages.Contains(TabPage20) = False Then
                                    TabControl4.TabPages.Insert(1, TabPage20)
                                    TabControl4.TabPages.Remove(TabPage17)
                                    TabControl4.TabPages.Remove(TabPage19)
                                ElseIf TabControl4.TabPages.Contains(TabPage18) = False And TabControl4.TabPages.Contains(TabPage20) = True Then
                                    TabControl4.TabPages.Insert(0, TabPage18)
                                    TabControl4.TabPages.Remove(TabPage17)
                                    TabControl4.TabPages.Remove(TabPage19)
                                Else
                                    TabControl4.TabPages.Remove(TabPage17)
                                    TabControl4.TabPages.Remove(TabPage19)
                                End If
                            End If

                            If OpenMode = False Then
                                Rediseñado()
                            End If

                        End If

                    End If

                ElseIf Tipo = 19 Then
                    MiembroDúctilBRBF()
                    Lbr2 = Val(TextBox328.Text)
                    theta2 = Val(TextBox327.Text) * Math.PI / 180
                    If TextBox317.Text = "" Then
                        MsgBox("Falta indicar miembros a conectar.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox291.Text = "" Then
                        MsgBox("Falta especificar el acero de los elementos.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox326.Text = "" Or TextBox325.Text = "" Then
                        MsgBox("Falta especificar cargas sobre la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox328.Text = "" Then
                        MsgBox("Falta especificar longitud de los arriostres BRB.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox327.Text = "" Then
                        MsgBox("Falta especificar inclinación de los arriostres BRB.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf HDBR = False Then
                        MsgBox("La sección de la viga no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de viga más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf theta < Math.PI / 6 Or theta > Math.PI / 3 Then
                        MsgBox("El ángulo de inclinación de los arriostres superiores es inadecuado.", MsgBoxStyle.Exclamation, "Advertencia")
                    Else
                        'Corre el diseño
                        If OpenMode = False Then
                            Cursor.Current = Cursors.WaitCursor
                            ProgressBar1.Visible = True
                            Timer1.Start()
                            labelStatusBar1.Text = "Cargando..."
                        End If
                        Calculate = 1
                        CargasBRBF()
                        TextBox231.Text = Tu2.ToString
                        TextBox230.Text = Pu2.ToString

                        'TABCONTROL (Manipulación de los TabPAges)

                        If TabControl4.TabPages.Contains(TabPage17) = False And TabControl4.TabPages.Contains(TabPage19) = False Then
                            TabControl4.TabPages.Insert(0, TabPage19)
                            TabControl4.TabPages.Insert(0, TabPage17)
                            TabControl4.TabPages.Remove(TabPage18)
                            TabControl4.TabPages.Remove(TabPage20)
                        ElseIf TabControl4.TabPages.Contains(TabPage17) = True And TabControl4.TabPages.Contains(TabPage19) = False Then
                            TabControl4.TabPages.Insert(1, TabPage19)
                            TabControl4.TabPages.Remove(TabPage18)
                            TabControl4.TabPages.Remove(TabPage20)
                        ElseIf TabControl4.TabPages.Contains(TabPage17) = False And TabControl4.TabPages.Contains(TabPage19) = True Then
                            TabControl4.TabPages.Insert(0, TabPage17)
                            TabControl4.TabPages.Remove(TabPage18)
                            TabControl4.TabPages.Remove(TabPage20)
                        Else
                            TabControl4.TabPages.Remove(TabPage18)
                            TabControl4.TabPages.Remove(TabPage20)
                        End If

                        '====================================================================
                        If OpenMode = False Then
                            Rediseñado()
                        End If

                    End If
                ElseIf Tipo = 20 Then

                    MiembroDúctilBRBF()
                    Lbr = Val(TextBox328.Text)
                    theta = Val(TextBox327.Text) * Math.PI / 180
                    Lbr2 = Val(TextBox314.Text)
                    theta2 = Val(TextBox313.Text) * Math.PI / 180
                    If TextBox317.Text = "" Then
                        MsgBox("Falta indicar miembros a conectar.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox291.Text = "" Then
                        MsgBox("Falta especificar el acero de los elementos.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox326.Text = "" Or TextBox325.Text = "" Then
                        MsgBox("Falta especificar cargas sobre la viga.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox328.Text = "" Or TextBox314.Text = "" Then
                        MsgBox("Falta especificar longitud de arriostre BRB.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf TextBox327.Text = "" Or TextBox313.Text = "" Then
                        MsgBox("Falta especificar inclinación de arriostre BRB.", MsgBoxStyle.Critical, "Dato faltante")
                    ElseIf HDBR = False Then
                        MsgBox("La sección de la viga no cumple con el requerimiento de sección altamente dúctil según AISC 341-10 D1.1b. Por favor, escoger un perfil de viga más dúctil.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf theta < Math.PI / 6 Or theta > Math.PI / 3 Then
                        MsgBox("El ángulo de inclinación de los arriostres superiores es inadecuado.", MsgBoxStyle.Exclamation, "Advertencia")
                    ElseIf theta2 < Math.PI / 6 Or theta2 > Math.PI / 3 Then
                        MsgBox("El ángulo de inclinación de los arriostres inferiores es inadecuado.", MsgBoxStyle.Exclamation, "Advertencia")
                    Else
                        'Corre el diseño
                        If OpenMode = False Then
                            Cursor.Current = Cursors.WaitCursor
                            ProgressBar1.Visible = True
                            Timer1.Start()
                            labelStatusBar1.Text = "Cargando..."
                        End If
                        Calculate = 1
                        CargasBRBF()
                        TextBox387.Text = Tu.ToString
                        TextBox388.Text = Pu.ToString
                        TextBox399.Text = Tu2.ToString
                        TextBox400.Text = Pu2.ToString

                        'TABCONTROL (Manipulación de los TAbPages)
                        If TabControl4.TabPages.Contains(TabPage18) = False And TabControl4.TabPages.Contains(TabPage19) = False Then
                            TabControl4.TabPages.Insert(0, TabPage19)
                            TabControl4.TabPages.Insert(0, TabPage18)
                            TabControl4.TabPages.Remove(TabPage17)
                            TabControl4.TabPages.Remove(TabPage20)
                        ElseIf TabControl4.TabPages.Contains(TabPage18) = True And TabControl4.TabPages.Contains(TabPage19) = False Then
                            TabControl4.TabPages.Insert(1, TabPage19)
                            TabControl4.TabPages.Remove(TabPage17)
                            TabControl4.TabPages.Remove(TabPage20)
                        ElseIf TabControl4.TabPages.Contains(TabPage18) = False And TabControl4.TabPages.Contains(TabPage19) = True Then
                            TabControl4.TabPages.Insert(0, TabPage18)
                            TabControl4.TabPages.Remove(TabPage17)
                            TabControl4.TabPages.Remove(TabPage20)
                        Else
                            TabControl4.TabPages.Remove(TabPage17)
                            TabControl4.TabPages.Remove(TabPage20)
                        End If

                        If OpenMode = False Then
                            Rediseñado()
                        End If

                    End If

                End If
            End If

        End If
    End Sub

    Private Sub CorrerDiseño()

        Label16.Text = Me.TextBox2.Text
        Label22.Text = Me.TextBox1.Text

        'IMAGEN DE RELACION DE MOMENTOS SEGUN LA CONFIGURACION ELEGIDA
        If ComboBox1.SelectedIndex = 0 And ComboBox2.SelectedItem = "No" Then
            PictureBox58.Image = My.Resources.relcdeMomentos2
        ElseIf ComboBox1.SelectedIndex = 1 And ComboBox2.SelectedItem = "No" Then
            PictureBox58.Image = My.Resources.columnaviga
        ElseIf ComboBox1.SelectedIndex = 0 And ComboBox2.SelectedItem = "Si" Then
            PictureBox58.Image = My.Resources.capPlate1
        Else
            PictureBox58.Image = My.Resources.capPlate2
        End If

        'CALCULO DE LA CARGA GRAVITACIONAL ULTIMA Wu
        'Wu = 1.2WD + 0.5WL
        Dim Wu As Double
        Wu = (1.2 * Val(TextBox5.Text)) + (0.5 * Val(TextBox3.Text))

        'RELACIONES ANCHO-ESPESOR DE SECCIONES DE ALTA DUCTILIDAD
        'Instancias para obtener datos de las secciones
        Dim InstSecc As Secciones = Secciones.GetSingleton
        Dim InstFys As Aceros = Aceros.GetSingleton
        'Datos a obtener
        'viga
        Dim tbf As Double = Val(InstSecc.TextBox6.Text)
        Dim relpatinVig As Double = Val(InstSecc.TextBox7.Text)
        Dim relalmaVig As Double = Val(InstSecc.TextBox8.Text)
        Dim Fyviga As Integer = Val(InstFys.TextBox1.Text)
        Dim dbeam As Double = Val(InstSecc.TextBox1.Text)
        Dim bbf As Double = Val(InstSecc.TextBox4.Text)
        Dim Ryb As Double = Val(InstFys.TextBox3.Text)
        Dim zxb As Double = Val(InstSecc.TextBox5.Text)
        Dim Fuviga As Integer = Val(InstFys.TextBox2.Text)
        Dim Lclaro As Double = 12 * Val(TextBox6.Text)
        Dim twBeam As Double = Val(InstSecc.TextBox2.Text)
        getPeso(TextBox2.Text)
        Dim peso As Double = Val(TextBox16.Text)
        'columna
        Dim dcol As Double = Val(InstSecc.TextBox16.Text)
        Dim relpatinCol As Double = Val(InstSecc.TextBox11.Text)
        Dim relalmaCol As Double = Val(InstSecc.TextBox9.Text)
        Dim Fycol As Integer = Val(InstFys.TextBox5.Text)
        Dim Ryc As Double = Val(InstFys.TextBox6.Text)
        Dim tfc As Double = Val(InstSecc.TextBox13.Text)
        Dim twc As Double = Val(InstSecc.TextBox14.Text)
        Dim bcf As Double = Val(InstSecc.TextBox12.Text)
        Dim Agcol As Double = Val(InstSecc.TextBox10.Text)
        Dim Zcol As Double = Val(InstSecc.TextBox15.Text)
        Dim Pucol As Double = Val(TextBox4.Text)

        'Acero de las placas (de continuidad y/o nodales)
        Dim Fypl As Double = Val(InstFys.TextBox9.Text)
        Dim Fup As Double = Val(InstFys.TextBox11.Text)

        'jalar los datos a los textboxs del TabControl
        TextBox17.Text = tbf.ToString
        If ComboBox2.SelectedItem = "Si" Then
            AlturasEntrepiso.Hsup = 0
        End If
        TextBox12.Text = relalmaVig.ToString
        TextBox11.Text = relpatinCol.ToString
        TextBox13.Text = relalmaCol.ToString
        TextBox137.Text = bbf.ToString
        TextBox138.Text = dbeam.ToString

        'Calculos de b/t
        'viga
        Dim ductVigPatin As Double
        ductVigPatin = Math.Round(0.3 * (Math.Sqrt(29000 / Fyviga)), 2)
        Label18.Text = ductVigPatin.ToString
        '__________________________________
        'If relpatinVig > ductVigPatin Then
        '    TextBox10.BackColor = Color.Red
        'Else
        '    TextBox10.BackColor = Color.WhiteSmoke
        'End If
        '--------------------------MOVIDO AL CASO PARTICULAR DE CADA CONEXIÓN

        Dim ductVigAlma As Double
        ductVigAlma = Math.Round(2.45 * (Math.Sqrt(29000 / Fyviga)), 2)
        Label19.Text = ductVigAlma.ToString
        If relalmaVig > ductVigAlma Then
            TextBox12.BackColor = Color.Red
        Else
            TextBox12.BackColor = Color.WhiteSmoke
        End If

        'columna
        Dim ductColPatin As Double
        ductColPatin = Math.Round(0.3 * (Math.Sqrt(29000 / Fycol)), 2)
        Label17.Text = ductColPatin.ToString
        If relpatinCol > ductColPatin Then
            TextBox11.BackColor = Color.Red
        Else
            TextBox11.BackColor = Color.WhiteSmoke
        End If

        Dim ratio1, ratio2, ductColAlma As Double
        Dim Ca As Double
        Ca = Pucol / (0.9 * Fycol * Agcol)
        If Ca > 0.125 Then
            ratio1 = 0.77 * (Math.Sqrt(29000 / Fycol)) * (2.93 - Ca)
            ratio2 = 1.49 * (Math.Sqrt(29000 / Fycol))
            ductColAlma = Math.Round((Math.Max(ratio1, ratio2)), 2)
        Else
            ratio1 = 2.45 * (Math.Sqrt(29000 / Fycol)) * (1 - (0.93 * Ca))
            ductColAlma = Math.Round(ratio1, 2)
        End If
        Label21.Text = ductColAlma.ToString

        If relalmaCol > ductColAlma Then
            TextBox13.BackColor = Color.Red
        Else
            TextBox13.BackColor = Color.WhiteSmoke
        End If

        'RELACION CLARO/PERALTE
        Dim LD As Double
        LD = Math.Round(((12 * Val(TextBox6.Text) - dcol) / dbeam), 2)
        TextBox18.Text = LD.ToString

        'CALCULAR LIMITES PARA VER SI SON NECESARIAS PLACAS DE CONTINUIDAD
        Dim divis As Double
        divis = (Ryb * Fyviga) / (Ryc * Fycol)
        LimPLcont1 = 0.4 * (Math.Sqrt(1.8 * bbf * tbf * divis))
        LimPLcont2 = bbf / 6

        'CAMBIOS EN LOS TOOLTIPS/DISEÑOS EN DEPENDENCIA DE CONEXION SELECCIONADA
        'RBS
        If LabelDiseño.Text = "Conexión de Momento con Sección de Viga Reducida" Then
            ToolTip1.SetToolTip(GroupBox8, "AISC 358 - 10 5.3.1")
            ToolTip1.SetToolTip(GroupBox10, "AISC 358 - 10 5.3.2")
            ToolTip1.SetToolTip(GroupBox34, "AISC 358 - 10 5.4")
            ToolTip1.SetToolTip(GroupBox33, "AISC 358 - 10 5.4")
            TextBox14.Visible = True
            TextBox138.Visible = False
            PictureBox22.Visible = True
            PictureBox24.Visible = True
            PictureBox31.Visible = True
            PictureBox138.Visible = False
            TextBox137.Visible = False
            Label227.Visible = False
            Label23.Text = "W36"    'limite de peralte de la viga
            ToolTip1.SetToolTip(TextBox138, "Peralte de la sección de la viga")
            Label23.Location = New Point(165, 36)
            Label34.Location = New Point(165, 70)
            Label34.Text = "300"    'limite de peso de la viga
            Label35.Location = New Point(165, 105)
            Label35.Text = "1 3/4 in"   'limite de tbf de la viga
            Label36.Text = "7"      'limite relacion claro/peralte
            If LD < 7 Then              'relacion claro/peralte
                TextBox18.BackColor = Color.Red
            Else
                TextBox18.BackColor = Color.WhiteSmoke
            End If
            If tbf > 1.75 Then      'chekeo del patin de la viga
                TextBox17.BackColor = Color.Red
            Else
                TextBox17.BackColor = Color.WhiteSmoke
            End If
            Label24.Text = "W36"
            If peso > 300 Then      'chekeo del peso de la viga
                TextBox16.BackColor = Color.Red
            Else
                TextBox16.BackColor = Color.WhiteSmoke
            End If

            'Relación ancho-espesor Viga ---->>AÑADIDO AQUÍ PORQUE PARA RBS PUEDE SER DIFERENTE
            If OpcionesDiseño.BfredRBS = 0 Then
                TextBox10.Text = relpatinVig.ToString
                If relpatinVig > ductVigPatin Then
                    TextBox10.BackColor = Color.Red
                Else
                    TextBox10.BackColor = Color.WhiteSmoke
                End If
            Else    'Se está considerando la reducción del patín
                Dim ared, bred, cred As Double
                ared = Val(TextBox27.Text)
                bred = Val(TextBox25.Text)
                cred = Val(TextBox21.Text)
                Dim bfRed, Relpatin_red, Rrbs As Double
                Dim Oper As Double
                Rrbs = (4 * (cred ^ 2) + (bred ^ 2)) / (8 * cred)
                Oper = (Rrbs ^ 2) - ((bred / 3) ^ 2)
                bfRed = 2 * (Rrbs - cred) + bbf - 2 * Math.Sqrt(Oper)

                Relpatin_red = Math.Round((bfRed) / 2 / tbf, 2)
                TextBox10.Text = Relpatin_red.ToString
                If Relpatin_red > ductVigPatin Then
                    TextBox10.BackColor = Color.Red
                Else
                    TextBox10.BackColor = Color.WhiteSmoke
                End If
            End If

            'AÑADIR TABPAGE DE DISEÑO RBS/OCULTAR DEMAS TABPAGES
            If TabControlJ1.TabPages.Contains(TabPage2) = False Then
                TabControlJ1.TabPages.Insert(1, TabPage2)
                TabControlJ1.TabPages.Remove(TabPage5)
                TabControlJ1.TabPages.Remove(TabPage6)
                TabControlJ1.TabPages.Remove(TabPage7)

            Else
                TabControlJ1.TabPages.Remove(TabPage5)
                TabControlJ1.TabPages.Remove(TabPage6)
                TabControlJ1.TabPages.Remove(TabPage7)
            End If

            '______________________________________
            'CALCULOS DE DISEÑO DE LA CONEXION RBS
            '--------------------------------------
            'Mandar datos a los procedimientos
            Dim Zrbs As Double
            Dim c, Zsr, CprRBS, MprRBS As Double  'Zsr: Zrbs Sin Redondear

            c = Val(TextBox21.Text)
            Zsr = zxb - (2 * c * tbf * (dbeam - tbf))
            Zrbs = Math.Floor(Zsr) + 1

            'Llamado a los procedimientos del Módulo "CalculosDiseno"
            CalcularCpr(Fyviga, Fuviga)
            CprRBS = cpr
            CalcMpr(CprRBS, Zrbs, Ryb, Fyviga)
            MprRBS = Mpr
            TextBox28.Text = MprRBS.ToString

            'Calculo de Sh y Lh
            Dim Sh As Double
            Sh = Val(TextBox27.Text) + (Val(TextBox25.Text) / 2) 'Sh= a + b/2
            TextBox30.Text = Sh.ToString
            Dim LhRBS As Double
            LhRBS = Lclaro - dcol - (2 * Sh)  'Lh= L-2(dc/2)-2Sh
            'Llamado al procedimiento: 
            CortanteVh(MprRBS, LhRBS, Wu)
            Dim VRBS, VRBSprima As Double
            VRBS = Vh
            VRBSprima = VhPrima
            TextBox29.Text = VRBS.ToString
            TextBox139.Text = VRBSprima.ToString

            'Calculo de Vu
            Dim VuRBS, Vartplas As Double
            'Vartplas=Cortante en la articulacion plastica (EL MAYOR ENTRE VRBS y VRBSprima)
            Vartplas = Math.Max(VRBS, VRBSprima)
            VuRBS = Math.Round(Vartplas + (Wu * Sh / 12), 3)
            TextBox33.Text = VuRBS.ToString
            TextBox35.Text = VuRBS.ToString

            'Calculo de Vn de la Viga
            Dim VnRBS As Double
            VnRBS = Math.Round(0.6 * Fyviga * dbeam * twBeam, 3)
            TextBox34.Text = VnRBS.ToString
            If VnRBS < VuRBS Then
                TextBox33.BackColor = Color.Red
                TextBox35.BackColor = Color.Red
            Else
                TextBox33.BackColor = Color.WhiteSmoke
                TextBox35.BackColor = Color.WhiteSmoke
            End If

            'Calculo de Mf
            Mgravedad(Wu, Sh)
            MomentoMf(MprRBS, Vartplas, Sh)
            Dim MfRBS, Mpe As Double
            MfRBS = Mf
            TextBox31.Text = MfRBS.ToString
            'Mpe
            Mpe = redondear(Ryb * Fyviga * zxb, 10)
            TextBox32.Text = Mpe.ToString
            If MfRBS > Mpe Then
                TextBox31.BackColor = Color.Red
                Label362.Visible = True
            Else
                TextBox31.BackColor = Color.WhiteSmoke
                Label362.Visible = False
            End If

            'Introducir espesor de placa simple
            'Evento Keypress del TextBox 37

            'Relación de Momentos
            EMpc(Zcol, Fycol, Pucol, Agcol, dbeam)
            TextBox66.Text = SumMpc.ToString    'Mpc 
            EMpb(MprRBS, VRBS, VRBSprima, Sh, dcol)
            TextBox70.Text = SumMpb.ToString    'Mpb
            'Mpc/Mpb>1
            Dim Rel As Double
            Rel = Math.Round(SumMpc / SumMpb, 2)
            TextBox71.Text = Rel.ToString
            If Rel <= 1 Then
                TextBox71.BackColor = Color.Red
            Else
                TextBox71.BackColor = Color.WhiteSmoke
            End If

            'Calculo de M´f (en caso de haber dos vigas conectadas)
            If ComboBox1.SelectedItem = "2" Then
                MfPrima = Mfdos(MprRBS, VRBSprima, Sh)
            Else
                MfPrima = 0
            End If
        End If


        'BUEEP
        If LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida sin Rigidizar" Then
            ToolTip1.SetToolTip(GroupBox8, "AISC 358 - 10 6.4")
            ToolTip1.SetToolTip(GroupBox10, "AISC 358 - 10 6.5")
            ToolTip1.SetToolTip(GroupBox34, "AISC 358 - 10 6.6")
            ToolTip1.SetToolTip(GroupBox33, "AISC 358 - 10 6.6")
            TextBox14.Visible = False
            TextBox138.Visible = True
            PictureBox22.Visible = False
            Label23.Text = "(13 3/4 in - 55 in)"    'limite de peralte de la viga
            Label23.Location = New Point(148, 36)
            PictureBox24.Visible = False
            Label34.Text = "No hay límite de peso"  'limite de peso de la viga
            TextBox16.BackColor = Color.WhiteSmoke
            Label34.Location = New Point(148, 70)
            PictureBox31.Visible = False
            Label35.Text = "(3/8 in - 3/4 in)"      'limite de tbf de la viga
            Label35.Location = New Point(148, 105)
            Label262.Text = tfc.ToString + " in"
            Label273.Text = tfc.ToString + " in"
            GroupBox67.Visible = False
            GroupBox67.SendToBack()
            Label36.Text = "7"      'limite relacion claro/peralte
            PictureBox138.Visible = True
            TextBox137.Visible = True
            Label227.Visible = True
            Label227.Text = "(6 in - 9 1/4 in)"
            If LD < 7 Then          'relacion claro/peralte
                TextBox18.BackColor = Color.Red
            Else
                TextBox18.BackColor = Color.WhiteSmoke
            End If
            Label24.Text = "W36"
            PictureBox160.Image = My.Resources.PlacadeExtremo4E
            TextBox155.Visible = True
            TextBox155.Location = New Point(655, 202)
            TextBox156.Location = New Point(426, 383)
            TextBox157.Location = New Point(655, 252)
            TextBox158.Visible = False
            TextBox159.Visible = False
            ToolTip1.SetToolTip(TextBox151, "Estado límite de desgarre")
            Label261.Location = New Point(235, 101)
            TextBox166.Visible = False
            'Relación ancho-espesor Viga ---->>AÑADIDO AQUÍ PORQUE PARA RBS PUEDE SER DIFERENTE
            TextBox10.Text = relpatinVig.ToString
            If relpatinVig > ductVigPatin Then
                TextBox10.BackColor = Color.Red
            Else
                TextBox10.BackColor = Color.WhiteSmoke
            End If

            'CASOS ESPECIALES DE CHEKEO
            'Peralte de la viga (entre 13 3/4 a 55 4E)
            Dim Okperalte0 As Integer '(igual a 0 si NO cumple, igual a 1 SI CUMPLE)
            If dbeam < 13.75 Or dbeam > 55 Then
                Okperalte0 = 0
            Else
                Okperalte0 = 1
            End If
            If ComboBox8.SelectedItem = "No" Then
                ToolTip1.SetToolTip(TextBox138, "Peralte de la sección de la viga")
                If Okperalte0 = 0 Then
                    TextBox138.BackColor = Color.Red
                Else
                    TextBox138.BackColor = Color.WhiteSmoke
                End If
            Else
                ToolTip1.SetToolTip(TextBox138, "Debido a la presencia de la losa, el peralte de la viga no debe ser menor a 24 in")
                If Okperalte0 = 1 And dbeam >= 24 Then
                    TextBox138.BackColor = Color.WhiteSmoke
                Else
                    TextBox138.BackColor = Color.Red
                End If
            End If

            'Patin de la viga (Para 4E entre 3/8 a 3/4)
            If tbf < 0.375 Or tbf > 0.75 Then      'chekeo del patin de la viga
                TextBox17.BackColor = Color.Red
            Else
                TextBox17.BackColor = Color.WhiteSmoke
            End If

            'Ancho del patin de la viga (Para 4E entre 6"-9 1/4)"
            Label227.Text = "(6 in - 9 1/4 in)"     'limite de bf de la viga
            If bbf < 6 Or bbf > 9.25 Then
                TextBox137.BackColor = Color.Red
            Else
                TextBox137.BackColor = Color.WhiteSmoke
            End If


            'MOSTRAR TABPAGE DE DISEÑO DE BUEEP/OCULTAR LOS DEMAS TABPAGES
            If TabControlJ1.TabPages.Contains(TabPage5) = False Then
                TabControlJ1.TabPages.Insert(1, TabPage5)
                TabControlJ1.TabPages.Remove(TabPage2)
                TabControlJ1.TabPages.Remove(TabPage6)
                TabControlJ1.TabPages.Remove(TabPage7)

            Else
                TabControlJ1.TabPages.Remove(TabPage2)
                TabControlJ1.TabPages.Remove(TabPage6)
                TabControlJ1.TabPages.Remove(TabPage7)
            End If

            '______________________________________
            'CALCULOS DE DISEÑO DE LA CONEXION BUEEP
            '--------------------------------------
            'Mandar datos a los procedimientos
            Dim CprBUEEP, MprBUEEP As Double
            'variables de datos geometricos ingresados
            Dim dperno As String = ComboBox5.Text
            Dim gram As Double = Val(TextBox90.Text)
            Dim bp As Double = Val(TextBox88.Text)
            Dim pfo As Double = Val(TextBox80.Text)
            Dim pfi As Double = Val(TextBox100.Text)
            Dim de As Double = Val(TextBox98.Text)
            Dim Fnt As Integer = Val(TextBox78.Text)
            Dim Fnv As Integer = Val(TextBox84.Text)
            Dim tp As Double = Val(TextBox96.Text)

            'Calculos de valores geométricos restantes
            Dim h0, h1, dreq As Double
            h0 = dbeam - (tbf / 2) + pfo
            h1 = dbeam - (1.5 * tbf) - pfi

            'Llamado a los procedimientos del Módulo "CalculosDiseno"
            CalcularCpr(Fyviga, Fuviga)
            CprBUEEP = cpr
            CalcMpr(CprBUEEP, zxb, Ryb, Fyviga)
            MprBUEEP = Mpr
            TextBox136.Text = MprBUEEP.ToString

            'Calculo de Sh y Lh
            Dim Sh2 As Double
            Sh2 = Math.Min(dbeam / 2, 3 * bbf) 'Sh= min(db/2, 3bfb)
            TextBox143.Text = Sh2.ToString
            Dim LhBUEEP As Double
            LhBUEEP = Lclaro - dcol - (2 * Sh2)  'Lh= L-2(dc/2)-2Sh
            'Llamado al procedimiento: 
            CortanteVh(MprBUEEP, LhBUEEP, Wu)
            Dim Vbueep, Vbueeprima As Double
            Vbueep = Vh
            Vbueeprima = VhPrima
            TextBox144.Text = Vbueep.ToString
            TextBox140.Text = Vbueeprima.ToString

            'Calculo de Vu
            Dim VuBUEEP, Vartp As Double
            'Vartplas=Cortante en la articulacion plastica (EL MAYOR ENTRE VRBS y VRBSprima)
            Vartp = Math.Max(Vbueep, Vbueeprima)
            VuBUEEP = Math.Round(Vartp + (Wu * Sh2 / 12), 3)
            TextBox142.Text = VuBUEEP.ToString

            'Calculo de Mf
            Mgravedad(Wu, Sh2)
            MomentoMf(MprBUEEP, Vartp, Sh2)
            Dim MfBUEEP, drq As Double
            MfBUEEP = Mf
            TextBox133.Text = MfBUEEP.ToString
            'Calculo del diametro requerido
            dreq = Math.Sqrt(2 * MfBUEEP / (Math.PI * 0.9 * Fnt * (h0 + h1)))
            drq = Math.Round(dreq, 3)
            TextBox77.Text = drq.ToString
            Dim diamprop As Double = Frac2Num(ComboBox5.Text)
            If diamprop < dreq Then
                ComboBox5.BackColor = Color.Red
            Else
                ComboBox5.BackColor = Color.White
            End If

            'Calculo del espesor de placa requerido
            Dim s, Yp, p, tpreq As Double
            'p= será la variable que funcione como pfi, o dado el caso como s
            s = 1 / 2 * Math.Sqrt(bp * gram)
            If pfi > s Then
                p = s
            Else
                p = pfi
            End If
            Yp = Math.Round(bp / 2 * (h1 * (1 / p + 1 / s) + h0 / pfo - 0.5) + 2 / gram * (h1 * (p + s)), 2)

            tpreq = Math.Round(Math.Sqrt(1.11 * MfBUEEP / (Fypl * Yp)), 3)
            TextBox95.Text = tpreq.ToString
            If tpreq > Val(TextBox96.Text) Then
                TextBox96.BackColor = Color.Red
            Else
                TextBox96.BackColor = Color.White
            End If

            'Calculo de Ffu (fuerza factorada en el patin)
            Dim Ffu As Double
            Ffu = Math.Round(MfBUEEP / (dbeam - tbf), 2)
            Dim FfuMedio As Double = Ffu / 2
            TextBox149.Text = Ffu.ToString
            Label276.Text = Ffu.ToString + " kip"
            Label280.Text = Ffu.ToString + " kip"
            Label282.Text = Ffu.ToString + " kip"


            'PORCIÓN DE PLACA DE EXTREMO SIN RIGIDIZAR (EXCLUSIVO DE BUEEP)
            'Calculo de Resistencia a fluencia por cortante
            Dim Rfcort As Double
            Rfcort = Math.Round(0.6 * Fypl * bp * tp, 2)
            TextBox145.Text = Rfcort.ToString
            If Rfcort < FfuMedio Then
                TextBox145.BackColor = Color.Red
            Else
                TextBox145.BackColor = Color.WhiteSmoke
            End If

            'Calculo de Resistencia a ruptura por cortante
            Dim Rrcort, An, dh, dSTD As Double
            dSTD = Frac2Num(dperno)
            If ComboBox4.SelectedItem = "STD" Then
                dh = dSTD + 1 / 16
            Else
                consultRanuraSSL(dperno)
                dh = Val(ranura)
            End If
            An = tp * (bp - 2 * (dh + 1 / 16))
            Rrcort = Math.Round(0.9 * 0.6 * Fup * An, 2)
            TextBox148.Text = Rrcort.ToString
            If Rrcort < FfuMedio Then
                TextBox148.BackColor = Color.Red
            Else
                TextBox148.BackColor = Color.WhiteSmoke
            End If

            'Revision Ruptura de los pernos
            Dim Rrupb, Ab As Double
            Ab = Math.PI * (dSTD ^ 2) / 4
            Rrupb = Math.Round(0.9 * 4 * Fnv * Ab, 2)
            TextBox147.Text = Rrupb.ToString
            If Rrupb < VuBUEEP Then
                TextBox147.BackColor = Color.Red
            Else
                TextBox147.BackColor = Color.WhiteSmoke
            End If

            'Revision aplastamiento/desgarre pernos
            Dim Oval, dis_c, Lc, Desg As Double
            Oval = Math.Round(2.4 * dSTD * tp * Fup)
            TextBox146.Text = Oval.ToString
            'Lc (para 4E y 4ES)
            'Calculo de distancia c = pfo + tfb + pfi
            dis_c = pfo + tbf + pfi
            Lc = dis_c - dSTD - 1 / 16
            TextBox156.Text = Lc.ToString

            Desg = Math.Round(1.2 * Lc * tp * Fup)
            TextBox151.Text = Desg.ToString
            Dim Rapl_desg As Double
            Rapl_desg = Math.Round(0.9 * ((2 * Oval) + (2 * Math.Min(Oval, Desg))), 2)
            TextBox150.Text = Rapl_desg.ToString
            If Rapl_desg < VuBUEEP Then
                TextBox150.BackColor = Color.Red
            Else
                TextBox150.BackColor = Color.WhiteSmoke
            End If

            Dim Rapl_patin As Double
            Rapl_patin = Math.Round(Rapl_desg * (tfc / tp) * (Fypl / Fycol), 2)
            TextBox154.Text = Rapl_patin.ToString
            If Rapl_patin < VuBUEEP Then
                TextBox154.BackColor = Color.Red
            Else
                TextBox154.BackColor = Color.WhiteSmoke
            End If

            'Diseño de soldaduras
            'Soldadura en el alma de la viga y la placa de extremo
            'Soldad. por Flexion
            Dim Dflex, Dcor, Dtension As Double
            Dflex = Math.Floor((0.6 * Fyviga * twBeam) / (2 * 1.392)) + 1
            'Es necesario verificar el tamaño min de soldadura
            Dim tmenor, dminsold As Double
            tmenor = Math.Min(twBeam, tp)

            If tmenor <= 1 / 4 Then
                dminsold = 1 / 8
            End If

            If tmenor > 1 / 4 And tmenor <= 1 / 2 Then
                dminsold = 3 / 16
            End If

            If tmenor > 1 / 2 And tmenor <= 3 / 4 Then
                dminsold = 1 / 4
            End If

            If tmenor > 3 / 4 Then
                dminsold = 5 / 16
            End If

            If Dflex / 16 < dminsold Then
                Dtension = dminsold * 16
            Else
                Dtension = Dflex
            End If

            'Sold. por Cortante
            'Hay que calcular la longitud efectiva de soldadura lew = min (db/2-tbf; db-2tbf-(pfi + 6 in))
            Dim lew, Dvu As Double
            lew = Math.Min(dbeam / 2 - tbf, dbeam - (2 * tbf) - (pfi + 6))
            Dcor = Math.Floor(VuBUEEP / (2 * 1.392 * lew)) + 1

            If Dcor / 16 < dminsold Then
                Dvu = dminsold * 16
            Else
                Dvu = Dcor
            End If

            Dim SoldAlma As Double
            SoldAlma = Math.Max(Dtension, Dvu)

            TextBox157.Text = SoldAlma.ToString + "/16"

            'Relación de Momentos
            EMpc(Zcol, Fycol, Pucol, Agcol, dbeam)
            TextBox66.Text = SumMpc.ToString    'Mpc 
            EMpb(MprBUEEP, Vbueep, Vbueeprima, Sh2, dcol)
            TextBox70.Text = SumMpb.ToString    'Mpb
            'Mpc/Mpb>1
            Dim Rel As Double
            Rel = Math.Round(SumMpc / SumMpb, 2)
            TextBox71.Text = Rel.ToString
            If Rel <= 1 Then
                TextBox71.BackColor = Color.Red
            Else
                TextBox71.BackColor = Color.WhiteSmoke
            End If

            'Calculo de M´f (en caso de haber dos vigas conectadas)
            If ComboBox1.SelectedItem = "2" Then
                MfPrima = Mfdos(MprBUEEP, Vbueeprima, Sh2)
            Else
                MfPrima = 0
            End If

            'DISEÑO DEL LADO DE LA COLUMNA
            'Calculo de patin requerido sin rigidizar
            Dim sc, Yc, c As Double
            c = dis_c
            sc = 0.5 * (Math.Sqrt(bcf * gram))
            'Yc sin rigidizar
            Yc = Math.Round(bcf / 2 * (h1 / sc + h0 / sc) + 2 / gram * (h1 * (sc + (3 * c / 4)) + h0 * (sc + c / 4) + (0.5 * c ^ 2)) + gram / 2, 2)

            Dim patin_req As Double
            Dim Rfpatinc As Double = 0
            patin_req = Math.Round(Math.Sqrt(1.11 * MfBUEEP / (Fycol * Yc)), 3)
            TextBox141.Text = patin_req.ToString
            If tfc < patin_req Then
                TextBox141.BackColor = Color.Red
                Label269.BackColor = Color.SteelBlue
                Label269.Font = New Font("Lucida Fax", 8.25, FontStyle.Bold)
                Label269.Font = New Font(Label269.Font, FontStyle.Italic)
                Label269.Text = "Se necesitan placas de continuidad" + vbCr + " " + vbCr + "Aumentar el tamaño de la sección de la columna, o usar placas de continuidad."
                TextBox160.Enabled = True

                'Calculo de la Resistencia PhiRn
                Rfpatinc = Math.Round(Fycol * Yc * (tfc ^ 2) / (dcol - tbf), 2)

            Else
                TextBox141.BackColor = Color.WhiteSmoke
                Label269.BackColor = Color.Transparent
                Label269.Font = New Font("Microsoft Sans Serift", 8.25, FontStyle.Regular)
                Label269.Text = "No se necesitan placas de continuidad" + vbCr + " " + vbCr + "El espesor del patín de la columna es adecuado para soportar la flexión"
                TextBox160.Enabled = False
            End If

            'El calculo del patin req para columna rigidizada se realiza en 
            'el evento KeyPress del TextBox160

            'Calculo de Resistencia a fluencia local del alma
            Dim Rfalma, Ct As Double
            If ComboBox2.SelectedItem = "Si" Then
                Ct = 0.5
            Else
                Ct = 1
            End If
            Dim kc As Double
            consKdes(TextBox1.Text)
            kc = Val(kdes)
            Rfalma = Math.Round(Ct * (6 * kc + tbf + 2 * tp) * Fycol * twc, 2)
            TextBox117.Text = Rfalma.ToString
            If Rfalma < Ffu Then
                TextBox117.BackColor = Color.Red
                Label277.Text = "Se necesitan placas de continuidad"
                Label277.BackColor = Color.SteelBlue
                Label277.Cursor = Cursors.Hand
            Else
                TextBox117.BackColor = Color.WhiteSmoke
                Label277.Text = "No se necesitan placas de continuidad"
                Label277.BackColor = Color.Transparent
                Label277.Cursor = Cursors.Default
            End If

            'Calculo de Resistencia a pandeo del alma
            Dim Rpalma, h As Double
            Dim h_tw As Double = Val(InstSecc.TextBox9.Text)
            h = h_tw * twc
            Rpalma = Math.Round(0.75 * 24 * (twc ^ 3) * Math.Sqrt(29000 * Fycol) / h, 2)
            TextBox153.Text = Rpalma.ToString
            If Rpalma < Ffu Then
                TextBox153.BackColor = Color.Red
                Label281.Text = "Se necesitan placas de continuidad"
                Label281.BackColor = Color.SteelBlue
                Label281.Cursor = Cursors.Hand
            Else
                TextBox153.BackColor = Color.WhiteSmoke
                Label281.Text = "No se necesitan placas de continuidad"
                Label281.BackColor = Color.Transparent
                Label281.Cursor = Cursors.Default
            End If

            'Calculo de Resistencia a aplastamiento del alma
            Dim Rapalma, FactorN, N As Double
            N = tbf + 0.625
            If ComboBox2.SelectedItem = "No" Then
                FactorN = 3 * N / dcol
                Rapalma = 0.8 * (twc ^ 2) * (1 + (FactorN * ((twc / tfc) ^ 1.5))) * Math.Sqrt(29000 * Fycol * tfc / twc)
            Else
                If N / dcol <= 0.2 Then
                    FactorN = 3 * N / dcol
                    Rapalma = 0.4 * (twc ^ 2) * (1 + (FactorN * ((twc / tfc) ^ 1.5))) * Math.Sqrt(29000 * Fycol * tfc / twc)
                Else
                    FactorN = (4 * N / dcol) - 0.2
                    Rapalma = 0.4 * (twc ^ 2) * (1 + (FactorN * ((twc / tfc) ^ 1.5))) * Math.Sqrt(29000 * Fycol * tfc / twc)
                End If
            End If
            Dim Rapalma_red As Double
            Rapalma_red = Math.Round(0.75 * Rapalma, 2)
            TextBox152.Text = Rapalma_red.ToString
            If Rapalma_red < Ffu Then
                TextBox152.BackColor = Color.Red
                Label284.Text = "Se necesitan placas de continuidad"
                Label284.BackColor = Color.SteelBlue
                Label284.Cursor = Cursors.Hand
            Else
                TextBox152.BackColor = Color.WhiteSmoke
                Label284.Text = "No se necesitan placas de continuidad"
                Label284.BackColor = Color.Transparent
                Label284.Cursor = Cursors.Default
            End If

            'Dado el caso que sean necesarias las placas de continuidad
            'Determinar la resistencia minima de diseño
            If Rfpatinc <> 0 Then
                RnPLcont = Math.Min(Math.Min(Rfpatinc, Rfalma), Math.Min(Rpalma, Rapalma_red))
            Else
                RnPLcont = Math.Min(Rfalma, Math.Min(Rpalma, Rapalma_red))
            End If

        End If


        'BSEEP
        If LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida Rigidizada" Then
            ToolTip1.SetToolTip(GroupBox8, "AISC 358 - 10 6.4")
            ToolTip1.SetToolTip(GroupBox10, "AISC 358 - 10 6.5")
            ToolTip1.SetToolTip(GroupBox34, "AISC 358 - 10 6.6")
            ToolTip1.SetToolTip(GroupBox33, "AISC 358 - 10 6.6")
            TextBox14.Visible = False
            TextBox138.Visible = True
            Label23.Location = New Point(148, 36)
            PictureBox22.Visible = False
            PictureBox24.Visible = False
            PictureBox31.Visible = False
            Label34.Text = "No hay límite de peso"    'limite de peso de la viga
            TextBox16.BackColor = Color.WhiteSmoke
            Label34.Location = New Point(148, 70)
            Label35.Location = New Point(148, 105)
            Label262.Text = tfc.ToString + " in"
            Label273.Text = tfc.ToString + " in"
            GroupBox67.Visible = True
            GroupBox67.BringToFront()
            PictureBox138.Visible = True
            TextBox137.Visible = True
            Label227.Visible = True
            Label36.Text = "7"      'limite relacion claro/peralte
            If LD < 7 Then          'relacion claro/peralte
                TextBox18.BackColor = Color.Red
            Else
                TextBox18.BackColor = Color.WhiteSmoke
            End If
            Label24.Text = "W36"

            'Relación ancho-espesor Viga ---->>AÑADIDO AQUÍ PORQUE PARA RBS PUEDE SER DIFERENTE
            TextBox10.Text = relpatinVig.ToString
            If relpatinVig > ductVigPatin Then
                TextBox10.BackColor = Color.Red
            Else
                TextBox10.BackColor = Color.WhiteSmoke
            End If

            'CASOS ESPECIALES DE CHEKEO
            'Y...
            '______________________________________
            'CALCULOS DE DISEÑO DE LA CONEXION BSEEP
            '--------------------------------------
            'Mandar datos a los procedimientos
            Dim CprBSEEP, MprBSEEP As Double
            'variables de datos geometricos ingresados
            Dim dperno As String = ComboBox5.Text
            Dim gram As Double = Val(TextBox90.Text)
            Dim bp As Double = Val(TextBox88.Text)
            Dim pfo As Double = Val(TextBox80.Text)
            Dim pfi As Double = Val(TextBox100.Text)
            Dim de As Double = Val(TextBox98.Text)
            Dim Pb As Double = Val(TextBox94.Text)
            Dim Fnt As Integer = Val(TextBox78.Text)
            Dim Fnv As Integer = Val(TextBox84.Text)
            Dim tp As Double = Val(TextBox96.Text)
            Dim Lst As Double = Val(TextBox101.Text)
            Dim hst As Double = Val(TextBox102.Text)
            Dim Fys As Integer = Val(TextBox103.Text)
            Dim ts As Double = Val(TextBox104.Text)

            'Llamado a los procedimientos del Módulo "CalculosDiseno"
            CalcularCpr(Fyviga, Fuviga)
            CprBSEEP = cpr
            CalcMpr(CprBSEEP, zxb, Ryb, Fyviga)
            MprBSEEP = Mpr
            TextBox136.Text = MprBSEEP.ToString

            'Calculo de Sh y Lh
            Dim ShES As Double
            ShES = Lst + tp 'Sh= Lst + tp
            TextBox143.Text = ShES.ToString
            Dim LhBSEEP As Double
            LhBSEEP = Lclaro - dcol - (2 * ShES)  'Lh= L-2(dc/2)-2Sh
            'Llamado al procedimiento: 
            CortanteVh(MprBSEEP, LhBSEEP, Wu)
            Dim Vbseep, Vbseeprima As Double
            Vbseep = Vh
            Vbseeprima = VhPrima
            TextBox144.Text = Vbseep.ToString
            TextBox140.Text = Vbseeprima.ToString

            'Calculo de Vu
            Dim VuBSEEP, Vartp As Double
            'Vartplas=Cortante en la articulacion plastica (EL MAYOR ENTRE VRBS y VRBSprima)
            Vartp = Math.Max(Vbseep, Vbseeprima)
            VuBSEEP = Math.Round(Vartp + (Wu * ShES / 12), 3)
            TextBox142.Text = VuBSEEP.ToString

            'Calculo de Mf
            Mgravedad(Wu, ShES)
            MomentoMf(MprBSEEP, Vartp, ShES)
            Dim MfBSEEP As Double
            MfBSEEP = Mf
            TextBox133.Text = MfBSEEP.ToString

            Dim diamprop As Double = Frac2Num(ComboBox5.Text)
            Dim diamreq, dreq As Double

            'Calculo de Ffu (fuerza factorada en el patin)
            Dim Ffu As Double
            Ffu = Math.Round(MfBSEEP / (dbeam - tbf), 2)
            TextBox149.Text = Ffu.ToString
            Label276.Text = Ffu.ToString + " kip"
            Label280.Text = Ffu.ToString + " kip"
            Label282.Text = Ffu.ToString + " kip"

            'CHEKEO DEL ESPESOR DEL RIGIDIZADOR POR PANDEO (EXCLUSIVO BSEEP)
            Dim RelPandeo, pandMax As Double
            RelPandeo = Math.Round(hst / ts, 2)
            TextBox162.Text = RelPandeo.ToString
            pandMax = Math.Round(0.56 * Math.Sqrt(29000 / Fys), 2)
            TextBox163.Text = pandMax.ToString
            If RelPandeo > pandMax Then
                TextBox162.BackColor = Color.Red
            Else
                TextBox162.BackColor = Color.WhiteSmoke
            End If

            'Diseño de soldaduras
            'Soldadura en el alma de la viga y la placa de extremo
            'Soldad. por Flexion
            Dim Dflex, Dcor, Dtension As Double
            Dflex = Math.Floor((0.6 * Fyviga * twBeam) / (2 * 1.392)) + 1
            'Es necesario verificar el tamaño min de soldadura
            Dim tmenor, dminsold As Double
            tmenor = Math.Min(twBeam, tp)

            If tmenor <= 1 / 4 Then
                dminsold = 1 / 8
            End If

            If tmenor > 1 / 4 And tmenor <= 1 / 2 Then
                dminsold = 3 / 16
            End If

            If tmenor > 1 / 2 And tmenor <= 3 / 4 Then
                dminsold = 1 / 4
            End If

            If tmenor > 3 / 4 Then
                dminsold = 5 / 16
            End If

            If Dflex / 16 < dminsold Then
                Dtension = dminsold * 16
            Else
                Dtension = Dflex
            End If

            'Sold. por Cortante
            'Hay que calcular la longitud efectiva de soldadura lew = min (db/2-tbf; db-2tbf-(pfi + 6 in))
            Dim lew, Dvu As Double
            lew = Math.Min(dbeam / 2 - tbf, dbeam - (2 * tbf) - (pfi + 6))
            Dcor = Math.Floor(VuBSEEP / (2 * 1.392 * lew)) + 1

            If Dcor / 16 < dminsold Then
                Dvu = dminsold * 16
            Else
                Dvu = Dcor
            End If

            Dim SoldAlma As Double
            SoldAlma = Math.Max(Dtension, Dvu)

            TextBox157.Text = SoldAlma.ToString + "/16"

            'Relación de Momentos
            EMpc(Zcol, Fycol, Pucol, Agcol, dbeam)
            TextBox66.Text = SumMpc.ToString    'Mpc 
            EMpb(MprBSEEP, Vbseep, Vbseeprima, ShES, dcol)
            TextBox70.Text = SumMpb.ToString    'Mpb
            'Mpc/Mpb>1
            Dim Rel As Double
            Rel = Math.Round(SumMpc / SumMpb, 2)
            TextBox71.Text = Rel.ToString
            If Rel <= 1 Then
                TextBox71.BackColor = Color.Red
            Else
                TextBox71.BackColor = Color.WhiteSmoke
            End If

            'Calculo de M´f (en caso de haber dos vigas conectadas)
            If ComboBox1.SelectedItem = "2" Then
                MfPrima = Mfdos(MprBSEEP, Vbseeprima, ShES)
            Else
                MfPrima = 0
            End If

            'Calculo de Resistencia a fluencia local del alma
            Dim Rfalma, Ct As Double
            If ComboBox2.SelectedItem = "Si" Then
                Ct = 0.5
            Else
                Ct = 1
            End If
            Dim kc As Double
            consKdes(TextBox1.Text)
            kc = Val(kdes)
            Rfalma = Math.Round(Ct * (6 * kc + tbf + 2 * tp) * Fycol * twc, 2)
            TextBox117.Text = Rfalma.ToString
            If Rfalma < Ffu Then
                TextBox117.BackColor = Color.Red
                Label277.Text = "Se necesitan placas de continuidad"
                Label277.BackColor = Color.SteelBlue
                Label277.Cursor = Cursors.Hand
            Else
                TextBox117.BackColor = Color.WhiteSmoke
                Label277.Text = "No se necesitan placas de continuidad"
                Label277.BackColor = Color.Transparent
                Label277.Cursor = Cursors.Default
            End If

            'Calculo de Resistencia a pandeo del alma
            Dim Rpalma, h As Double
            Dim h_tw As Double = Val(InstSecc.TextBox9.Text)
            h = h_tw * twc
            Rpalma = Math.Round(0.75 * 24 * (twc ^ 3) * Math.Sqrt(29000 * Fycol) / h, 2)
            TextBox153.Text = Rpalma.ToString
            If Rpalma < Ffu Then
                TextBox153.BackColor = Color.Red
                Label281.Text = "Se necesitan placas de continuidad"
                Label281.BackColor = Color.SteelBlue
                Label281.Cursor = Cursors.Hand
            Else
                TextBox153.BackColor = Color.WhiteSmoke
                Label281.Text = "No se necesitan placas de continuidad"
                Label281.BackColor = Color.Transparent
                Label281.Cursor = Cursors.Default
            End If

            'Calculo de Resistencia a aplastamiento del alma
            Dim Rapalma, FactorN, N As Double
            N = tbf + 0.625
            If ComboBox2.SelectedItem = "No" Then
                FactorN = 3 * N / dcol
                Rapalma = 0.8 * (twc ^ 2) * (1 + (FactorN * ((twc / tfc) ^ 1.5))) * Math.Sqrt(29000 * Fycol * tfc / twc)
            Else
                If N / dcol <= 0.2 Then
                    FactorN = 3 * N / dcol
                    Rapalma = 0.4 * (twc ^ 2) * (1 + (FactorN * ((twc / tfc) ^ 1.5))) * Math.Sqrt(29000 * Fycol * tfc / twc)
                Else
                    FactorN = (4 * N / dcol) - 0.2
                    Rapalma = 0.4 * (twc ^ 2) * (1 + (FactorN * ((twc / tfc) ^ 1.5))) * Math.Sqrt(29000 * Fycol * tfc / twc)
                End If
            End If
            Dim Rapalma_red As Double
            Rapalma_red = Math.Round(0.75 * Rapalma, 2)
            TextBox152.Text = Rapalma_red.ToString
            If Rapalma_red < Ffu Then
                TextBox152.BackColor = Color.Red
                Label284.Text = "Se necesitan placas de continuidad"
                Label284.BackColor = Color.SteelBlue
                Label284.Cursor = Cursors.Hand
            Else
                TextBox152.BackColor = Color.WhiteSmoke
                Label284.Text = "No se necesitan placas de continuidad"
                Label284.BackColor = Color.Transparent
                Label284.Cursor = Cursors.Default
            End If

            Dim Rfpatinc As Double = 0

            If ComboBox3.SelectedItem = "4ES" Then
                'CHEKEOS
                PictureBox160.Image = My.Resources.PlacadeExtremo4ES
                TextBox155.Location = New Point(648, 221)
                TextBox156.Location = New Point(437, 391)
                TextBox157.Location = New Point(647, 268)
                TextBox158.Visible = False
                TextBox159.Visible = False
                'Peralte de la viga
                Label23.Text = "(13 3/4 in - 24 in)"
                Dim Okperalte As Integer '(igual a 0 si NO cumple, igual a 1 SI CUMPLE)
                If dbeam < 13.75 Or dbeam > 24 Then
                    Okperalte = 0
                Else
                    Okperalte = 1
                End If
                If ComboBox8.SelectedItem = "No" Then
                    ToolTip1.SetToolTip(TextBox138, "Peralte de la sección de la viga")
                    If Okperalte = 0 Then
                        TextBox138.BackColor = Color.Red
                    Else
                        TextBox138.BackColor = Color.WhiteSmoke
                    End If
                Else
                    ToolTip1.SetToolTip(TextBox138, "Debido a la presencia de la losa, el peralte de la viga no debe ser menor a 24 in")
                    If Okperalte = 1 And dbeam >= 24 Then
                        TextBox138.BackColor = Color.WhiteSmoke
                    Else
                        TextBox138.BackColor = Color.Red
                    End If
                End If
                'Patin de la viga 
                '(Para 4ES entre 3/8 a 3/4)
                Label35.Text = "(3/8 in - 3/4 in)"     'limite de tbf de la viga
                If tbf < 0.375 Or tbf > 0.75 Then      'chekeo del patin de la viga para 4ES
                    TextBox17.BackColor = Color.Red
                Else
                    TextBox17.BackColor = Color.WhiteSmoke
                End If

                'Ancho del patin de la viga bf
                'Para 4ES entre 6"-9"
                Label227.Text = "(6 in - 9 in)"     'limite de bf de la viga
                If bbf < 6 Or bbf > 9 Then
                    TextBox137.BackColor = Color.Red
                Else
                    TextBox137.BackColor = Color.WhiteSmoke
                End If

                ToolTip1.SetToolTip(TextBox151, "Estado límite de desgarre")
                Label261.Location = New Point(235, 101)
                TextBox166.Visible = False

                '+++++++++++
                'DISEÑO 4ES
                '-----------
                Dim h0, h14ES As Double
                h0 = dbeam - (tbf / 2) + pfo
                h14ES = dbeam - (1.5 * tbf) - pfi

                'Calculo del diametro requerido
                diamreq = Math.Sqrt(2 * MfBSEEP / (Math.PI * 0.9 * Fnt * (h0 + h14ES)))
                dreq = Math.Round(diamreq, 3)
                TextBox77.Text = dreq.ToString
                If diamprop < diamreq Then
                    ComboBox5.BackColor = Color.Red
                Else
                    ComboBox5.BackColor = Color.White
                End If

                'Calculo del espesor de placa requerido
                Dim s, Yp, p, tpreq As Double
                'p= será la variable que funcione como pfi, o dado el caso como s
                s = 1 / 2 * Math.Sqrt(bp * gram)
                If pfi > s Then
                    p = s
                Else
                    p = pfi
                End If
                If de <= s Then
                    Yp = Math.Round(bp / 2 * (h14ES * (1 / p + 1 / s) + h0 / pfo + h0 / (2 * s)) + 2 / gram * (h14ES * (p + s) + h0 * (de + pfo)), 2)
                Else
                    Yp = Math.Round(bp / 2 * (h14ES * (1 / p + 1 / s) + h0 / s + h0 / pfo) + 2 / gram * (h14ES * (p + s) + h0 * (s + pfo)), 2)
                End If

                tpreq = Math.Round(Math.Sqrt(1.11 * MfBSEEP / (Fypl * Yp)), 3)
                TextBox95.Text = tpreq.ToString
                If tpreq > Val(TextBox96.Text) Then
                    TextBox96.BackColor = Color.Red
                Else
                    TextBox96.BackColor = Color.White
                End If

                'Revision Ruptura de los pernos
                Dim Rrupb, Ab As Double
                Ab = Math.PI * (diamprop ^ 2) / 4
                Rrupb = Math.Round(0.9 * 4 * Fnv * Ab, 2)
                TextBox147.Text = Rrupb.ToString
                If Rrupb < VuBSEEP Then
                    TextBox147.BackColor = Color.Red
                Else
                    TextBox147.BackColor = Color.WhiteSmoke
                End If

                'Revision aplastamiento/desgarre pernos
                Dim Oval, dis_c, Lc, Desg As Double
                Oval = Math.Round(2.4 * diamprop * tp * Fup)
                TextBox146.Text = Oval.ToString
                'Lc (para 4E y 4ES)
                'Calculo de distancia c = pfo + tfb + pfi
                dis_c = pfo + tbf + pfi
                Lc = dis_c - diamprop - 1 / 16
                TextBox156.Text = Lc.ToString

                Desg = Math.Round(1.2 * Lc * tp * Fup)
                TextBox151.Text = Desg.ToString
                Dim Rapl_desg As Double
                Rapl_desg = Math.Round(0.9 * ((2 * Oval) + (2 * Math.Min(Oval, Desg))), 2)
                TextBox150.Text = Rapl_desg.ToString
                If Rapl_desg < VuBSEEP Then
                    TextBox150.BackColor = Color.Red
                Else
                    TextBox150.BackColor = Color.WhiteSmoke
                End If

                Dim Rapl_patin As Double
                Rapl_patin = Math.Round(Rapl_desg * (tfc / tp) * (Fypl / Fycol), 2)
                TextBox154.Text = Rapl_patin.ToString
                If Rapl_patin < VuBSEEP Then
                    TextBox154.BackColor = Color.Red
                Else
                    TextBox154.BackColor = Color.WhiteSmoke
                End If

                'DISEÑO DEL LADO DE LA COLUMNA
                'Calculo de patin requerido sin rigidizar
                Dim sc, Yc, c As Double
                c = dis_c
                sc = 0.5 * (Math.Sqrt(bcf * gram))
                'Yc sin rigidizar (4E & 4ES)
                Yc = Math.Round(bcf / 2 * (h14ES / sc + h0 / sc) + 2 / gram * (h14ES * (sc + (3 * c / 4)) + h0 * (sc + c / 4) + (0.5 * c ^ 2)) + gram / 2, 2)

                Dim patin_req As Double
                patin_req = Math.Round(Math.Sqrt(1.11 * MfBSEEP / (Fycol * Yc)), 3)
                TextBox141.Text = patin_req.ToString
                If tfc < patin_req Then
                    TextBox141.BackColor = Color.Red
                    Label269.BackColor = Color.SteelBlue
                    Label269.Font = New Font("Lucida Fax", 8.25, FontStyle.Bold)
                    Label269.Font = New Font(Label269.Font, FontStyle.Italic)
                    Label269.Text = "Se necesitan placas de continuidad" + vbCr + " " + vbCr + "Aumentar el tamaño de la sección de la columna, o usar placas de continuidad."
                    TextBox160.Enabled = True

                    'Calculo de la Resistencia PhiRn
                    Rfpatinc = Math.Round(Fycol * Yc * (tfc ^ 2) / (dcol - tbf), 2)

                Else
                    TextBox141.BackColor = Color.WhiteSmoke
                    Label269.BackColor = Color.Transparent
                    Label269.Font = New Font("Microsoft Sans Serift", 8.25, FontStyle.Regular)
                    Label269.Text = "No se necesitan placas de continuidad" + vbCr + " " + vbCr + "El espesor del patín de la columna es adecuado para soportar la flexión"
                    TextBox160.Enabled = False
                End If

                'El calculo del patin req para columna rigidizada se realiza en 
                'el evento KeyPress del TextBox160



            ElseIf ComboBox3.SelectedItem = "8ES" Then
                'CHEKEOS
                PictureBox160.Image = My.Resources.PlacadeExtremoOcho
                TextBox155.Location = New Point(636, 216)
                TextBox156.Location = New Point(433, 367)
                TextBox157.Location = New Point(636, 257)
                TextBox158.Visible = True
                TextBox159.Visible = True
                'Peralte de la viga
                Label23.Text = "(18 in - 36 in)"
                Dim Okperalte2 As Integer '(igual a 0 si NO cumple, igual a 1 SI CUMPLE)
                If dbeam < 18 Or dbeam > 36 Then
                    Okperalte2 = 0
                Else
                    Okperalte2 = 1
                End If
                If ComboBox8.SelectedItem = "No" Then
                    ToolTip1.SetToolTip(TextBox138, "Peralte de la sección de la viga")
                    If Okperalte2 = 0 Then
                        TextBox138.BackColor = Color.Red
                    Else
                        TextBox138.BackColor = Color.WhiteSmoke
                    End If
                Else
                    ToolTip1.SetToolTip(TextBox138, "Debido a la presencia de la losa, el peralte de la viga no debe ser menor a 24 in")
                    If Okperalte2 = 1 And dbeam >= 24 Then
                        TextBox138.BackColor = Color.WhiteSmoke
                    Else
                        TextBox138.BackColor = Color.Red
                    End If
                End If


                'PAtin de la viga 
                '(Para 8ES entre 9/16 a 1)
                Label35.Text = "(9/16 in - 1 in)"   'limite de tbf de la viga
                If tbf < 9 / 16 Or tbf > 1 Then      'chekeo del patin de la viga para 8ES
                    TextBox17.BackColor = Color.Red
                Else
                    TextBox17.BackColor = Color.WhiteSmoke
                End If

                'Ancho del patin de la viga bf
                'Para 8ES entre 7 1/2"-12 1/4"
                Label227.Text = "(7 1/2 in - 12 1/4 in)"     'limite de bf de la viga
                If bbf < 7.5 Or bbf > 12.25 Then
                    TextBox137.BackColor = Color.Red
                Else
                    TextBox137.BackColor = Color.WhiteSmoke
                End If

                ToolTip1.SetToolTip(TextBox151, "Desgarre sobre la distancia c")
                Label261.Location = New Point(273, 101)
                TextBox166.Visible = True
                TextBox166.Location = New Point(238, 98)


                '+++++++++++
                'DISEÑO 8ES
                '-----------
                Dim h18ES, h2, h3, h4 As Double
                h18ES = dbeam - (tbf / 2) + pfo + Pb
                h2 = dbeam - (tbf / 2) + pfo
                h3 = dbeam - (1.5 * tbf) - pfi
                h4 = dbeam - (1.5 * tbf) - pfi - Pb

                'Calculo del diametro requerido
                diamreq = Math.Sqrt(2 * MfBSEEP / (Math.PI * 0.9 * Fnt * (h18ES + h2 + h3 + h4)))
                dreq = Math.Round(diamreq, 3)
                TextBox77.Text = dreq.ToString
                If diamprop < diamreq Then
                    ComboBox5.BackColor = Color.Red
                Else
                    ComboBox5.BackColor = Color.White
                End If

                'Calculo del espesor de placa requerido
                Dim s, Yp, p, tpreq As Double
                'p= será la variable que funcione como pfi, o dado el caso como s
                s = 1 / 2 * Math.Sqrt(bp * gram)
                If pfi > s Then
                    p = s
                Else
                    p = pfi
                End If
                If de <= s Then
                    Yp = Math.Round(bp / 2 * (h18ES / (2 * de) + h2 / pfo + h3 / p + h4 / s) + 2 / gram * (h18ES * (de + Pb / 4) + h2 * (pfo + (0.75 * Pb)) + h3 * (p + Pb / 4) + h4 * (s + (0.75 * Pb)) + (Pb ^ 2)) + gram, 2)
                Else
                    Yp = Math.Round(bp / 2 * (h18ES / s + h2 / pfo + h3 / p + h4 / s) + 2 / gram * (h18ES * (s + Pb / 4) + h2 * (pfo + (0.75 * Pb)) + h3 * (p + Pb / 4) + h4 * (s + (0.75 * Pb)) + (Pb ^ 2)) + gram, 2)
                End If

                tpreq = Math.Round(Math.Sqrt(1.11 * MfBSEEP / (Fypl * Yp)), 3)
                TextBox95.Text = tpreq.ToString
                If tpreq > Val(TextBox96.Text) Then
                    TextBox96.BackColor = Color.Red
                Else
                    TextBox96.BackColor = Color.White
                End If

                'Revision Ruptura de los pernos
                Dim Rrupb, Ab As Double
                Ab = Math.PI * (diamprop ^ 2) / 4
                Rrupb = Math.Round(0.9 * 8 * Fnv * Ab, 2)
                TextBox147.Text = Rrupb.ToString
                If Rrupb < VuBSEEP Then
                    TextBox147.BackColor = Color.Red
                Else
                    TextBox147.BackColor = Color.WhiteSmoke
                End If

                'Revision aplastamiento/desgarre pernos
                Dim Oval, dis_c, Lcxc, LcxPb, Desgxc, DesgxPb As Double
                Oval = Math.Round(2.4 * diamprop * tp * Fup)
                TextBox146.Text = Oval.ToString

                'Calculo de distancia c = pfo + tfb + pfi
                dis_c = pfo + tbf + pfi
                'Lc (8ES) en base a la distancia 'c'
                Lcxc = dis_c - diamprop - 1 / 16
                TextBox156.Text = Lcxc.ToString
                Desgxc = Math.Round(1.2 * Lcxc * tp * Fup)
                TextBox151.Text = Desgxc.ToString
                'Lc (8ES) en base a la distancia 'Pb'
                LcxPb = Pb - diamprop - 1 / 16
                TextBox158.Text = LcxPb.ToString
                TextBox159.Text = LcxPb.ToString
                DesgxPb = Math.Round(1.2 * LcxPb * tp * Fup)
                TextBox166.Text = DesgxPb.ToString


                Dim Rapl_desg As Double
                Rapl_desg = Math.Round(0.9 * ((2 * Oval) + (2 * Math.Min(Oval, Desgxc)) + (4 * Math.Min(Oval, DesgxPb))), 2)
                TextBox150.Text = Rapl_desg.ToString
                If Rapl_desg < VuBSEEP Then
                    TextBox150.BackColor = Color.Red
                Else
                    TextBox150.BackColor = Color.WhiteSmoke
                End If

                Dim Rapl_patin As Double
                Rapl_patin = Math.Round(Rapl_desg * (tfc / tp) * (Fypl / Fycol), 2)
                TextBox154.Text = Rapl_patin.ToString
                If Rapl_patin < VuBSEEP Then
                    TextBox154.BackColor = Color.Red
                Else
                    TextBox154.BackColor = Color.WhiteSmoke
                End If

                'DISEÑO DEL LADO DE LA COLUMNA
                'Calculo de patin requerido sin rigidizar
                Dim sc, Yc, c As Double
                c = dis_c
                sc = 0.5 * (Math.Sqrt(bcf * gram))
                'Yc sin rigidizar (8ES)
                Yc = Math.Round(bcf / 2 * (h18ES / sc + h4 / sc) + 2 / gram * (h18ES * (Pb + sc + c / sc) + h2 * (Pb / 2 + c / 4) + h3 * (Pb / 2 + c / 2) + h4 * sc) + gram / 2, 2)

                Dim patin_req As Double
                patin_req = Math.Round(Math.Sqrt(1.11 * MfBSEEP / (Fycol * Yc)), 3)
                TextBox141.Text = patin_req.ToString
                If tfc < patin_req Then
                    TextBox141.BackColor = Color.Red
                    Label269.BackColor = Color.SteelBlue
                    Label269.Font = New Font("Lucida Fax", 8.25, FontStyle.Bold)
                    Label269.Font = New Font(Label269.Font, FontStyle.Italic)
                    Label269.Text = "Se necesitan placas de continuidad" + vbCr + " " + vbCr + "Aumentar el tamaño de la sección de la columna, o usar placas de continuidad."
                    TextBox160.Enabled = True

                    'Calculo de la Resistencia PhiRn
                    Rfpatinc = Math.Round(Fycol * Yc * (tfc ^ 2) / (dcol - tbf), 2)

                Else
                    TextBox141.BackColor = Color.WhiteSmoke
                    Label269.BackColor = Color.Transparent
                    Label269.Font = New Font("Microsoft Sans Serift", 8.25, FontStyle.Regular)
                    Label269.Text = "No se necesitan placas de continuidad" + vbCr + " " + vbCr + "El espesor del patín de la columna es adecuado para soportar la flexión"
                    TextBox160.Enabled = False
                End If

                'El calculo del patin req para columna rigidizada se realiza en 
                'el evento KeyPress del TextBox160


            End If

            'Dado el caso que sean necesarias las placas de continuidad
            'Determinar la resistencia minima de diseño
            If Rfpatinc <> 0 Then
                RnPLcont = Math.Min(Math.Min(Rfpatinc, Rfalma), Math.Min(Rpalma, Rapalma_red))
            Else
                RnPLcont = Math.Min(Rfalma, Math.Min(Rpalma, Rapalma_red))
            End If


            'MOSTRAR TABPAGE DE DISEÑO DE BSEEP/OCULTAR LOS DEMAS TABPAGES
            If TabControlJ1.TabPages.Contains(TabPage5) = False Then
                TabControlJ1.TabPages.Insert(1, TabPage5)
                TabControlJ1.TabPages.Remove(TabPage2)
                TabControlJ1.TabPages.Remove(TabPage6)
                TabControlJ1.TabPages.Remove(TabPage7)
            Else
                TabControlJ1.TabPages.Remove(TabPage2)
                TabControlJ1.TabPages.Remove(TabPage6)
                TabControlJ1.TabPages.Remove(TabPage7)
            End If

        End If


        'BFP
        If LabelDiseño.Text = "Conexión de Momento con Placa de Patín Empernada" Then
            ToolTip1.SetToolTip(GroupBox8, "AISC 358 - 10 7.3.1")
            ToolTip1.SetToolTip(GroupBox10, "AISC 358 - 10 7.3.2")
            ToolTip1.SetToolTip(GroupBox34, "AISC 358 - 10 7.4")
            ToolTip1.SetToolTip(GroupBox33, "AISC 358 - 10 7.4")
            ToolTip1.SetToolTip(TextBox138, "Peralte de la sección de la viga")
            TextBox14.Visible = True
            TextBox138.Visible = False
            Label34.Text = "150"    'limite de peso de la viga
            Label34.Location = New Point(165, 70)
            Label35.Location = New Point(165, 105)
            Label35.Text = "1 in"   'limite de tbf de la viga
            Label36.Text = "9"      'limite relacion claro/peralte
            PictureBox22.Visible = True
            PictureBox24.Visible = True
            PictureBox31.Visible = True
            PictureBox138.Visible = False
            TextBox137.Visible = False
            Label227.Visible = False
            Label23.Text = "W36"    'limite de peralte de la viga
            Label23.Location = New Point(165, 36)
            If LD < 9 Then          'relacion claro/peralte
                TextBox18.BackColor = Color.Red
            Else
                TextBox18.BackColor = Color.WhiteSmoke
            End If
            If tbf > 1 Then      'chekeo del patin de la viga
                TextBox17.BackColor = Color.Red
            Else
                TextBox17.BackColor = Color.WhiteSmoke
            End If
            If peso > 150 Then   'chekeo del peso de la viga
                TextBox16.BackColor = Color.Red
            Else
                TextBox16.BackColor = Color.WhiteSmoke
            End If

            'LIMITE MÁXIMO DEL PERALTE DE LA COLUMNA EN DEPENDENCIA SI EXISTE UNA LOSA
            If ComboBox8.SelectedItem = "No" Then
                Label24.Text = "W14"
            Else
                Label24.Text = "W36"
            End If

            'Relación ancho-espesor Viga ---->>AÑADIDO AQUÍ PORQUE PARA RBS PUEDE SER DIFERENTE
            TextBox10.Text = relpatinVig.ToString
            If relpatinVig > ductVigPatin Then
                TextBox10.BackColor = Color.Red
            Else
                TextBox10.BackColor = Color.WhiteSmoke
            End If

            '______________________________________
            'CALCULOS DE DISEÑO DE LA CONEXION BFP
            '--------------------------------------
            'Mandar datos a los procedimientos
            Dim tp As Double = Val(TextBox118.Text)
            Dim bfp As Double = Val(TextBox116.Text)
            Dim S1 As Double = Val(TextBox128.Text)
            Dim g As Double = Val(TextBox113.Text)
            Dim paso As Double = Val(TextBox130.Text)
            Dim n As Double = Val(TextBox135.Text)
            Dim Levpl As Double = Val(TextBox120.Text)  'Levpl = Lev en la placa (pl) de patín
            Dim Levf As Double = Val(TextBox110.Text)   'Levf = Lev en el patin (flange)
            Dim Lehpl As Double = Val(TextBox121.Text)  'Lehpl = Leh en la placa (pl) de patín
            Dim Lehf As Double = Val(TextBox111.Text)   'Lehf = Leh en el patin (flange)

            Dim LhBFP, MprBFP, MfBFP As Double
            Dim SH As Double = Val(TextBox127.Text)
            LhBFP = Lclaro - dcol - (2 * SH)  'Lh= L-2(dc/2)-2Sh

            CalcularCpr(Fyviga, Fuviga)
            Dim CprBFP As Double = cpr
            CalcMpr(CprBFP, zxb, Ryb, Fyviga)
            MprBFP = Mpr
            TextBox168.Text = MprBFP.ToString

            'Llamado al procedimiento: 
            CortanteVh(MprBFP, LhBFP, Wu)
            Dim VhBFP, VhBFPprima As Double
            VhBFP = Vh
            VhBFPprima = VhPrima
            TextBox172.Text = VhBFP.ToString
            TextBox169.Text = VhBFPprima.ToString

            'Calculo de Vu
            Dim VuBFP, Vartp As Double
            'Vartplas=Cortante en la articulacion plastica (EL MAYOR ENTRE VRBS y VRBSprima)
            Vartp = Math.Max(VhBFP, VhBFPprima)
            VuBFP = Math.Round(Vartp + (Wu * SH / 12), 3)
            TextBox170.Text = VuBFP.ToString
            Label321.Text = VuBFP.ToString + " kip"

            'Calculo de Vn de la Viga
            Dim VnBFP As Double
            VnBFP = Math.Round(0.6 * Fyviga * dbeam * twBeam, 3)
            TextBox171.Text = VnBFP.ToString
            If VnBFP < VuBFP Then
                TextBox170.BackColor = Color.Red
            Else
                TextBox170.BackColor = Color.WhiteSmoke
            End If

            'Calculo de Mf
            Mgravedad(Wu, SH)
            MomentoMf(MprBFP, Vartp, SH)
            MfBFP = Mf
            TextBox167.Text = MfBFP.ToString


            'Relación de Momentos
            EMpc(Zcol, Fycol, Pucol, Agcol, dbeam)
            TextBox66.Text = SumMpc.ToString    'Mpc 
            EMpb(MprBFP, VhBFP, VhBFPprima, SH, dcol)
            TextBox70.Text = SumMpb.ToString    'Mpb
            'Mpc/Mpb>1
            Dim Rel As Double
            Rel = Math.Round(SumMpc / SumMpb, 2)
            TextBox71.Text = Rel.ToString
            If Rel <= 1 Then
                TextBox71.BackColor = Color.Red
            Else
                TextBox71.BackColor = Color.WhiteSmoke
            End If

            'Calculo de M´f (en caso de haber dos vigas conectadas)
            If ComboBox1.SelectedItem = "2" Then
                MfPrima = Mfdos(MprBFP, VhBFPprima, SH)
            Else
                MfPrima = 0
            End If

            'Calculo de Fpr
            Dim Fpr As Double
            Fpr = Math.Round(MfBFP / (dbeam + tp), 2)
            TextBox173.Text = Fpr.ToString

            'Chekeo del Numero de pernos seleccionados
            Dim Ab, db As Double
            db = Frac2Num(ComboBox7.SelectedValue.ToString)
            Ab = Math.PI * (db ^ 2) / 4

            Dim r1, r2, r3, rnbolts As Double
            r1 = 84 * Ab
            r2 = 2.4 * Fuviga * db * tbf
            r3 = 2.4 * Fup * db * tp

            rnbolts = Math.Min(Math.Min(r1, r2), r3)

            Dim Nbolts As Integer
            Nbolts = Math.Floor(Fpr / (0.9 * rnbolts)) + 1
            'Es necesario redondear 'n' al siguiente número par superior
            If Nbolts Mod 2 = 0 Then
                Nbolts = Nbolts
            Else
                Nbolts = Nbolts + 1
            End If

            TextBox174.Text = Nbolts.ToString
            If Nbolts <> n Then
                TextBox174.BackColor = Color.Red
            Else
                TextBox174.BackColor = Color.WhiteSmoke
            End If

            'Chekeo del Espesor de la placa de patin
            Dim tpMayoIgu As Double
            tpMayoIgu = Math.Round(Fpr / (Fypl * bfp), 3)
            TextBox175.Text = tpMayoIgu.ToString
            If tp < tpMayoIgu Then
                TextBox175.BackColor = Color.Red
            Else
                TextBox175.BackColor = Color.WhiteSmoke
            End If

            'Chekeo de la placa de patin por ruptura por tension
            Dim Ae, Ag As Double 'OJO->Ag ya incluirá el 8.85
            Dim dh As Double
            If ComboBox9.SelectedItem = "STD" Then 'condicional para saber que dh buscar en la BD
                dh = db + 1 / 16
            Else
                consultaPernos3(ComboBox7.Text)
                dh = Val(dhOVS)
            End If
            Ae = tp * (bfp - 2 * (dh + 1 / 16))
            Ag = 0.85 * bfp * tp

            Dim AeMuestra, AgMuestra As Double
            AeMuestra = Math.Round(Ae, 2)
            TextBox180.Text = AeMuestra.ToString
            AgMuestra = Math.Round(Ag, 2)
            TextBox181.Text = AgMuestra.ToString

            If Ae > Ag Then
                TextBox180.BackColor = Color.Red
            Else
                TextBox180.BackColor = Color.WhiteSmoke
            End If

            'Resistencia a la ruptura de la placa de patín a la tensión
            Dim RnTension As Double
            RnTension = Math.Round(0.9 * Fup * Ae, 2)
            TextBox176.Text = RnTension.ToString
            If RnTension < Fpr Then
                TextBox176.BackColor = Color.Red
            Else
                TextBox176.BackColor = Color.WhiteSmoke
            End If

            'Chekeo de la placa de patin por pandeo a compresion
            Dim KLr, RnComp As Double
            KLr = 0.65 * S1 / (tp / Math.Sqrt(12))

            If KLr <= 25 Then
                RnComp = Math.Round(0.9 * Fypl * tp * bfp, 2)
            Else 'KLr>25 Rncomp conforme al capituloE de las Especificaciones
                Dim Fcr, Fe, FyFe As Double
                Fe = (Math.PI ^ 2) * 29000 / (KLr ^ 2)
                FyFe = Fypl / Fe
                If FyFe <= 2.25 Then
                    Fcr = Fypl * Math.Pow(0.658, FyFe)
                Else
                    Fcr = 0.877 * Fe
                End If
                RnComp = Math.Round(0.9 * Fcr * tp * bfp, 2)
            End If
            TextBox179.Text = RnComp.ToString
            If RnComp < Fpr Then
                TextBox179.BackColor = Color.Red
            Else
                TextBox179.BackColor = Color.WhiteSmoke
            End If

            'Chekeo del bloque de cortante en la placa de patin
            'Caso 1 (Un bloque desprendido en medio de ambas filas de pernos)
            Dim Ant1, Agv1, Anv1 As Double
            Ant1 = tp * (g - dh - 1 / 16)
            Agv1 = 2 * tp * (Levpl + paso * (n / 2 - 1))
            Anv1 = Agv1 - (2 * tp * (dh + 1 / 16) * (n / 2 - 0.5))

            Dim Cas1, rn1, rn2 As Double
            'Cas1 = Caso 1, resistencia a bloque de cortante por el 'Caso 1'
            'rn1 = componente de cortante de la fluencia.
            'rn2 = componente de cortante de la ruptura
            rn1 = 0.6 * Fypl * Agv1
            rn2 = 0.6 * Fup * Anv1
            Cas1 = (Fup * Ant1) + Math.Min(rn1, rn2)

            'Caso 2 (Dos bloques desprendidos por el exterior de las filas de pernos)
            Dim Ant2, Cas2 As Double
            Ant2 = tp * (2 * Lehpl - (dh + 1 / 16))
            Cas2 = (Fup * Ant2) + Math.Min(rn1, rn2)
            'NOTA: Aqui rn1 y rn2 son idénticos al Caso 1, pues las áreas en cortante son las mismas

            Dim Rnbloq_pl As Double
            'Rnbloq_pl = Resistencia de Bloque de cortante en la placa de patin
            Rnbloq_pl = Math.Round(0.9 * Math.Min(Cas1, Cas2), 2)
            TextBox177.Text = Rnbloq_pl.ToString
            If Rnbloq_pl < Fpr Then
                TextBox177.BackColor = Color.Red
            Else
                TextBox177.BackColor = Color.WhiteSmoke
            End If

            'Chekeo del bloque de cortante en el Patin de la viga
            Dim Antf, Agvf, Anvf As Double
            Antf = tbf * (2 * Lehf - (db + 1 / 8))
            Agvf = 2 * tbf * (Levf + paso * (n / 2 - 1))
            Anvf = Agvf - (2 * tbf * (n / 2 - 0.5) * (db + 1 / 8))

            Dim Rnbloq_f, rn3, rn4 As Double
            rn3 = 0.6 * Fyviga * Agvf
            rn4 = 0.6 * Fuviga * Anvf
            Rnbloq_f = Math.Round(0.9 * ((Fuviga * Antf) + Math.Min(rn3, rn4)), 2)

            TextBox178.Text = Rnbloq_f.ToString
            If Rnbloq_f < Fpr Then
                TextBox178.BackColor = Color.Red
            Else
                TextBox178.BackColor = Color.WhiteSmoke
            End If


            'MOSTRAR TABPAGE DE DISEÑO DE BUEEP/OCULTAR LOS DEMAS TABPAGES
            If TabControlJ1.TabPages.Contains(TabPage6) = False Then
                TabControlJ1.TabPages.Insert(1, TabPage6)
                TabControlJ1.TabPages.Remove(TabPage2)
                TabControlJ1.TabPages.Remove(TabPage5)
                TabControlJ1.TabPages.Remove(TabPage7)
            Else
                TabControlJ1.TabPages.Remove(TabPage2)
                TabControlJ1.TabPages.Remove(TabPage5)
                TabControlJ1.TabPages.Remove(TabPage7)
            End If

        End If


        'WUF-W
        If LabelDiseño.Text = "Conexión de Momento con Patín Soldado sin refuerzo y Alma Soldada" Then
            ToolTip1.SetToolTip(GroupBox34, "AISC 358 - 10 8.4")
            ToolTip1.SetToolTip(GroupBox33, "AISC 358 - 10 8.4")
            ToolTip1.SetToolTip(GroupBox10, "AISC 358 - 10 8.3.2")
            ToolTip1.SetToolTip(GroupBox8, "AISC 358 - 10 8.3.1")
            ToolTip1.SetToolTip(TextBox138, "Peralte de la sección de la viga")
            Label23.Text = "W36"    'limite de peralte de la viga
            Label23.Location = New Point(165, 36)
            TextBox14.Visible = True
            TextBox138.Visible = False
            PictureBox22.Visible = True
            PictureBox24.Visible = True
            PictureBox31.Visible = True
            PictureBox138.Visible = False
            TextBox137.Visible = False
            Label227.Visible = False
            Label34.Location = New Point(165, 70)
            Label34.Text = "150"    'limite de peso de la viga
            Label35.Location = New Point(165, 105)
            Label35.Text = "1 in"   'limite de tbf de la viga
            Label36.Text = "7"      'limite relacion claro/peralte
            If LD < 7 Then          'relacion claro/peralte
                TextBox18.BackColor = Color.Red
            Else
                TextBox18.BackColor = Color.WhiteSmoke
            End If
            If tbf > 1 Then      'chekeo del patin de la viga
                TextBox17.BackColor = Color.Red
            Else
                TextBox17.BackColor = Color.WhiteSmoke
            End If
            Label24.Text = "W36"
            If peso > 150 Then   'chekeo del peso de la viga
                TextBox16.BackColor = Color.Red
            Else
                TextBox16.BackColor = Color.WhiteSmoke
            End If

            'MOSTRAR TABPAGE DE DISEÑO DE WUF-W/OCULTAR LOS DEMAS TABPAGES
            If TabControlJ1.TabPages.Contains(TabPage7) = False Then
                TabControlJ1.TabPages.Insert(1, TabPage7)
                TabControlJ1.TabPages.Remove(TabPage2)
                TabControlJ1.TabPages.Remove(TabPage5)
                TabControlJ1.TabPages.Remove(TabPage6)
            Else
                TabControlJ1.TabPages.Remove(TabPage2)
                TabControlJ1.TabPages.Remove(TabPage5)
                TabControlJ1.TabPages.Remove(TabPage6)
            End If
            'Relación ancho-espesor Viga ---->>AÑADIDO AQUÍ PORQUE PARA RBS PUEDE SER DIFERENTE
            TextBox10.Text = relpatinVig.ToString
            If relpatinVig > ductVigPatin Then
                TextBox10.BackColor = Color.Red
            Else
                TextBox10.BackColor = Color.WhiteSmoke
            End If


            '______________________________________
            'CALCULOS DE DISEÑO DE LA CONEXION WUF-W
            '--------------------------------------
            'Mandar datos a los procedimientos
            Dim Cpr, MprWUF As Double
            Cpr = 1.4
            CalcMpr(Cpr, zxb, Ryb, Fyviga)
            MprWUF = Mpr
            TextBox194.Text = MprWUF.ToString

            Dim Lhwuf As Double
            Lhwuf = Lclaro - dcol  'Lh= L-2(dc/2): Sh=0
            CortanteVh(MprWUF, Lhwuf, Wu)
            Dim VhWUF, VhWUFprima As Double
            VhWUF = Vh
            VhWUFprima = VhPrima
            TextBox198.Text = VhWUF.ToString
            TextBox196.Text = VhWUFprima.ToString

            'Calculo de Vu
            Dim VuWUF As Double
            'Vartplas=Cortante en la articulacion plastica (EL MAYOR ENTRE VRBS y VRBSprima)
            VuWUF = Math.Max(VhWUF, VhWUFprima)
            TextBox197.Text = VuWUF.ToString

            'Calculo de Vn de la Viga
            Dim VnWUF As Double
            VnWUF = Math.Round(0.6 * Fyviga * dbeam * twBeam, 3)
            TextBox195.Text = VnWUF.ToString
            If VnWUF < VuWUF Then
                TextBox197.BackColor = Color.Red
            Else
                TextBox197.BackColor = Color.WhiteSmoke
            End If

            'Calculo de Mf
            '(Mf es simplemente igual a Mpr)

            'Detalle de conexion del alma
            If TextBox193.Text = "" Then
                TextBox193.Text = Fypl.ToString
            End If
            If TextBox199.Text = "" Then
                TextBox199.Text = InstFys.TextBox10.Text
            End If
            If TextBox200.Text = "" Then
                CalcularPLsimple()
            End If
            Dim Dpl_alma As Double 'Calculo de la soldadura de la placa con el alma
            Dpl_alma = Val(TextBox192.Text) - 1 / 16
            TextBox201.Text = Dpl_alma.ToString

            'Relación de Momentos
            EMpc(Zcol, Fycol, Pucol, Agcol, dbeam)
            TextBox66.Text = SumMpc.ToString    'Mpc 
            EMpb(MprWUF, VhWUF, VhWUFprima, 0, dcol)
            TextBox70.Text = SumMpb.ToString    'Mpb
            'Mpc/Mpb>1
            Dim Rel As Double
            Rel = Math.Round(SumMpc / SumMpb, 2)
            TextBox71.Text = Rel.ToString
            If Rel <= 1 Then
                TextBox71.BackColor = Color.Red
            Else
                TextBox71.BackColor = Color.WhiteSmoke
            End If

            'Calculo de M´f (en caso de haber dos vigas conectadas)
            If ComboBox1.SelectedItem = "2" Then
                MfPrima = MprWUF
            Else
                MfPrima = 0
            End If

        End If

    End Sub

    Private Sub Timer1_Tick(sender As Object, e As EventArgs) Handles Timer1.Tick
        ProgressBar1.Value = ProgressBar1.Value + 4
        If ProgressBar1.Value = 100 Then
            labelStatusBar1.Text = "Cálculos realizado con éxito"
            ProgressBar1.Value = 0
            ProgressBar1.Visible = False
            Timer1.Stop()
            MsgBox("Diseño de conexión realizado satisfactoriamente", MsgBoxStyle.Information, "Cálculos de Diseño")
            labelStatusBar1.Text = "Revise los resultados de diseño y modifique según sea conveniente. Si modifica los Datos Iniciales de la izquierda, vuelva a calcular con F5"
            If Sistema = "SMF" Then
                TabControlJ1.Visible = True
                TabControl1.Visible = False
                TabControl1N.Visible = False
                TabControl2.Visible = False
                TabControl3.Visible = False
                TabControl4.Visible = False
                Precalificacion()
            ElseIf Sistema = "SCBF" Then
                If Tipo = 8 Then
                    TabControl1.Visible = True
                    TabControl1N.Visible = False
                    TabControlJ1.Visible = False
                    TabControl2.Visible = False
                    TabControl3.Visible = False
                    TabControl4.Visible = False
                ElseIf Tipo = 9 Then
                    TabControl1.Visible = False
                    TabControl1N.Visible = False
                    TabControlJ1.Visible = False
                    TabControl2.Visible = True
                    TabControl3.Visible = False
                    TabControl4.Visible = False
                Else
                    TabControl1N.Visible = True
                    TabControl1.Visible = False
                    TabControlJ1.Visible = False
                    TabControl2.Visible = False
                    TabControl3.Visible = False
                    TabControl4.Visible = False
                End If
            ElseIf Sistema = "EBF" Then
                If Tipo = 14 Then
                    TabControl1N.Visible = False
                    TabControl1.Visible = False
                    TabControlJ1.Visible = False
                    TabControl2.Visible = False
                    TabControl3.Visible = True
                    TabControl4.Visible = False
                Else
                    TabControl1N.Visible = True
                    TabControl1.Visible = False
                    TabControlJ1.Visible = False
                    TabControl2.Visible = False
                    TabControl3.Visible = False
                    TabControl4.Visible = False
                End If
            ElseIf Sistema = "BRBF" Then
                TabControl4.Visible = True
                TabControl1N.Visible = False
                TabControl1.Visible = False
                TabControlJ1.Visible = False
                TabControl2.Visible = False
                TabControl3.Visible = False
            End If
        Else

            Cursor.Current = Cursors.WaitCursor
            If ProgressBar1.Value = 40 Then
                labelStatusBar1.Text = "Calculando cargas sísmicas sobre la conexión... "
            End If

        End If

    End Sub

    Private Sub TabControlJ1_SelectedIndexChanged(sender As Object, e As EventArgs) Handles TabControlJ1.SelectedIndexChanged

        If TabControlJ1.SelectedIndex = 3 And GroupBox21.Visible = True Then
            labelStatusBar1.Text = "Revise los resultados de diseño y modifique según sea conveniente. Si modifica los Datos Iniciales de la izquierda, vuelva a calcular con F5"
        ElseIf TabControlJ1.SelectedIndex = 2 And GroupBox15.Visible = True Then
            labelStatusBar1.Text = "Revise los resultados de diseño y modifique según sea conveniente. Si modifica los Datos Iniciales de la izquierda, vuelva a calcular con F5"
        ElseIf TabControlJ1.SelectedIndex = 2 And GroupBox15.Visible = False Then
            labelStatusBar1.Text = "Presione clic izquierdo en cualquier lugar dentro de la pestaña para hacer la revisión de las placas de continuidad"
        ElseIf TabControlJ1.SelectedIndex = 3 And GroupBox21.Visible = False Then
            labelStatusBar1.Text = "Presione clic izquierdo en cualquier lugar dentro de la pestaña para hacer la revisión de la zona de panel nodal"
        Else
            labelStatusBar1.Text = "Revise los resultados de diseño y modifique según sea conveniente. Si modifica los Datos Iniciales de la izquierda, vuelva a calcular con F5"
        End If

    End Sub

    Private Sub Precalificacion()
        'VALOR DEL TEXTBOX PARA EL PERALTE DE LA VIGA EN LOS LIMITES DE PRECALIFICACION

        'DECLARACIÓN DE VARIABLES
        Dim peralte As String = TextBox2.Text
        Dim verificaviga As Integer
        Dim sabertextoW8, sabertextoW6, sabertextoW5, sabertextoW4 As Boolean
        sabertextoW8 = peralte.Contains("W8X")
        sabertextoW6 = peralte.Contains("W6X")
        sabertextoW5 = peralte.Contains("W5X")
        sabertextoW4 = peralte.Contains("W4X")

        'CONDICIONALES PARA ESTABLECER LOS CASOS DONDE SE SELECCIONA UNA SECCION MENOR A "W10"
        'SELECCION DE TEXTO
        If sabertextoW8 = True Or sabertextoW6 = True Then
            TextBox14.Text = Strings.Left(peralte, 2)
        ElseIf sabertextoW5 = True Or sabertextoW4 = True Then
            TextBox14.Text = Strings.Left(peralte, 2)
        Else
            TextBox14.Text = Strings.Left(peralte, 3)
        End If

        'SE HACE LA COMPARACIÓN ENTRE TEXTOS
        verificaviga = StrComp("W36", TextBox14.Text)

        'DEBIDO A QUE W36 ES MENOR A W8, W6, W5 Y W4 SE PLANTEAN LOS CASOS
        If verificaviga = -1 Then
            If sabertextoW8 = True Then
                TextBox14.BackColor = Color.WhiteSmoke

            ElseIf sabertextoW6 = True Then
                TextBox14.BackColor = Color.WhiteSmoke

            ElseIf sabertextoW5 = True Then
                TextBox14.BackColor = Color.WhiteSmoke

            ElseIf sabertextoW4 = True Then
                TextBox14.BackColor = Color.WhiteSmoke

            Else
                TextBox14.BackColor = Color.Red
        End If

        Else
            TextBox14.BackColor = Color.WhiteSmoke
        End If

        'VALOR DEL TEXTBOX PARA EL PERALTE DE LA COLUMNA EN LOS LIMITES DE PRECALIFICACION

        'DECLARACIÓN DE VARIABLES
        Dim dcol As String = TextBox1.Text
        Dim verificaCol As Integer
        Dim sabertextColW8, sabertextColW6, sabertextColW5, sabertextColW4 As Boolean
        sabertextColW8 = dcol.Contains("W8X")
        sabertextColW6 = dcol.Contains("W6X")
        sabertextColW5 = dcol.Contains("W5X")
        sabertextColW4 = dcol.Contains("W4X")
        'mayorOigualaW40 = dcol.Contains("W4")

        'SELECCION DE TEXTO
        If sabertextColW8 = True Or sabertextColW6 = True Then
            TextBox15.Text = Strings.Left(dcol, 2)
        ElseIf sabertextColW5 = True Or sabertextColW4 = True Then
            TextBox15.Text = Strings.Left(dcol, 2)
        Else
            TextBox15.Text = Strings.Left(dcol, 3)
        End If

        'SE HACE LA COMPARACIÓN ENTRE TEXTOS
        If LabelDiseño.Text = "Conexión de Momento con Placa de Patín Empernada" Then
            If ComboBox8.SelectedItem = "No" Then
                verificaCol = StrComp("W14", TextBox15.Text)
            Else
                verificaCol = StrComp("W36", TextBox15.Text)
            End If
        Else
            verificaCol = StrComp("W36", TextBox15.Text)
        End If


        'DEBIDO A QUE W36 ES MENOR A W8, W6, W5 Y W4 SE PLANTEAN LOS CASOS
        If verificaCol = -1 Then
            If sabertextColW8 = True Then
                TextBox15.BackColor = Color.WhiteSmoke

            ElseIf sabertextColW6 = True Then
                TextBox15.BackColor = Color.WhiteSmoke

            ElseIf sabertextColW5 = True Then
                TextBox15.BackColor = Color.WhiteSmoke

            ElseIf sabertextColW4 = True Then
                TextBox15.BackColor = Color.WhiteSmoke

            Else
                TextBox15.BackColor = Color.Red
        End If

        Else
            TextBox15.BackColor = Color.WhiteSmoke
        End If
    End Sub
    '_________________________________
    'CALCULOS DE PLACAS DE CONTINUIDAD
    '---------------------------------

    'Imagen de placa de continuidad segun RadioButton seleccionado
    Private Sub RadioButton9_CheckedChanged(sender As Object, e As EventArgs) Handles RadioButton9.CheckedChanged
        If RadioButton9.Checked Then
            PictureBox7.SendToBack()
            If OpenAnchPl = True Then
                Select Case AnchoPlcont.OpcSelecc
                    Case 0
                        PictureBox7.Image = My.Resources.PlRecto
                        Label232.Text = "Bisel Recto"
                    Case 1
                        PictureBox7.Image = My.Resources.PrectaRED
                        Label232.Text = "Bisel Recto"
                    Case 2
                        PictureBox7.Image = My.Resources.PrectaRED
                        Label232.Text = "Bisel Recto"
                End Select
            Else
                PictureBox7.Image = My.Resources.PlRecto
                Label232.Text = "Bisel Recto"
            End If
        Else
            GoTo Line8
        End If
Line8:
    End Sub

    Private Sub RadioButton10_CheckedChanged(sender As Object, e As EventArgs) Handles RadioButton10.CheckedChanged
        If RadioButton10.Checked Then
            PictureBox7.SendToBack()
            If OpenAnchPl = True Then
                Select Case AnchoPlcont.OpcSelecc
                    Case 0
                        PictureBox7.Image = My.Resources.PlCurvo
                        Label232.Text = "0.5"" radio mín."
                    Case 1
                        PictureBox7.Image = My.Resources.PcurvaRED
                        Label232.Text = "0.5"" radio mín."
                    Case 2
                        PictureBox7.Image = My.Resources.PcurvaRED
                        Label232.Text = "0.5"" radio mín."
                End Select
            Else
                PictureBox7.Image = My.Resources.PlCurvo
                Label232.Text = "0.5"" radio mín."
            End If
        Else
            GoTo Line9
        End If
Line9:
    End Sub


    Private Sub TabPage3_Click(sender As Object, e As EventArgs) Handles TabPage3.Click
        Dim instSecc As Secciones
        Dim tfPatin, tbf, tmin As Double

        instSecc = Secciones.GetSingleton
        tfPatin = Double.Parse(instSecc.TextBox13.Text)
        tbf = Val(instSecc.TextBox6.Text)
        'Datos para Calcular los Recortes
        Dim RecPatin, RecAlma As Double
        Dim Kdetc As Double = Val(instSecc.TextBox18.Text)
        Dim K1col As Double = Val(instSecc.TextBox17.Text)
        Dim twc As Double = Val(instSecc.TextBox14.Text)
        'MsgBox(LimPLcont1.ToString + " " + LimPLcont2.ToString)

        If LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida sin Rigidizar" Or LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida Rigidizada" Then
            Dim CONDICION As String = "No placa"
            Dim opcion As Integer
            If Label269.BackColor = Color.SteelBlue Then
                opcion = 1
            End If
            If Label277.BackColor = Color.SteelBlue Then
                opcion = 2
            End If
            If Label281.BackColor = Color.SteelBlue Then
                opcion = 3
            End If
            If Label284.BackColor = Color.SteelBlue Then
                opcion = 4
            End If

            Select Case opcion
                Case 1
                    CONDICION = "Si placa"
                Case 2
                    CONDICION = "Si placa"
                Case 3
                    CONDICION = "Si placa"
                Case 4
                    CONDICION = "Si placa"
            End Select

            If ComboBox2.SelectedItem = "No" Then
                If CONDICION = "Si placa" Then
                    MsgBox("La sección de la columna no es suficiente ante las demandas de carga de la conexión, por lo tanto las placas de continuidad son necesarias.", MsgBoxStyle.Exclamation, "Revisión")
                    labelStatusBar1.Text = "Revise los resultados de diseño y modifique según sea conveniente. Si modifica los Datos Iniciales de la izquierda, vuelva a calcular con F5"
                    SiPLcont = True
                    GroupBox15.Visible = True
                    GroupBox19.Visible = True
                    GroupBox36.Visible = False
                    Label287.Visible = True
                    Label288.Visible = True
                    Label289.Visible = True
                    TextBox164.Visible = True
                    PictureBox169.Visible = True
                    If ComboBox1.SelectedItem = "1" Then    'calculo del espesor minimo
                        tmin = tbf / 2
                    Else
                        tmin = tbf
                    End If
                    TextBox42.Text = tmin.ToString
                    If TextBox43.Text <> "" Then
                        If Val(TextBox43.Text) < tmin Then
                            TextBox43.BackColor = Color.Red
                        Else
                            TextBox43.BackColor = Color.White
                        End If
                        If Val(TextBox43.Text) <= 3 / 8 Then
                            PictureBox170.Visible = True
                            TextBox165.Visible = True
                            Label290.Visible = True
                            Label291.Text = "Tamaño mínimo de soldadura en 1/16 in"
                            Label75.Text = "La soldadura que une la placa de continuidad con el alma de la columna puede ser de ranura o de filete. El tamaño mínimo proporcionado aquí corresponde a una soldadura de doble lado usando electrodo E70." + vbCr + " " + vbCr + "Puesto que el espesor de la placa de continuidad es menor o igual a 3/8"" se permite una soldadura de filete de doble lado en la unión con los patines de la columna."
                        Else
                            PictureBox170.Visible = False
                            TextBox165.Visible = False
                            Label290.Visible = False
                            Label291.Text = "Usar soldadura de ranura de penetración completa"
                            Label75.Text = "La soldadura que une la placa de continuidad con el alma de la columna puede ser de ranura o de filete. El tamaño mínimo proporcionado aquí corresponde a una soldadura de doble lado usando electrodo E70." + vbCr + " " + vbCr + "Las placas de continuidad deben unirse a los patines de la columna con soldadura CJP."
                        End If
                    Else
                        PictureBox170.Visible = False
                        TextBox165.Visible = False
                        Label290.Visible = False
                        Label291.Text = "Usar soldadura de ranura de penetración completa"
                        Label75.Text = "La soldadura que une la placa de continuidad con el alma de la columna puede ser de ranura o de filete. El tamaño mínimo proporcionado aquí corresponde a una soldadura de doble lado usando electrodo E70." + vbCr + " " + vbCr + "Las placas de continuidad deben unirse a los patines de la columna con soldadura CJP."
                    End If
                    'Recorte en la linea de contacto con el Patin
                    RecPatin = (K1col - twc / 2) + 0.5
                    TextBox39.Text = RecPatin.ToString
                    'Recorte en la linea de contacto con el Alma
                    RecAlma = (Kdetc - tfPatin) + 1.5
                    TextBox46.Text = RecAlma.ToString
                Else
                    MsgBox("No se necesitan placas de continuidad, la sección de la columna es adecuada.", MsgBoxStyle.Information, "Revisión")
                    labelStatusBar1.Text = "Presione clic izquierdo en cualquier lugar dentro de la pestaña para hacer la revisión de las placas de continuidad"
                    SiPLcont = False
                    Label759.Visible = False
                    GroupBox15.Visible = False
                    GroupBox19.Visible = False
                    GroupBox36.Visible = False
                End If
            Else
                MsgBox("La conexión en el extremo de la columna requiere el uso de placas de continuidad en combinación con placa de tapa.", MsgBoxStyle.Information, "Revisión")
                labelStatusBar1.Text = "Revise los resultados de diseño y modifique según sea conveniente. Si modifica los Datos Iniciales de la izquierda, vuelva a calcular con F5"
                SiPLcont = True
                GroupBox15.Visible = True
                GroupBox19.Visible = True
                GroupBox36.Visible = True
                Label287.Visible = False
                Label288.Visible = False
                Label289.Visible = False
                TextBox164.Visible = False
                PictureBox170.Visible = False
                TextBox165.Visible = False
                Label290.Visible = False
                PictureBox169.Visible = False
                Label291.Text = "Usar soldadura de ranura de penetración completa"
                Label75.Text = "La soldadura que une la placa de continuidad con el alma de la columna puede ser de ranura o de filete. El tamaño mínimo proporcionado aquí corresponde a una soldadura de doble lado usando electrodo E70." + vbCr + " " + vbCr + "Las placas de continuidad deben unirse a los patines de la columna con soldadura CJP."
                tmin = tbf
                TextBox42.Text = tmin.ToString  'espesor minimo cuando es una conexion de último piso
                'Recorte en la linea de contacto con el Patin
                RecPatin = (K1col - twc / 2) + 0.5
                TextBox39.Text = RecPatin.ToString
                'Recorte en la linea de contacto con el Alma
                RecAlma = (Kdetc - tfPatin) + 1.5
                TextBox46.Text = RecAlma.ToString
            End If


        Else 'Casos donde la conexion es una RBS, BFP o WUF-W
            If ComboBox2.SelectedItem = "No" Then
                If tfPatin >= LimPLcont1 And tfPatin >= LimPLcont2 Then
                    MsgBox("No se necesitan placas de continuidad, el espesor de " & tfPatin & " pulg. para el patín de la columna es adecuado.", MsgBoxStyle.Information, "Revisión")
                    labelStatusBar1.Text = "Presione clic izquierdo en cualquier lugar dentro de la pestaña para hacer la revisión de las placas de continuidad"
                    SiPLcont = False
                    Label759.Visible = False
                    GroupBox15.Visible = False
                    GroupBox19.Visible = False
                    GroupBox36.Visible = False
                Else
                    MsgBox("Se necesitan placas de continuidad ya que el patín de la columna de " & tfPatin & " in no es adecuado. También puede elegir otra columna con un patín más grande para evitar el uso de placas de continuidad.", MsgBoxStyle.Exclamation, "Revisión")
                    labelStatusBar1.Text = "Revise los resultados de diseño y modifique según sea conveniente. Si modifica los Datos Iniciales de la izquierda, vuelva a calcular con F5"
                    SiPLcont = True
                    GroupBox15.Visible = True
                    GroupBox19.Visible = True
                    GroupBox36.Visible = False
                    Label287.Visible = False
                    Label288.Visible = False
                    Label289.Visible = False
                    TextBox164.Visible = False
                    PictureBox170.Visible = False
                    TextBox165.Visible = False
                    Label290.Visible = False
                    PictureBox169.Visible = False
                    Label291.Text = "Usar soldadura de ranura de penetración completa"
                    Label75.Text = "La soldadura que une la placa de continuidad con el alma de la columna puede ser de ranura o de filete. El tamaño mínimo proporcionado aquí corresponde a una soldadura de doble lado usando electrodo E70." + vbCr + " " + vbCr + "Las placas de continuidad deben unirse a los patines de la columna con soldadura CJP."
                    If ComboBox1.SelectedItem = "1" Then    'calculo del espesor minimo
                        tmin = tbf / 2
                    Else
                        tmin = tbf
                    End If
                    TextBox42.Text = tmin.ToString
                    'Recorte en la linea de contacto con el Patin
                    RecPatin = (K1col - twc / 2) + 0.5
                    TextBox39.Text = RecPatin.ToString
                    'Recorte en la linea de contacto con el Alma
                    RecAlma = (Kdetc - tfPatin) + 1.5
                    TextBox46.Text = RecAlma.ToString
                End If
            Else
                MsgBox("La conexión en el extremo de la columna requiere el uso de placas de continuidad en combinación con placa de tapa.", MsgBoxStyle.Information, "Revisión")
                labelStatusBar1.Text = "Revise los resultados de diseño y modifique según sea conveniente. Si modifica los Datos Iniciales de la izquierda, vuelva a calcular con F5"
                SiPLcont = True
                GroupBox15.Visible = True
                GroupBox19.Visible = True
                GroupBox36.Visible = True
                Label287.Visible = False
                Label288.Visible = False
                Label289.Visible = False
                TextBox164.Visible = False
                PictureBox170.Visible = False
                TextBox165.Visible = False
                Label290.Visible = False
                PictureBox169.Visible = False
                Label291.Text = "Usar soldadura de ranura de penetración completa"
                Label75.Text = "La soldadura que une la placa de continuidad con el alma de la columna puede ser de ranura o de filete. El tamaño mínimo proporcionado aquí corresponde a una soldadura de doble lado usando electrodo E70." + vbCr + " " + vbCr + "Las placas de continuidad deben unirse a los patines de la columna con soldadura CJP."
                tmin = tbf
                TextBox42.Text = tmin.ToString  'espesor minimo cuando es una conexion de último piso
                'Recorte en la linea de contacto con el Patin
                RecPatin = (K1col - twc / 2) + 0.5
                TextBox39.Text = RecPatin.ToString
                'Recorte en la linea de contacto con el Alma
                RecAlma = (Kdetc - tfPatin) + 1.5
                TextBox46.Text = RecAlma.ToString
            End If

        End If

        'Imagen de la Placa de Continuidad según se haya escogido el ancho
        If AnchoPlcont.TextoAnchoPl <> "" Then
            Select Case AnchoPlcont.OpcSelecc
                Case 0
                    If Me.RadioButton9.Checked = True Then
                        Me.PictureBox7.Image = My.Resources.PlRecto
                        Me.Label232.Text = "Bisel Recto"
                    Else
                        Me.PictureBox7.Image = My.Resources.PlCurvo
                        Me.Label232.Text = "0.5"" radio mín."
                    End If
                Case 1
                    If Me.RadioButton9.Checked = True Then
                        Me.PictureBox7.Image = My.Resources.PrectaRED
                        Me.Label232.Text = "Bisel Recto"
                    Else
                        Me.PictureBox7.Image = My.Resources.PcurvaRED
                        Me.Label232.Text = "0.5"" radio mín."
                    End If
                Case 2
                    If Me.RadioButton9.Checked = True Then
                        Me.PictureBox7.Image = My.Resources.PrectaRED
                        Me.Label232.Text = "Bisel Recto"
                    Else
                        Me.PictureBox7.Image = My.Resources.PcurvaRED
                        Me.Label232.Text = "0.5"" radio mín."
                    End If
            End Select
        End If

        'IMAGEN DE DETALLE DE CONEXION DE TOPE EN DEPENDENCIA DE LA CONFIGURACION ELEGIDA
        If ComboBox1.SelectedIndex = 0 Then
            PictureBox61.Image = My.Resources.PlacaTapa
        Else
            PictureBox61.Image = My.Resources.PlacaTapa2
        End If

    End Sub

    Private Sub TextBox40_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox40.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox40.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox40.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox40.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox40.Text = Frac2Num(TextBox40.Text)
            End If
            If Val(TextBox40.Text) > Val(TextBox39.Text) Then
                TextBox40.BackColor = Color.Red
            Else
                TextBox40.BackColor = Color.White
            TextBox45.Focus()
                'Calculo de la Longitud de la linea de Contacto
                Dim DeNuevoOtraInst As Secciones = Secciones.GetSingleton
                Dim bcf, bfbeam, twc As Double 'Todos son Datos de la Columna
                bcf = Val(DeNuevoOtraInst.TextBox12.Text)
                bfbeam = Val(DeNuevoOtraInst.TextBox4.Text)
                twc = Val(DeNuevoOtraInst.TextBox14.Text)
                'Calculo de Wplaca-patin
                Dim Wpatin As Double
                If OpenAnchPl = False Then
                    Wpatin = 0.5 * (bcf - twc) - Val(TextBox40.Text)
                Else
                    Select Case AnchoPlcont.OpcSelecc
                        Case 0
                            Wpatin = 0.5 * (bcf - twc) - Val(TextBox40.Text)
                        Case 1
                            Wpatin = 0.5 * (bfbeam - twc) - Val(TextBox40.Text)
                        Case 2
                            Dim bplcont As Double
                            bplcont = Val(AnchoPlcont.TextBox1.Text)

                            Wpatin = bplcont - Val(TextBox40.Text)
                    End Select
                End If
                TextBox41.Text = Wpatin.ToString

                'Actualización del calculo de la soldadura en el alma
                If TextBox47.Text <> "" Then
                    Dim dcol, tfc As Double 'Todos son Datos de la Columna
                    dcol = Val(DeNuevoOtraInst.TextBox16.Text)
                    tfc = Val(DeNuevoOtraInst.TextBox13.Text)
                    Dim acerInst As Aceros = Aceros.GetSingleton
                    Dim dbViga As Double = Val(DeNuevoOtraInst.TextBox1.Text)
                    Dim tfbViga As Double = Val(DeNuevoOtraInst.TextBox6.Text)

                    'Calculo de la resistencia de la soldadura
                    'La menor entre a), b), c) y d)
                    Dim FyPLcont, Apf As Double
                    FyPLcont = Val(acerInst.TextBox9.Text) 'Fy de la placa de continuidad
                    'Apf=tp*Wplaca-patin
                    Apf = Val(TextBox43.Text) * Val(TextBox41.Text)

                    Dim Ra, Rb, Rc, Rd As Double 'cada caso de resistencia requerida considerado
                    Dim Apw As Double

                    'Apw=tp*Wplaca-alma
                    Apw = Val(TextBox43.Text) * Val(TextBox44.Text)

                    'a) Calculo de Ra
                    If ComboBox1.SelectedItem = "2" Then
                        Ra = 2 * 0.9 * FyPLcont * Apf
                    Else
                        Ra = 0.9 * FyPLcont * Apf
                    End If

                    'b) Calculo de Rb
                    Rb = 0.6 * FyPLcont * Apw

                    'c) Calculo de Rc
                    'Hay que calcular la resistencia de la zona de panel nodal
                    Dim Rzpanel As Double
                    Dim EMf As Double
                    EMf = Mf + MfPrima
                    Dim Ru As Double            'Calculo de la resistencia requerida de la ZONA DE PANEL NODAL
                    If OpcionesDiseño.VcRUconsid = 1 Then
                        Dim Vcol, htop, hbot As Double
                        htop = AlturasEntrepiso.Hsup
                        hbot = AlturasEntrepiso.Hinf
                        Vcol = EMf / ((htop + hbot) * 12 / 2)
                        Ru = Math.Round(EMf / (dbViga - tfbViga) - Vcol)
                    Else
                        Ru = Math.Round(EMf / (dbViga - tfbViga))
                    End If


                    Dim Pu, Py As Double
                    Dim Fycolumna, Agcolumna As Double
                    Fycolumna = Val(acerInst.TextBox5.Text)
                    Agcolumna = Val(DeNuevoOtraInst.TextBox10.Text)

                    Pu = Val(TextBox4.Text)
                    Py = 0.75 * Fycolumna * Agcolumna   'IMPORTANTE: Py ya incluye el 0.75

                    'CALCULO DE LA RESISTENCIA DE DISEÑO DE LA ZONA DE PANEL

                    Dim Rn, coc As Double
                    'coc= cociente
                    coc = (3 * bcf * (tfc ^ 2)) / (dbViga * dcol * twc)
                    If Pu <= Py Then
                        Rn = Math.Round(0.6 * Fycolumna * dcol * twc * (1 + coc))
                    Else
                        Dim pivot As Double
                        pivot = (1.2 * Pu) / (Py / 0.75)
                        Rn = Math.Round(0.6 * Fycolumna * dcol * twc * (1 + coc) * (1.9 - pivot))
                    End If


                    If Ru > Rn Then 'Quiere decir que las placas nodales son necesarias
                        'Y es necesario determinar la Resistencia con el aporte de las
                        'Placas Nodales
                        Dim RpN As Double 'RpN= Resistencia nominal con placa(s) Nodal(es)
                        Dim Otrococ As Double
                        Dim tz As Double = twc + Val(TextBox52.Text) 'espesor total de la zona de panel incluyendo el refuerzo
                        Otrococ = (3 * bcf * (tfc ^ 2)) / (dbViga * dcol * tz)

                        If Pu <= Py Then
                            RpN = Math.Round(0.6 * Fycolumna * dcol * tz * (1 + Otrococ))
                        Else
                            Dim pivot As Double
                            pivot = (1.2 * Pu) / (Py / 0.75)
                            RpN = Math.Round(0.6 * Fycolumna * dcol * tz * (1 + Otrococ) * (1.9 - pivot))
                        End If

                        Rzpanel = RpN
                    Else
                        Rzpanel = Rn
                    End If

                    Rc = Rzpanel

                    'd) Calculo de Rd
                    Dim Fyb As Double = Val(acerInst.TextBox1.Text)
                    Dim Ryb As Double = Val(acerInst.TextBox3.Text)
                    Dim bfviga As Double = Val(DeNuevoOtraInst.TextBox4.Text)
                    If ComboBox1.SelectedItem = "2" Then
                        Rd = 2 * Fyb * Ryb * bfviga * tfbViga
                    Else
                        Rd = Fyb * Ryb * bfviga * tfbViga
                    End If


                    Dim Rplcont As Double
                    Rplcont = Math.Round(Math.Min(Math.Min(Ra, Rb), Math.Min(Rc / 2, Rd / 2)))
                    TextBox49.Text = Rplcont.ToString

                    'Calculo del tamaño mínimo de soldadura de placa de continuidad
                    Dim Dmin As Double
                    Dmin = Math.Round(Rplcont / (2 * 1.392 * Val(TextBox44.Text)), 2)
                    TextBox47.Text = Dmin.ToString

                    'si la conexion es una conex. de tope
                    Dim DpTapa As Double
                    DpTapa = 2 * Dmin
                    TextBox72.Text = DpTapa.ToString

                    'Mandar dato a las Placas Nodales
                    'Tamaño de soldadura de la unión placa nodal-placa de continuidad (En caso de que las placa
                    '                                                                   nodal no sobrasale)
                    Dim soldPL_pl As Double
                    soldPL_pl = Math.Round(Val(TextBox47.Text) / 16, 3)

                    Label111.Text = "La placa nodal es soldada a las placas de continuidad con " & soldPL_pl & " in de soldadura de filete."

                    'Si ya se ha establecido en la Pestaña 'Zona de Panel nodal' que las placas nodales sobresalgan
                    If TextBox67.Text <> "" Then
                        'Entonces calcular el espesor adecuado
                        Dim tadec, wplac_alma As Double
                        wplac_alma = Val(TextBox44.Text)
                        tadec = Math.Round(Rplcont / (0.6 * FyPLcont * wplac_alma * 2), 3)
                        TextBox67.Text = tadec.ToString
                        If Val(TextBox68.Text) < tadec Then
                            TextBox68.BackColor = Color.Red
                        Else
                            TextBox68.BackColor = Color.WhiteSmoke
                        End If
                    End If
                End If


                'En el caso de una conexion BUEEP/BSEEP actualizar el cálculo del Asmin
                If LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida sin Rigidizar" Or LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida Rigidizada" Then

                    If TextBox164.Text <> "" Then
                        'Area del rigidizador
                        Dim Aspl, As_min, Apfred As Double
                        Dim FFu As Double = Val(TextBox149.Text)

                        Dim AlgunaInstMas As Aceros = Aceros.GetSingleton
                        Dim FyPLcont As Double = Val(AlgunaInstMas.TextBox9.Text)
                        Dim Apf As Double
                        Apf = Val(TextBox43.Text) * Val(TextBox41.Text)
                        As_min = Math.Round((FFu - RnPLcont) / (0.9 * FyPLcont), 3)
                        Apfred = Math.Round(Apf, 3)
                        Aspl = 2 * Apfred
                        TextBox164.Text = Aspl.ToString
                        Label289.Text = As_min.ToString + " in2"

                        If Aspl < As_min Then
                            TextBox164.BackColor = Color.Red
                        Else
                            TextBox164.BackColor = Color.WhiteSmoke
                        End If

                        'Soldadura minima de filete en el patin
                        Dim Soldmin As Double
                        Soldmin = Math.Round((FyPLcont * Apf) / (2 * 1.392 * Val(TextBox41.Text)), 2)
                        TextBox165.Text = Soldmin.ToString
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub TextBox43_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox43.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox43.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox43.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox43.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox43.Text = Frac2Num(TextBox43.Text)
            End If
            If Val(TextBox43.Text) < Val(TextBox42.Text) Then
                TextBox43.BackColor = Color.Red
            Else
                TextBox43.BackColor = Color.White
            TextBox40.Focus()
        End If
            If TextBox160.Enabled = True Then
                TextBox160.Text = TextBox43.Text
            End If

            'Actualización del calculo de la soldadura en el alma
            If TextBox47.Text <> "" Then
                Dim OtraInst As Secciones = Secciones.GetSingleton
                Dim dcol, tfc As Double 'Todos son Datos de la Columna
                dcol = Val(OtraInst.TextBox16.Text)
                tfc = Val(OtraInst.TextBox13.Text)
                Dim acerInst As Aceros = Aceros.GetSingleton
                Dim dbViga As Double = Val(OtraInst.TextBox1.Text)
                Dim tfbViga As Double = Val(OtraInst.TextBox6.Text)

                'Calculo de la resistencia de la soldadura
                'La menor entre a), b), c) y d)
                Dim FyPLcont, Apf As Double
                FyPLcont = Val(acerInst.TextBox9.Text) 'Fy de la placa de continuidad
                'Apf=tp*Wplaca-patin
                Apf = Val(TextBox43.Text) * Val(TextBox41.Text)

                Dim Ra, Rb, Rc, Rd As Double 'cada caso de resistencia requerida considerado
                Dim Apw As Double

                'Apw=tp*Wplaca-alma
                Apw = Val(TextBox43.Text) * Val(TextBox44.Text)

                'a) Calculo de Ra
                If ComboBox1.SelectedItem = "2" Then
                    Ra = 2 * 0.9 * FyPLcont * Apf
                Else
                    Ra = 0.9 * FyPLcont * Apf
                End If

                'b) Calculo de Rb
                Rb = 0.6 * FyPLcont * Apw

                'c) Calculo de Rc
                'Hay que calcular la resistencia de la zona de panel nodal
                Dim Rzpanel As Double
                Dim EMf As Double
                EMf = Mf + MfPrima
                Dim Ru As Double
                If OpcionesDiseño.VcRUconsid = 1 Then
                    Dim Vcol, htop, hbot As Double
                    htop = AlturasEntrepiso.Hsup
                    hbot = AlturasEntrepiso.Hinf
                    Vcol = EMf / ((htop + hbot) * 12 / 2)
                    Ru = Math.Round(EMf / (dbViga - tfbViga) - Vcol)
                Else
                    Ru = Math.Round(EMf / (dbViga - tfbViga))   'Calculo de la resistencia requerida de la ZONA DE PANEL NODAL
                End If

                Dim Pu, Py As Double
                Dim Fycolumna, Agcolumna, twColum, bfcol As Double
                Fycolumna = Val(acerInst.TextBox5.Text)
                Agcolumna = Val(OtraInst.TextBox10.Text)
                twColum = Double.Parse(OtraInst.TextBox14.Text)
                bfcol = Val(OtraInst.TextBox12.Text)

                Pu = Val(TextBox4.Text)
                Py = 0.75 * Fycolumna * Agcolumna   'IMPORTANTE: Py ya incluye el 0.75

                'CALCULO DE LA RESISTENCIA DE DISEÑO DE LA ZONA DE PANEL

                Dim Rn, coc As Double
                'coc= cociente
                coc = (3 * bfcol * (tfc ^ 2)) / (dbViga * dcol * twColum)
                If Pu <= Py Then
                    Rn = Math.Round(0.6 * Fycolumna * dcol * twColum * (1 + coc))
                Else
                    Dim pivot As Double
                    pivot = (1.2 * Pu) / (Py / 0.75)
                    Rn = Math.Round(0.6 * Fycolumna * dcol * twColum * (1 + coc) * (1.9 - pivot))
                End If


                If Ru > Rn Then 'Quiere decir que las placas nodales son necesarias
                    'Y es necesario determinar la Resistencia con el aporte de las
                    'Placas Nodales
                    Dim RpN As Double 'RpN= Resistencia nominal con placa(s) Nodal(es)
                    Dim Otrococ As Double
                    Dim tz As Double = twColum + Val(TextBox52.Text) 'espesor total de la zona de panel incluyendo el refuerzo
                    Otrococ = (3 * bfcol * (tfc ^ 2)) / (dbViga * dcol * tz)

                    If Pu <= Py Then
                        RpN = Math.Round(0.6 * Fycolumna * dcol * tz * (1 + Otrococ))
                    Else
                        Dim pivot As Double
                        pivot = (1.2 * Pu) / (Py / 0.75)
                        RpN = Math.Round(0.6 * Fycolumna * dcol * tz * (1 + Otrococ) * (1.9 - pivot))
                    End If

                    Rzpanel = RpN
                Else
                    Rzpanel = Rn
                End If

                Rc = Rzpanel

                'd) Calculo de Rd
                Dim Fyb As Double = Val(acerInst.TextBox1.Text)
                Dim Ryb As Double = Val(acerInst.TextBox3.Text)
                Dim bfviga As Double = Val(OtraInst.TextBox4.Text)
                If ComboBox1.SelectedItem = "2" Then
                    Rd = 2 * Fyb * Ryb * bfviga * tfbViga
                Else
                    Rd = Fyb * Ryb * bfviga * tfbViga
                End If

                Dim Rplcont As Double
                Rplcont = Math.Round(Math.Min(Math.Min(Ra, Rb), Math.Min(Rc / 2, Rd / 2)))
                TextBox49.Text = Rplcont.ToString

                'Calculo del tamaño mínimo de soldadura de placa de continuidad
                Dim Dmin As Double
                Dmin = Math.Round(Rplcont / (2 * 1.392 * Val(TextBox44.Text)), 2)
                TextBox47.Text = Dmin.ToString

                'si la conexion es una conex. de tope
                Dim DpTapa As Double
                DpTapa = 2 * Dmin
                TextBox72.Text = DpTapa.ToString

                'Mandar dato a las Placas Nodales
                'Tamaño de soldadura de la unión placa nodal-placa de continuidad (En caso de que las placa
                '                                                                   nodal no sobrasale)
                Dim soldPL_pl As Double
                soldPL_pl = Math.Round(Val(TextBox47.Text) / 16, 3)

                Label111.Text = "La placa nodal es soldada a las placas de continuidad con " & soldPL_pl & " in de soldadura de filete."

                'Si ya se ha establecido en la Pestaña 'Zona de Panel nodal' que las placas nodales sobresalgan
                If TextBox67.Text <> "" Then
                    'Entonces calcular el espesor adecuado
                    Dim tadec, wplac_alma As Double
                    wplac_alma = Val(TextBox44.Text)
                    tadec = Math.Round(Rplcont / (0.6 * FyPLcont * wplac_alma * 2), 3)
                    TextBox67.Text = tadec.ToString
                    If Val(TextBox68.Text) < tadec Then
                        TextBox68.BackColor = Color.Red
                    Else
                        TextBox68.BackColor = Color.WhiteSmoke
                    End If
                End If
            End If

            'Si se trata de una conexión de Placa Extrema,considerar la soldadura de filete de doble lado
            'en los patines de la columna
            If LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida sin Rigidizar" Or LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida Rigidizada" Then
                If Val(TextBox43.Text) <= 3 / 8 Then
                    PictureBox170.Visible = True
                    TextBox165.Visible = True
                    Label290.Visible = True
                    Label291.Text = "Tamaño mínimo de soldadura en 1/16 in"
                    Label75.Text = "La soldadura que une la placa de continuidad con el alma de la columna puede ser de ranura o de filete. El tamaño mínimo proporcionado aquí corresponde a una soldadura de doble lado usando electrodo E70." + vbCr + " " + vbCr + "Puesto que el espesor de la placa de continuidad es menor o igual a 3/8"" se permite una soldadura de filete de doble lado en la unión con los patines de la columna."
                Else
                    PictureBox170.Visible = False
                    TextBox165.Visible = False
                    Label290.Visible = False
                    Label291.Text = "Usar soldadura de ranura de penetración completa"
                    Label75.Text = "La soldadura que une la placa de continuidad con el alma de la columna puede ser de ranura o de filete. El tamaño mínimo proporcionado aquí corresponde a una soldadura de doble lado usando electrodo E70." + vbCr + " " + vbCr + "Las placas de continuidad deben unirse a los patines de la columna con soldadura CJP."
                End If

                'Actualización del calculo de la As y Asmin
                If TextBox164.Text <> "" Then
                    'Area del rigidizador
                    Dim Aspl, As_min, Apfred As Double
                    Dim FFu As Double = Val(TextBox149.Text)

                    Dim AlgunaInstMas As Aceros = Aceros.GetSingleton
                    Dim FyPLcont As Double = Val(AlgunaInstMas.TextBox9.Text)
                    Dim Apf As Double
                    Apf = Val(TextBox43.Text) * Val(TextBox41.Text)
                    As_min = Math.Round((FFu - RnPLcont) / (0.9 * FyPLcont), 3)
                    Apfred = Math.Round(Apf, 3)
                    Aspl = 2 * Apfred
                    TextBox164.Text = Aspl.ToString
                    Label289.Text = As_min.ToString + " in2"

                    If Aspl < As_min Then
                        TextBox164.BackColor = Color.Red
                    Else
                        TextBox164.BackColor = Color.WhiteSmoke
                    End If

                    'Soldadura minima de filete en el patin
                    Dim Soldmin As Double
                    Soldmin = Math.Round((FyPLcont * Apf) / (2 * 1.392 * Val(TextBox41.Text)), 2)
                    TextBox165.Text = Soldmin.ToString
                End If
            End If
        End If
    End Sub

    Private Sub TextBox43_TextChanged(sender As Object, e As EventArgs) Handles TextBox43.TextChanged
        If LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida sin Rigidizar" Or LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida Rigidizada" Then
            If TextBox160.Enabled = True Then
                TextBox160.Text = TextBox43.Text
            End If
        End If
    End Sub
    Private Sub TextBox45_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox45.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox45.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox45.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox45.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox45.Text = Frac2Num(TextBox45.Text)
        End If
            If Val(TextBox45.Text) < Val(TextBox46.Text) Then
                TextBox45.BackColor = Color.Red
            Else
                TextBox45.BackColor = Color.White
                Label242.BackColor = Color.SteelBlue
                Label242.ForeColor = Color.White
                Label242.Focus()
                Cursor.Current = Cursors.Hand

                'Calculo de la Longitud de la linea de Contacto
                Dim OtraInst As Secciones = Secciones.GetSingleton
                Dim dcol, tfc As Double 'Todos son Datos de la Columna
                dcol = Val(OtraInst.TextBox16.Text)
                tfc = Val(OtraInst.TextBox13.Text)
                'Calculo de Wplaca-alma
                Dim Walma As Double
                Walma = dcol - (2 * tfc) - (2 * Val(TextBox45.Text))
                TextBox44.Text = Walma.ToString

                'Actualización del calculo de la soldadura en el alma
                If TextBox47.Text <> "" Then

                    Dim acerInst As Aceros = Aceros.GetSingleton
                    Dim dbViga As Double = Val(OtraInst.TextBox1.Text)
                    Dim tfbViga As Double = Val(OtraInst.TextBox6.Text)

                    'Calculo de la resistencia de la soldadura
                    'La menor entre a), b), c) y d)
                    Dim FyPLcont, Apf As Double
                    FyPLcont = Val(acerInst.TextBox9.Text) 'Fy de la placa de continuidad
                    'Apf=tp*Wplaca-patin
                    Apf = Val(TextBox43.Text) * Val(TextBox41.Text)

                    Dim Ra, Rb, Rc, Rd As Double 'cada caso de resistencia requerida considerado
                    Dim Apw As Double

                    'Apw=tp*Wplaca-alma
                    Apw = Val(TextBox43.Text) * Val(TextBox44.Text)

                    'a) Calculo de Ra
                    If ComboBox1.SelectedItem = "2" Then
                        Ra = 2 * 0.9 * FyPLcont * Apf
                    Else
                        Ra = 0.9 * FyPLcont * Apf
                    End If

                    'b) Calculo de Rb
                    Rb = 0.6 * FyPLcont * Apw

                    'c) Calculo de Rc
                    'Hay que calcular la resistencia de la zona de panel nodal
                    Dim Rzpanel As Double
                    Dim EMf As Double
                    EMf = Mf + MfPrima
                    Dim Ru As Double
                    If OpcionesDiseño.VcRUconsid = 1 Then
                        Dim Vcol, htop, hbot As Double
                        htop = AlturasEntrepiso.Hsup
                        hbot = AlturasEntrepiso.Hinf
                        Vcol = EMf / ((htop + hbot) * 12 / 2)
                        Ru = Math.Round(EMf / (dbViga - tfbViga) - Vcol)
                    Else
                        Ru = Math.Round(EMf / (dbViga - tfbViga))   'Calculo de la resistencia requerida de la ZONA DE PANEL NODAL
                    End If

                    Dim Pu, Py As Double
                    Dim Fycolumna, Agcolumna, twColum, bfcol As Double
                    Fycolumna = Val(acerInst.TextBox5.Text)
                    Agcolumna = Val(OtraInst.TextBox10.Text)
                    twColum = Double.Parse(OtraInst.TextBox14.Text)
                    bfcol = Val(OtraInst.TextBox12.Text)

                    Pu = Val(TextBox4.Text)
                    Py = 0.75 * Fycolumna * Agcolumna   'IMPORTANTE: Py ya incluye el 0.75

                    'CALCULO DE LA RESISTENCIA DE DISEÑO DE LA ZONA DE PANEL

                    Dim Rn, coc As Double
                    'coc= cociente
                    coc = (3 * bfcol * (tfc ^ 2)) / (dbViga * dcol * twColum)
                    If Pu <= Py Then
                        Rn = Math.Round(0.6 * Fycolumna * dcol * twColum * (1 + coc))
                    Else
                        Dim pivot As Double
                        pivot = (1.2 * Pu) / (Py / 0.75)
                        Rn = Math.Round(0.6 * Fycolumna * dcol * twColum * (1 + coc) * (1.9 - pivot))
                    End If


                    If Ru > Rn Then 'Quiere decir que las placas nodales son necesarias
                        'Y es necesario determinar la Resistencia con el aporte de las
                        'Placas Nodales
                        Dim RpN As Double 'RpN= Resistencia nominal con placa(s) Nodal(es)
                        Dim Otrococ As Double
                        Dim tz As Double = twColum + Val(TextBox52.Text) 'espesor total de la zona de panel incluyendo el refuerzo
                        Otrococ = (3 * bfcol * (tfc ^ 2)) / (dbViga * dcol * tz)

                        If Pu <= Py Then
                            RpN = Math.Round(0.6 * Fycolumna * dcol * tz * (1 + Otrococ))
                        Else
                            Dim pivot As Double
                            pivot = (1.2 * Pu) / (Py / 0.75)
                            RpN = Math.Round(0.6 * Fycolumna * dcol * tz * (1 + Otrococ) * (1.9 - pivot))
                        End If

                        Rzpanel = RpN
                    Else
                        Rzpanel = Rn
                    End If

                    Rc = Rzpanel

                    'd) Calculo de Rd
                    Dim Fyb As Double = Val(acerInst.TextBox1.Text)
                    Dim Ryb As Double = Val(acerInst.TextBox3.Text)
                    Dim bfviga As Double = Val(OtraInst.TextBox4.Text)
                    If ComboBox1.SelectedItem = "2" Then
                        Rd = 2 * Fyb * Ryb * bfviga * tfbViga
                    Else
                        Rd = Fyb * Ryb * bfviga * tfbViga
                    End If


                    Dim Rplcont As Double
                    Rplcont = Math.Round(Math.Min(Math.Min(Ra, Rb), Math.Min(Rc / 2, Rd / 2)))
                    TextBox49.Text = Rplcont.ToString

                    'Calculo del tamaño mínimo de soldadura de placa de continuidad
                    Dim Dmin As Double
                    Dmin = Math.Round(Rplcont / (2 * 1.392 * Val(TextBox44.Text)), 2)
                    TextBox47.Text = Dmin.ToString

                    'si la conexion es una conex. de tope
                    Dim DpTapa As Double
                    DpTapa = 2 * Dmin
                    TextBox72.Text = DpTapa.ToString

                    'Mandar dato a las Placas Nodales
                    'Tamaño de soldadura de la unión placa nodal-placa de continuidad (En caso de que las placa
                    '                                                                   nodal no sobrasale)
                    Dim soldPL_pl As Double
                    soldPL_pl = Math.Round(Val(TextBox47.Text) / 16, 3)

                    Label111.Text = "La placa nodal es soldada a las placas de continuidad con " & soldPL_pl & " in de soldadura de filete."

                    'Si ya se ha establecido en la Pestaña 'Zona de Panel nodal' que las placas nodales sobresalgan
                    If TextBox67.Text <> "" Then
                        'Entonces calcular el espesor adecuado
                        Dim tadec, wplac_alma As Double
                        wplac_alma = Val(TextBox44.Text)
                        tadec = Math.Round(Rplcont / (0.6 * FyPLcont * wplac_alma * 2), 3)
                        TextBox67.Text = tadec.ToString
                        If Val(TextBox68.Text) < tadec Then
                            TextBox68.BackColor = Color.Red
                        Else
                            TextBox68.BackColor = Color.WhiteSmoke
                        End If
                    End If
                End If
            End If

        End If
    End Sub

    Private Sub Label242_Click(sender As Object, e As EventArgs) Handles Label242.Click
        TabControlJ1.SelectTab(3)
    End Sub

    Private Sub Label242_MouseHover(sender As Object, e As EventArgs) Handles Label242.MouseHover
        Label242.BackColor = Color.SteelBlue
        Label242.ForeColor = Color.White
    End Sub

    Private Sub Label242_MouseLeave(sender As Object, e As EventArgs) Handles Label242.MouseLeave
        Label242.BackColor = Color.LightSteelBlue
        Label242.ForeColor = Color.DarkSlateGray
    End Sub
    Private Sub PictureBox3_Click(sender As Object, e As EventArgs)

    End Sub

    Private Sub Label37_Click(sender As Object, e As EventArgs) Handles Label37.Click

    End Sub

    Private Sub TabPage5_Click(sender As Object, e As EventArgs)

    End Sub

    Private Sub RBS_Click_1(sender As Object, e As EventArgs) Handles RBS.Click
        GroupBox1.Visible = True
        GroupBox1.Width = 520
        GroupBox1.Height = 534
        GroupBox37.Visible = False
        GroupBox37.SendToBack()
        GroupBox38.Visible = False
        GroupBox38.SendToBack()
        GroupBox39.Visible = False
        GroupBox39.SendToBack()
        GroupBox48.Visible = False
        GroupBox48.SendToBack()
        GroupBox50.Visible = False
        GroupBox50.SendToBack()
        GroupBox53.Visible = False
        GroupBox53.SendToBack()
        GroupBox6.Visible = True
        GroupBox6.BringToFront()
        TextBox9.BackColor = Color.WhiteSmoke

        Button2.Enabled = False
        Button3.Enabled = False
        Button15.Enabled = False
        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambios en el icono del boton
        RBS.BackColor = Color.CadetBlue
        RBS.BackgroundImage = My.Resources.RBS_iluminado

        BUEEP.BackColor = Color.Transparent
        BUEEP.BackgroundImage = My.Resources.ICONObueep

        BSEEP.BackColor = Color.Transparent
        BSEEP.BackgroundImage = My.Resources.ICONO8ES

        BFP.BackColor = Color.Transparent
        BFP.BackgroundImage = My.Resources.ICONO_BFP

        WUF.BackColor = Color.Transparent
        WUF.BackgroundImage = My.Resources.ICONO_WUFw

        'variable de Tipo de Conexión
        Tipo = 1

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = True
        LabelDiseño.Text = "Conexión de Momento con Sección de Viga Reducida"

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión RBS" + " (" + LabelDiseño.Text + ")"
    End Sub

    Private Sub BUEEP_Click_1(sender As Object, e As EventArgs) Handles BUEEP.Click
        GroupBox1.Visible = True
        GroupBox1.Width = 520
        GroupBox1.Height = 858
        GroupBox37.Visible = False
        GroupBox37.SendToBack()
        GroupBox38.Visible = False
        GroupBox38.SendToBack()
        GroupBox6.Visible = False
        GroupBox6.SendToBack()
        GroupBox48.Visible = False
        GroupBox48.SendToBack()
        GroupBox50.Visible = False
        GroupBox50.SendToBack()
        GroupBox53.Visible = False
        GroupBox53.SendToBack()
        GroupBox39.Visible = True
        GroupBox39.BringToFront()
        GroupBox39.Width = 506
        GroupBox39.Height = 580
        GroupBox47.Visible = True
        PictureBox94.Visible = True
        TextBox9.BackColor = Color.WhiteSmoke

        ComboBox3.Visible = False
        Select Case ComboBox6.SelectedIndex
            Case 0
                TextBox78.Text = "90"
                TextBox84.Text = "54"
            Case 1
                TextBox78.Text = "90"
                TextBox84.Text = "68"
            Case 2
                TextBox78.Text = "113"
                TextBox84.Text = "68"
            Case 3
                TextBox78.Text = "113"
                TextBox84.Text = "84"
        End Select
        TextBox91.Visible = True
        PictureBox97.Visible = False
        PictureBox71.Image = My.Resources.bueep
        TextBox94.Visible = False
        Label153.Visible = False
        Label150.Text = "in  Valor entre 4 y 6"
        Label149.Text = "in  Valor entre 7 y 10.75"
        Label144.Text = "in  Valor entre 1.5 y 4.5"
        Label157.Text = "in  Valor entre 1.5 y 4.5"
        LabeltpExt.Text = "in  Valor entre 0.5 y 2.25"
        Button3.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False
        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambios en el icono del boton
        RBS.BackColor = Color.Transparent
        RBS.BackgroundImage = My.Resources.ICONO_RBS

        BUEEP.BackColor = Color.CadetBlue
        BUEEP.BackgroundImage = My.Resources.BUEEP_iluminado

        BFP.BackColor = Color.Transparent
        BFP.BackgroundImage = My.Resources.ICONO_BFP

        BSEEP.BackColor = Color.Transparent
        BSEEP.BackgroundImage = My.Resources.ICONO8ES

        WUF.BackColor = Color.Transparent
        WUF.BackgroundImage = My.Resources.ICONO_WUFw

        'variable de Tipo de Conexión
        Tipo = 2

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = True
        LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida sin Rigidizar"

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión BUEEP" + " (" + LabelDiseño.Text + ")"

        'SI DE CASUALIDAD YA SE HAN INTRODUCIDO DATOS EN LOS TEXTBOX, COMPROBAR SI ESTAN DENTRO DE LOS LIMITES
        'Verificacion de pfo y pfi

        If TextBox80.Text <> "" Or TextBox100.Text <> "" Then
            Dim smin, diam As Double
            Dim db As String
            db = ComboBox5.SelectedItem.ToString
            diam = Frac2Num(db)

            If diam <= 1 Then
                smin = diam + 1 / 2
            Else
                smin = diam + 3 / 4
            End If

            Dim pfomin As Double = Math.Max(smin, 1.5)
            If TextBox80.Text <> "" Then
                If Val(TextBox80.Text) < pfomin Or Val(TextBox80.Text) > 4.5 Then
                    TextBox80.BackColor = Color.Red
                Else
                    TextBox80.BackColor = Color.White
                End If
            End If

            If TextBox100.Text <> "" Then
                If Val(TextBox100.Text) < pfomin Or Val(TextBox100.Text) > 4.5 Then
                    TextBox100.BackColor = Color.Red
                Else
                    TextBox100.BackColor = Color.White
                End If
            End If
        End If

        'verificacion de g
        If TextBox90.Text <> "" Then
            'LIM DE PRECALIFICACION PARA EL GRAMIL EN DEPENDENCIA DE SI ES 4E, 4ES y/o 8ES

            'INSTANCIA PARA OBTENER bf 
            Dim Instbf As Secciones = Secciones.GetSingleton
            Dim bf As String = Instbf.TextBox4.Text

            'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
            Dim limmax As Double
            limmax = Math.Min(Double.Parse(bf), 6)

            If Val(TextBox90.Text) < 4 Or Val(TextBox90.Text) > limmax Then
                TextBox90.BackColor = Color.Red
            Else
                TextBox90.BackColor = Color.White
            End If
        End If

        'verificacion de bp (ancho de placa)
        If TextBox88.Text <> "" Then
            'INSTANCIA PARA OBTENER bf 
            Dim Instbf As Secciones = Secciones.GetSingleton
            Dim bf As String = Instbf.TextBox4.Text
            Dim bpmax As Double = 1 + Double.Parse(bf)

            'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
            Dim limmax2 As Double
            limmax2 = Math.Min(bpmax, 10.75)   'valor máximo

            If Val(TextBox88.Text) < 7 Or Val(TextBox88.Text) > limmax2 Then
                TextBox88.BackColor = Color.Red
            Else
                TextBox88.BackColor = Color.White
            End If
        End If

        'verificacion de tp (espesor de placa)
        If TextBox96.Text <> "" Then
            'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
            Dim tpmin, limMin As Double

            tpmin = Val(TextBox95.Text)
            limMin = Math.Max(tpmin, 0.5)

            If Val(TextBox96.Text) < limMin Or Val(TextBox96.Text) > 2.25 Then
                TextBox96.BackColor = Color.Red
            Else
                TextBox96.BackColor = Color.White
            End If
        End If
    End Sub

    Private Sub BSEEP_Click_1(sender As Object, e As EventArgs) Handles BSEEP.Click
        GroupBox1.Visible = True
        GroupBox1.Width = 520
        GroupBox1.Height = 1109
        GroupBox37.Visible = False
        GroupBox37.SendToBack()
        GroupBox38.Visible = False
        GroupBox38.SendToBack()
        GroupBox6.Visible = False
        GroupBox6.SendToBack()
        GroupBox48.Visible = False
        GroupBox48.SendToBack()
        GroupBox50.Visible = False
        GroupBox50.SendToBack()
        GroupBox53.Visible = False
        GroupBox53.SendToBack()
        GroupBox39.Visible = True
        GroupBox39.BringToFront()
        GroupBox39.Width = 506
        GroupBox39.Height = 828
        GroupBox47.Visible = True
        PictureBox94.Visible = True
        TextBox9.BackColor = Color.WhiteSmoke

        ComboBox3.Visible = True
        ComboBox3.DropDownStyle = ComboBoxStyle.DropDownList
        Select Case ComboBox3.SelectedIndex
            Case 0
        PictureBox71.Image = My.Resources.bseepCuatropernos
        Label150.Text = "in  Valor entre 3.25 y 6"
        Label149.Text = "in  Valor entre 7 y 10.75"
        Label144.Text = "in  Valor entre 1.75 y 5.5"
        Label157.Text = "in  Valor entre 1.75 y 5.5"
        LabeltpExt.Text = "in  Valor entre 0.5 y 1.5"
            Case 1
                PictureBox71.Image = My.Resources.bseepOchopernos
                PictureBox97.Visible = True
                TextBox94.Visible = True
                Label153.Visible = True
                Label150.Text = "in  Valor entre 5 y 6"
                Label149.Text = "in  Valor entre 9 y 15"
                Label144.Text = "in  Valor entre 1.625 y 2"
                Label157.Text = "in  Valor entre 1.625 y 2"
                LabeltpExt.Text = "in Valor entre 0.75 y 2.5"
        End Select
        Select Case ComboBox6.SelectedIndex
            Case 0
                TextBox78.Text = "90"
                TextBox84.Text = "54"
            Case 1
                TextBox78.Text = "90"
                TextBox84.Text = "68"
            Case 2
                TextBox78.Text = "113"
                TextBox84.Text = "68"
            Case 3
                TextBox78.Text = "113"
                TextBox84.Text = "84"
        End Select
        TextBox91.Visible = False
        Button3.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False
        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambios en el icono del boton
        RBS.BackColor = Color.Transparent
        RBS.BackgroundImage = My.Resources.ICONO_RBS

        BUEEP.BackColor = Color.Transparent
        BUEEP.BackgroundImage = My.Resources.ICONObueep

        BFP.BackColor = Color.Transparent
        BFP.BackgroundImage = My.Resources.ICONO_BFP

        WUF.BackColor = Color.Transparent
        WUF.BackgroundImage = My.Resources.ICONO_WUFw

        BSEEP.BackColor = Color.CadetBlue
        BSEEP.BackgroundImage = My.Resources.BSEEP_iluminado

        'variable de Tipo de Conexión
        Tipo = 3

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = True
        LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida Rigidizada"

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión BSEEP" + " (" + LabelDiseño.Text + ")"


        'SI DE CASUALIDAD YA SE HAN INTRODUCIDO DATOS EN LOS TEXTBOX, COMPROBAR SI ESTAN DENTRO DE LOS LIMITES
        'Verificacion de pfo y pfi

        If TextBox80.Text <> "" Or TextBox100.Text <> "" Then
            Dim smin, diam As Double
            Dim db As String
            db = ComboBox5.SelectedItem.ToString
            diam = Frac2Num(db)

            If diam <= 1 Then
                smin = diam + 1 / 2
            Else
                smin = diam + 3 / 4
            End If

            Dim pfomin As Double = Math.Max(smin, 1.75)
            If TextBox80.Text <> "" Then
                If Val(TextBox80.Text) < pfomin Or Val(TextBox80.Text) > 5.5 Then
                    TextBox80.BackColor = Color.Red
                Else
                    TextBox80.BackColor = Color.White
                End If
            End If

            If TextBox100.Text <> "" Then
                If Val(TextBox100.Text) < pfomin Or Val(TextBox100.Text) > 5.5 Then
                    TextBox100.BackColor = Color.Red
                Else
                    TextBox100.BackColor = Color.White
                End If
            End If
        End If

        'verificacion de g
        If TextBox90.Text <> "" Then
            'LIM DE PRECALIFICACION PARA EL GRAMIL EN DEPENDENCIA DE SI ES 4E, 4ES y/o 8ES

            'INSTANCIA PARA OBTENER bf 
            Dim Instbf As Secciones = Secciones.GetSingleton
            Dim bf As String = Instbf.TextBox4.Text

            'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
            Dim limmax As Double
            limmax = Math.Min(Double.Parse(bf), 6)

            If Val(TextBox90.Text) < 3.25 Or Val(TextBox90.Text) > limmax Then
                TextBox90.BackColor = Color.Red
            Else
                TextBox90.BackColor = Color.White
            End If
        End If

        'verificacion de bp (ancho de placa)
        If TextBox88.Text <> "" Then
            'INSTANCIA PARA OBTENER bf 
            Dim Instbf As Secciones = Secciones.GetSingleton
            Dim bf As String = Instbf.TextBox4.Text
            Dim bpmax As Double = 1 + Double.Parse(bf)

            'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
            Dim limmax2 As Double
            limmax2 = Math.Min(bpmax, 10.75)   'valor máximo

            If Val(TextBox88.Text) < 7 Or Val(TextBox88.Text) > limmax2 Then
                TextBox88.BackColor = Color.Red
            Else
                TextBox88.BackColor = Color.White
            End If
        End If

        'verificacion de tp (espesor de placa)
        If TextBox96.Text <> "" Then
            'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
            Dim tpmin, limMin As Double

            tpmin = Val(TextBox95.Text)
            limMin = Math.Max(tpmin, 0.5)

            If Val(TextBox96.Text) < limMin Or Val(TextBox96.Text) > 1.5 Then
                TextBox96.BackColor = Color.Red
            Else
                TextBox96.BackColor = Color.White
            End If
        End If
    End Sub

    Private Sub BFP_Click_1(sender As Object, e As EventArgs) Handles BFP.Click
        GroupBox1.Visible = True
        GroupBox1.Width = 520
        GroupBox1.Height = 1699
        Button3.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False
        GroupBox37.Visible = False
        GroupBox37.SendToBack()
        GroupBox38.Visible = False
        GroupBox38.SendToBack()
        GroupBox6.Visible = False
        GroupBox6.SendToBack()
        GroupBox39.Visible = False
        GroupBox39.SendToBack()
        GroupBox48.Visible = True
        GroupBox48.BringToFront()
        GroupBox50.Visible = True
        GroupBox50.BringToFront()
        GroupBox53.Visible = True
        GroupBox53.BringToFront()

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambios en el icono del boton
        RBS.BackColor = Color.Transparent
        RBS.BackgroundImage = My.Resources.ICONO_RBS

        BUEEP.BackColor = Color.Transparent
        BUEEP.BackgroundImage = My.Resources.ICONObueep

        BSEEP.BackColor = Color.Transparent
        BSEEP.BackgroundImage = My.Resources.ICONO8ES

        WUF.BackColor = Color.Transparent
        WUF.BackgroundImage = My.Resources.ICONO_WUFw

        BFP.BackColor = Color.CadetBlue
        BFP.BackgroundImage = My.Resources.BFP_iluminado

        'Si ya se ha seleccionado Material para las placas
        'resaltar en rojo si éste no es ASTM A36 o A572 Gr.50
        If TextBox9.Text <> "" Then
            If TextBox9.Text = "ASTM A36" Or TextBox9.Text = "ASTM A572 Grado 50" Then
                TextBox9.BackColor = Color.WhiteSmoke
            Else
                TextBox9.BackColor = Color.Red
            End If
        End If

        'variable de Tipo de Conexión
        Tipo = 4

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = True
        LabelDiseño.Text = "Conexión de Momento con Placa de Patín Empernada"

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión BFP" + " (" + LabelDiseño.Text + ")"
    End Sub

    Private Sub WUF_Click_1(sender As Object, e As EventArgs) Handles WUF.Click
        GroupBox1.Visible = True
        GroupBox1.Width = 520
        GroupBox1.Height = 1066
        GroupBox6.Visible = False
        GroupBox6.SendToBack()
        GroupBox39.Visible = False
        GroupBox39.SendToBack()
        GroupBox48.Visible = False
        GroupBox48.SendToBack()
        GroupBox50.Visible = False
        GroupBox50.SendToBack()
        GroupBox53.Visible = False
        GroupBox53.SendToBack()
        GroupBox37.Visible = True
        GroupBox37.BringToFront()
        GroupBox38.Visible = True
        GroupBox38.BringToFront()

        Button3.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False
        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambios en el icono del boton
        WUF.BackColor = Color.CadetBlue
        WUF.BackgroundImage = My.Resources.WUFw_iluminado

        RBS.BackColor = Color.Transparent
        RBS.BackgroundImage = My.Resources.ICONO_RBS

        BUEEP.BackColor = Color.Transparent
        BUEEP.BackgroundImage = My.Resources.ICONObueep

        BSEEP.BackColor = Color.Transparent
        BSEEP.BackgroundImage = My.Resources.ICONO8ES

        BFP.BackColor = Color.Transparent
        BFP.BackgroundImage = My.Resources.ICONO_BFP

        TextBox9.BackColor = Color.WhiteSmoke

        'variable de Tipo de Conexión
        Tipo = 5

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = True
        LabelDiseño.Text = "Conexión de Momento con Patín Soldado sin refuerzo y Alma Soldada"

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión WUF-W" + " (" + LabelDiseño.Text + ")"
    End Sub

    Private Sub Button4_Click_1(sender As Object, e As EventArgs) Handles Button4.Click
        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Secciones de patín ancho sistema imperial"

        Dim DialogSecc As Secciones = Secciones.GetSingleton
        DialogSecc.Show()
        DialogSecc.BringToFront()
    End Sub

    Private Sub Button5_Click_1(sender As Object, e As EventArgs) Handles Button5.Click

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Aceros según la designación ASTM"

        'SI LA CONEXION ES UNA BFP, MOSTRAR UN MSGBOX ANTES DE ELEGIR EL MATERIAL
        If LabelDiseño.Text = "Conexión de Momento con Placa de Patín Empernada" Then
            MsgBox("Todas las placas en la conexión deben ser conforme a una de las siguientes especificaciones: ASTM A36 ó ASTM A572 Grado 50 (ANSI/AISC 358-10 7.5.1).", MsgBoxStyle.Information, "Material de las placas")
        End If

        Dim dialogAcero As Aceros = Aceros.GetSingleton
        dialogAcero.Show()
        dialogAcero.BringToFront()

    End Sub

    '--------------------------------
    'CALCULOS DE ZONA DE PANEL NODAL
    '--------------------------------
    Private Sub RadioButton1_CheckedChanged(sender As Object, e As EventArgs) Handles RadioButton1.CheckedChanged
        If RadioButton1.Checked Then
            If RadioButton4.Checked Then
                PictureBox48.Image = My.Resources.PlacaNodEspaciadaSing
            Else
                PictureBox48.Image = My.Resources.PlacaNodalSing
            End If

            Label759.Visible = False
            TextBox53.Text = TextBox52.Text
            TextBox54.Text = TextBox53.Text
            TextBox68.Text = TextBox53.Text
            TextBox62.Text = TextBox53.Text

            'comprobacion del espesor en la soldadura de filete
            If TextBox61.Text <> "" Then
                If Val(TextBox61.Text) > Val(TextBox62.Text) Then
                    TextBox61.BackColor = Color.Red
                    TextBox63.Enabled = False
                    TextBox63.Text = ""
                    TextBox64.Text = ""
                    TextBox65.Text = ""
                    Label104.Text = "No es posible soldar con soldadura de filete, puesto que el espesor de la placa de refuerzo nodal es insuficiente para acomodar el bisel." + vbCr + " " + vbCr + "Proponga un espesor que permita la hechura del bisel, o mejor aún opte por usar soldadura de ranura para unir la placa a los patines de la columna."
                Else
                    TextBox61.BackColor = Color.WhiteSmoke
                    TextBox63.Enabled = True
                    TextBox64.Text = TextBox61.Text
                    Label104.Text = "Establezca un bisel de tal manera que sea el mínimo posible. Tenga en cuenta que entre mayor sea el bisel resultará en un tamaño de soldadura de filete más grande." + vbCr + " " + vbCr + "El máximo bisel posible está limitado al espesor de la placa de refuerzo nodal."
                End If

            End If

            'CONDICION PARA VER SI LOS ESPESORES CUMPLEN
            If TextBox54.Text <> "" And Val(TextBox54.Text) < Val(TextBox56.Text) Then
                TextBox54.BackColor = Color.Red
                RadioButton4.Enabled = False
                Label124.Visible = True
                Label124.Text = "Se requiere soldaduras de tapón para interconectar la(s) placa(s) con el alma de la columna"
                If RadioButton4.Checked = True Then
                    MessageBox.Show("No se puede establecer la disposición de placa nodal espaciada debido a que no reúne los requerimientos de espesor mínimo por pandeo", "Placa nodal espaciada", MessageBoxButtons.OK, MessageBoxIcon.Asterisk)
                    RadioButton3.Checked = True
                End If
            Else
                If TextBox55.BackColor = Color.Red Then
                    TextBox54.BackColor = Color.WhiteSmoke
                    RadioButton4.Enabled = False
                    Label124.Visible = True
                    Label124.Text = "Se requiere soldaduras de tapón para interconectar la(s) placa(s) con el alma de la columna"
                Else
                    TextBox54.BackColor = Color.White
                    RadioButton4.Enabled = True
                    Label124.Visible = False
                End If
            End If

            'SI EL PANDEO OCURRE, HAY QUE SOLDAR LOS BORDES DE LA PLACA
            If TextBox54.BackColor = Color.Red Then
                Label108.Text = "Para limitar el pandeo local de la placa de refuerzo nodal es necesario soldar los bordes con el tamaño mínimo de soldadura dado en la Tabla J2.4 AISC 360-10." + vbCr + " " + vbCr + "Extender la placa nodal 6 in por encima y por debajo de la viga con mayor peralte, de acuerdo a como lo indica el AISC 341-10 E3.6.3(4)."
            Else
                Label108.Text = "Los bordes superior e inferior de la placa de refuerzo nodal no requieren ser soldados al alma de la columna." + vbCr + " " + vbCr + "Extender la placa nodal 6 in por encima y por debajo de la viga con mayor peralte, de acuerdo a como lo indica el AISC 341-10 E3.6.3(4)."
            End If
        Else
            GoTo Line6
        End If

Line6:
    End Sub

    Private Sub RadioButton2_CheckedChanged(sender As Object, e As EventArgs) Handles RadioButton2.CheckedChanged
        If RadioButton2.Checked Then
            'Esta condicional junto con el Line7 es para evitar que se ejecute el código del RadioButton al 'Deseleccionar' el checked
            If RadioButton4.Checked Then
                PictureBox48.Image = My.Resources.PlacaNodEspaciadaDob
                Label759.Visible = False
            Else
                PictureBox48.Image = My.Resources.PlacaNodalDob
                If SiPLcont = True Then
                    Label759.Visible = True
                End If
            End If

            If TextBox52.Text = "" Then
                If GroupBox21.Visible = True Then
                    MsgBox("Por favor, introduzca un valor para el espesor de refuerzo", MsgBoxStyle.Critical, "Error")
                End If
            Else
                TextBox53.Text = (Double.Parse(TextBox52.Text)) / 2
                TextBox54.Text = TextBox53.Text
                TextBox68.Text = TextBox53.Text
                TextBox62.Text = TextBox53.Text

                'comprobacion del espesor en la soldadura de filete
                If TextBox61.Text <> "" Then
                    If Val(TextBox61.Text) > Val(TextBox62.Text) Then
                        TextBox61.BackColor = Color.Red
                        TextBox63.Enabled = False
                        TextBox63.Text = ""
                        TextBox64.Text = ""
                        TextBox65.Text = ""
                        Label104.Text = "No es posible soldar con soldadura de filete, puesto que el espesor de la placa de refuerzo nodal es insuficiente para acomodar el bisel." + vbCr + " " + vbCr + "Proponga un espesor que permita la hechura del bisel, o mejor aún opte por usar soldadura de ranura para unir la placa a los patines de la columna."
                    Else
                        TextBox61.BackColor = Color.WhiteSmoke
                        TextBox61.BackColor = Color.WhiteSmoke
                        TextBox63.Enabled = True
                        TextBox64.Text = TextBox61.Text
                        Label104.Text = "Establezca un bisel de tal manera que sea el mínimo posible. Tenga en cuenta que entre mayor sea el bisel resultará en un tamaño de soldadura de filete más grande." + vbCr + " " + vbCr + "El máximo bisel posible está limitado al espesor de la placa de refuerzo nodal."

                    End If

                End If

                'CONDICION PARA VER SI LOS ESPESORES CUMPLEN
                If TextBox54.Text <> "" And Val(TextBox54.Text) < Val(TextBox56.Text) Then
                    TextBox54.BackColor = Color.Red
                    RadioButton4.Enabled = False
                    Label124.Visible = True
                    Label124.Text = "Se requiere soldaduras de tapón para interconectar la(s) placa(s) con el alma de la columna"
                    If RadioButton4.Checked = True Then
                        MessageBox.Show("No se puede establecer la disposición de placa nodal espaciada debido a que no reúne los requerimientos de espesor mínimo por pandeo", "Placa nodal espaciada", MessageBoxButtons.OK, MessageBoxIcon.Asterisk)
                        RadioButton3.Checked = True
                    End If
                Else
                    If TextBox55.BackColor = Color.Red Then
                        TextBox54.BackColor = Color.WhiteSmoke
                        RadioButton4.Enabled = False
                        Label124.Visible = True
                        Label124.Text = "Se requiere soldaduras de tapón para interconectar la(s) placa(s) con el alma de la columna"
                    Else
                        TextBox54.BackColor = Color.WhiteSmoke
                        RadioButton4.Enabled = True
                        Label124.Visible = False
                    End If
                End If

            End If

            'SI EL PANDEO OCURRE, HAY QUE SOLDAR LOS BORDES DE LA PLACA
            If TextBox54.BackColor = Color.Red Then
                Label108.Text = "Para limitar el pandeo local de la placa de refuerzo nodal es necesario soldar los bordes con el tamaño mínimo de soldadura dado en la Tabla J2.4 AISC 360-10." + vbCr + " " + vbCr + "Extender la placa nodal 6 in por encima y por debajo de la viga con mayor peralte, de acuerdo a como lo indica el AISC 341-10 E3.6.3(4)."
            Else
                Label108.Text = "Los bordes superior e inferior de la placa de refuerzo nodal no requieren ser soldados al alma de la columna." + vbCr + " " + vbCr + "Extender la placa nodal 6 in por encima y por debajo de la viga con mayor peralte, de acuerdo a como lo indica el AISC 341-10 E3.6.3(4)."
            End If
        Else
            GoTo Line7
        End If
Line7:
    End Sub

    Private Sub TabPage4_Click(sender As Object, e As EventArgs) Handles TabPage4.Click

        Dim instSecc1 As Secciones
        Dim tfbViga, tfcColum, dbViga, dcColum, twColum As Double
        Dim EMf As Double
        If LabelDiseño.Text = "Conexión de Momento con Patín Soldado sin refuerzo y Alma Soldada" Then
            EMf = Val(TextBox194.Text) + MfPrima
        Else
            EMf = Mf + MfPrima
        End If

        instSecc1 = Secciones.GetSingleton
        tfbViga = Double.Parse(instSecc1.TextBox6.Text)
        dbViga = Double.Parse(instSecc1.TextBox1.Text)
        Dim bfcol As Double = Val(instSecc1.TextBox12.Text)
        twColum = Double.Parse(instSecc1.TextBox14.Text)
        tfcColum = Double.Parse(instSecc1.TextBox13.Text)
        dcColum = Double.Parse(instSecc1.TextBox16.Text)

        Dim Ru As Double
        If LabelDiseño.Text = "Conexión de Momento con Placa de Patín Empernada" Then
            If OpcionesDiseño.VcRUconsid = 1 Then
                Dim Vcol, htop, hbot As Double
                htop = AlturasEntrepiso.Hsup
                hbot = AlturasEntrepiso.Hinf
                Vcol = EMf / ((htop + hbot) * 12 / 2)
                Ru = Math.Round(EMf / (dbViga + Val(TextBox118.Text)) - Vcol)
            Else
                Ru = Math.Round(EMf / (dbViga + Val(TextBox118.Text)))   'Calculo de la resistencia requerida de la ZONA DE PANEL NODAL para conex. BFP
            End If
        Else
            If OpcionesDiseño.VcRUconsid = 1 Then
                Dim Vcol, htop, hbot As Double
                htop = AlturasEntrepiso.Hsup
                hbot = AlturasEntrepiso.Hinf
                Vcol = EMf / ((htop + hbot) * 12 / 2)
                Ru = Math.Round(EMf / (dbViga - tfbViga) - Vcol)
            Else
                Ru = Math.Round(EMf / (dbViga - tfbViga))   'Calculo de la resistencia requerida de la ZONA DE PANEL NODAL para el resto de conexiones
            End If
        End If
        TextBox48.Text = Ru.ToString

        Dim Pu, Py As Double
        Dim acerInst As Aceros = Aceros.GetSingleton
        Dim Fycolumna, Agcolumna As Double
        Fycolumna = Val(acerInst.TextBox5.Text)
        Agcolumna = Val(instSecc1.TextBox10.Text)

        Pu = Val(TextBox4.Text)
        Py = 0.75 * Fycolumna * Agcolumna   'IMPORTANTE: Py ya incluye el 0.75

        'CALCULO DE LA RESISTENCIA DE DISEÑO DE LA ZONA DE PANEL
        'y CALCULO DEL ESPESOR REQUERIDO
        Dim Rn, coc As Double
        'coc= cociente
        Dim treq, tred As Double
        'tred=treq REDondeado
        coc = (3 * bfcol * (tfcColum ^ 2)) / (dbViga * dcColum * twColum)
        If Pu <= Py Then
            Rn = Math.Round(0.6 * Fycolumna * dcColum * twColum * (1 + coc))
            treq = ((Ru - (0.6 * Fycolumna * 3 * bfcol * (tfcColum ^ 2) / dbViga)) / (0.6 * Fycolumna * dcColum)) - twColum
        Else
            Dim pivot As Double
            pivot = (1.2 * Pu) / (Py / 0.75)
            Rn = Math.Round(0.6 * Fycolumna * dcColum * twColum * (1 + coc) * (1.9 - pivot))
            treq = ((Ru - (0.6 * Fycolumna * 3 * bfcol * (tfcColum ^ 2) / dbViga)) / (0.6 * Fycolumna * dcColum * (1.9 - pivot))) - twColum
        End If
        TextBox50.Text = Rn.ToString
        tred = Math.Round(treq, 3)
        TextBox51.Text = tred.ToString


        'CALCULOS DEL ESPESOR MINIMO PARA PREVENIR PANDEO LOCAL
        Dim tpandeo, dz, wz As Double
        dz = dbViga - (2 * tfbViga)
        wz = dcColum - (2 * tfcColum)
        tpandeo = Math.Round((dz + wz) / 90, 2)

        TextBox56.Text = tpandeo.ToString
        TextBox57.Text = tpandeo.ToString
        TextBox55.Text = twColum

        If Ru > Rn Then
            MsgBox("Se requiere refuerzo en la zona de panel. Puede intentar cambiar la sección de la columna para evitar el uso de placas de refuerzo nodal.", MsgBoxStyle.Exclamation, "Revisión")
            'conecEncroach() Cambié la apertura de esta conexión por errores que se presentaban, al inicio del formulario
            labelStatusBar1.Text = "Revise los resultados de diseño y modifique según sea conveniente. Si modifica los Datos Iniciales de la izquierda, vuelva a calcular con F5"
            GroupBox21.Visible = True
            GroupBox22.Visible = True
            GroupBox25.Visible = True
            '
            'Los RadioButtons seleccionados por defecto los
            'trasladé a Nuevo
            '
            'RadioButton1.Checked = True
            'RadioButton3.Checked = True
            'RadioButton5.Checked = True
            'RadioButton7.Checked = True


            'COMPARACION ENTRE EL ESPESOR DEL ALMA CON EL ESPESOR MINIMO POR PANDEO
            If twColum < tpandeo Then
                TextBox55.BackColor = Color.Red
                MsgBox("El espesor del alma de la columna de " & twColum & " in es inadecuado para minimizar el pandeo por cortante. Utilize soldaduras de tapón que reúnan los requerimientos del AISC 360-10 J2.3 para interconectar el alma con la(s) placa(s) de refuerzo.", MsgBoxStyle.Critical, "Espesor de la zona de panel")
                Label124.Visible = True
                Label124.Text = "Se requiere soldaduras de tapón para interconectar la(s) placa(s) con el alma de la columna"
                RadioButton4.Enabled = False
            Else
                TextBox55.BackColor = Color.WhiteSmoke
                RadioButton4.Enabled = True
            End If


        Else
            MsgBox("No se necesita refuerzo en la zona de panel", MsgBoxStyle.Information, "Revisión")
            labelStatusBar1.Text = "Presione clic izquierdo en cualquier lugar dentro de la pestaña para hacer la revisión de la zona de panel nodal"
            GroupBox21.Visible = False
            GroupBox22.Visible = False
            GroupBox25.Visible = False

            'AUNQUE NO SE NECESITEN PLACAS NODALES, DE NECESITARSE PLACAS DE CONTINUIDAD HAY QUE ENVIAR LA RESISTENCIA DE LA ZONA DE PANEL NODAL
            'VINCULACION CON PLACAS DE CONTINUIDAD
            'Calculo de la resistencia de la soldadura
            'La menor entre a), b), c) y d)
            Dim FyPLcont, Apf As Double
            FyPLcont = Val(acerInst.TextBox9.Text) 'Fy de la placa de continuidad
            'Apf=tp*Wplaca-patin
            Apf = Val(TextBox43.Text) * Val(TextBox41.Text)

            If TextBox40.Text <> "" And TextBox45.Text <> "" Then
                Dim Ra, Rb, Rc, Rd As Double 'cada caso de resistencia requerida considerado
                Dim Apw As Double

                'Apw=tp*Wplaca-alma
                Apw = Val(TextBox43.Text) * Val(TextBox44.Text)

                'a) Calculo de Ra
                If ComboBox1.SelectedItem = "2" Then
                    Ra = 2 * 0.9 * FyPLcont * Apf
                Else
                    Ra = 0.9 * FyPLcont * Apf
                End If

                'b) Calculo de Rb
                Rb = 0.6 * FyPLcont * Apw

                'c) Calculo de Rc
                'Sencillamente es la Resistencia Nominal de la Zona de Panel Nodal
                Rc = Rn

                'd) Calculo de Rd
                Dim Fyb As Double = Val(acerInst.TextBox1.Text)
                Dim Ryb As Double = Val(acerInst.TextBox3.Text)
                Dim bfviga As Double = Val(instSecc1.TextBox4.Text)

                If ComboBox1.SelectedItem = "2" Then
                    Rd = 2 * Fyb * Ryb * bfviga * tfbViga
                Else
                    Rd = Fyb * Ryb * bfviga * tfbViga
                End If

                Dim Rplcont As Double
                Rplcont = Math.Round(Math.Min(Math.Min(Ra, Rb), Math.Min(Rc / 2, Rd / 2)))
                TextBox49.Text = Rplcont.ToString

                'Calculo del tamaño mínimo de soldadura de placa de continuidad
                Dim Dmin As Double
                Dmin = Math.Round(Rplcont / (2 * 1.392 * Val(TextBox44.Text)), 2)
                TextBox47.Text = Dmin.ToString

                'si la conexion es una conex. de tope
                Dim DpTapa As Double
                DpTapa = 2 * Dmin
                TextBox72.Text = DpTapa.ToString

                'AUNQUE NO SE NECESITEN PLACAS NODALES, DE NECESITARSE PLACAS DE CONTINUIDAD HAY QUE HACER EL CALCULO DE LA SOLD. EN LOS PATINES
                'VALIDO PARA CONEXIONES BUEEP Y BSEEP
                If LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida sin Rigidizar" Or LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida Rigidizada" Then
                    'Area del rigidizador
                    Dim Aspl, As_min, Apfred As Double
                    Dim FFu As Double = Val(TextBox149.Text)

                    As_min = Math.Round((FFu - RnPLcont) / (0.9 * FyPLcont), 3)
                    Apfred = Math.Round(Apf, 3)
                    Aspl = 2 * Apfred
                    TextBox164.Text = Aspl.ToString
                    Label289.Text = As_min.ToString + " in2"

                    If Aspl < As_min Then
                        TextBox164.BackColor = Color.Red
                    Else
                        TextBox164.BackColor = Color.WhiteSmoke
                    End If

                    'Soldadura minima de filete en el patin
                    Dim Soldmin As Double
                    Soldmin = Math.Round((FyPLcont * Apf) / (2 * 1.392 * Val(TextBox41.Text)), 2)
                    TextBox165.Text = Soldmin.ToString

                End If

            End If

            'AUNQUE NO SE NECESITEN PLACAS NODALES, SIEMPRE HAY QUE REVISAR EL PANDEO DEL ALMA DE LA COLUMNA
            If twColum < tpandeo Then
                MsgBox("El espesor del alma de la columna de " & twColum & " in es inadecuado para minimizar el pandeo por cortante. Elija otra sección para la columna.", MsgBoxStyle.Critical, "Espesor de la zona de panel")
            End If
        End If

        'SEGÚN SI HABRAN PLACAS DE CONTINUIDAD O NO, SE DEFINEN CIERTOS PARAMETROS
        If ComboBox2.SelectedItem = "No" Then

            If tfcColum >= LimPLcont1 And tfcColum >= LimPLcont2 Then
                'NO SON NECESARIAS LAS PLACAS DE CONTINUIDAD POR LO TANTO SE ESTABLECE LOS CASOS DONDE LA PLACA NODAL ESTA SIN PL.CONT.
                GroupBox30.Visible = False
                GroupBox32.Visible = True
                GroupBox32.BringToFront()
            Else
                'SON NECESARIAS LAS PL. DE CONT. POR LO TANTO SE ESTABLECE LOS CASOS DONDE LA PLACA NODAL ESTÁ CON PL.CONT.
                GroupBox30.Visible = True
                GroupBox30.BringToFront()
                GroupBox32.Visible = False
                RadioButton8.Enabled = True
            End If
        Else
            'SI LA CONEXION ES UNA CON. DE EXTREMO LAS PLACAS DE CONTINUIDAD SON NECESARIAS
            Dim sold As Double
            sold = Math.Round(Val(TextBox47.Text) / 16, 3)
            GroupBox30.Visible = True
            GroupBox30.BringToFront()
            GroupBox30.Text = "Disposición con placas de continuidad y placa de tapa"
            Label111.Text = "La placa nodal es soldada a las placas de continuidad con " & sold & " in de soldadura de filete." + vbCr + " " + vbCr + "La placa nodal es soldada a la placa de tapa con " & TextBox47.Text & " in de soldadura de filete."
            Label111.Width = 487
            Label111.Height = 24
            Label111.TextAlign = ContentAlignment.TopCenter
            Label111.Location = New Point(213, 53)
            RadioButton8.Enabled = False
            RadioButton7.Checked = True
            GroupBox32.Visible = False
        End If


    End Sub

    Private Sub TextBox52_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox52.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox52.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox52.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox52.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox52.Text = Frac2Num(TextBox52.Text)
            End If
            If Val(TextBox52.Text) < Val(TextBox51.Text) Then
                TextBox52.BackColor = Color.Red
            Else
                TextBox52.BackColor = Color.White
            End If


            TextBox53.Focus()

            If RadioButton1.Checked = True Then
                TextBox53.Text = TextBox52.Text
                TextBox54.Text = TextBox53.Text
            ElseIf RadioButton2.Checked = True Then
                TextBox53.Text = (Double.Parse(TextBox52.Text)) / 2
                TextBox54.Text = TextBox53.Text
            End If

            TextBox68.Text = TextBox53.Text
            TextBox62.Text = TextBox53.Text

            'VINCULACION CON PLACAS DE CONTINUIDAD
            'Calculo de la resistencia de la soldadura
            'La menor entre a), b), c) y d)
            If TextBox40.Text <> "" And TextBox45.Text <> "" Then
                Dim Ra, Rb, Rc, Rd As Double 'cada caso de resistencia requerida considerado
                Dim Fy, Apf, Apw As Double
                Dim SeccInst As Secciones = Secciones.GetSingleton
                Dim insTaceroPl As Aceros = Aceros.GetSingleton
                Fy = Val(insTaceroPl.TextBox9.Text) 'Fy de la placa de continuidad
                'Apf=tp*Wplaca-patin
                Apf = Val(TextBox43.Text) * Val(TextBox41.Text)
                'Apw=tp*Wplaca-alma
                Apw = Val(TextBox43.Text) * Val(TextBox44.Text)

                'a) Calculo de Ra
                If ComboBox1.SelectedItem = "2" Then
                    Ra = 2 * 0.9 * Fy * Apf
                Else
                    Ra = 0.9 * Fy * Apf
                End If

                'b) Calculo de Rb
                Rb = 0.6 * Fy * Apw

                'c) Calculo de Rc
                'Es necesario calcular la Resistencia de la Zona de Panel Nodal con el aporte de las placas de refuerzo
                Dim RpN, coc As Double 'RpN= Resistencia nominal con placa(s) Nodal(es)
                Dim dbviga As Double = Val(SeccInst.TextBox1.Text)
                Dim tfb As Double = Val(SeccInst.TextBox6.Text)

                Dim Pu, Py As Double
                Dim Fycolumna, Agcolumna As Double
                Fycolumna = Val(insTaceroPl.TextBox5.Text)
                Agcolumna = Val(SeccInst.TextBox10.Text)

                Pu = Val(TextBox4.Text)
                Py = 0.75 * Fycolumna * Agcolumna   'IMPORTANTE: Py ya incluye el 0.75

                'CALCULO DE LA RESISTENCIA DE DISEÑO DE LA ZONA DE PANEL

                'coc= cociente; 
                Dim bfcol As Double = Val(SeccInst.TextBox12.Text)
                Dim twc As Double = Val(SeccInst.TextBox14.Text)
                Dim tfc As Double = Val(SeccInst.TextBox13.Text)
                Dim dcol As Double = Val(SeccInst.TextBox16.Text)
                Dim tz As Double = twc + Val(TextBox52.Text) 'espesor total de la zona de panel incluyendo el refuerzo
                coc = (3 * bfcol * (tfc ^ 2)) / (dbviga * dcol * tz)

                If Pu <= Py Then
                    RpN = Math.Round(0.6 * Fycolumna * dcol * tz * (1 + coc))
                Else
                    Dim pivot As Double
                    pivot = (1.2 * Pu) / (Py / 0.75)
                    RpN = Math.Round(0.6 * Fycolumna * dcol * tz * (1 + coc) * (1.9 - pivot))
                End If
                Rc = RpN

                'd) Calculo de Rd
                Dim fyb As Double = Val(insTaceroPl.TextBox1.Text)
                Dim Ryb As Double = Val(insTaceroPl.TextBox3.Text)
                Dim bfviga As Double = Val(SeccInst.TextBox4.Text)
                If ComboBox1.SelectedItem = "2" Then
                    Rd = 2 * fyb * Ryb * bfviga * tfb
                Else
                    Rd = fyb * Ryb * bfviga * tfb
                End If

                Dim Rplcont As Double
                Rplcont = Math.Round(Math.Min(Math.Min(Ra, Rb), Math.Min(Rc / 2, Rd / 2)))
                TextBox49.Text = Rplcont.ToString

                'Calculo del tamaño mínimo de soldadura de placa de continuidad
                Dim Dmin As Double
                Dmin = Math.Round(Rplcont / (2 * 1.392 * Val(TextBox44.Text)), 2)
                TextBox47.Text = Dmin.ToString

                'si la conexion es una conex. de tope
                Dim DpTapa As Double
                DpTapa = 2 * Dmin
                TextBox72.Text = DpTapa.ToString


                'Tamaño de soldadura de la unión placa nodal-placa de continuidad (En caso de que las placa
                '                                                                   nodal no sobrasale)
                Dim soldPL_pl As Double
                soldPL_pl = Math.Round(Val(TextBox47.Text) / 16, 3)
                If RadioButton7.Checked = True Then
                    Label111.Text = "La placa nodal es soldada a las placas de continuidad con " & soldPL_pl & " in de soldadura de filete."
                End If

                'VALIDO PARA CONEXIONES BUEEP Y BSEEP
                'Calculo del Area de rigidizador y soldadura de filete en los patines de ser necesarias
                If LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida sin Rigidizar" Or LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida Rigidizada" Then
                    'Area del rigidizador
                    Dim Aspl, As_min, Apfred As Double
                    Dim FFu As Double = Val(TextBox149.Text)
                    As_min = Math.Round((FFu - RnPLcont) / (0.9 * Fy), 3)
                    Apfred = Math.Round(Apf, 3)
                    Aspl = 2 * Apfred
                    TextBox164.Text = Aspl.ToString
                    Label289.Text = As_min.ToString + " in2"

                    If Aspl < As_min Then
                        TextBox164.BackColor = Color.Red
                    Else
                        TextBox164.BackColor = Color.WhiteSmoke
                    End If

                    'Soldadura minima de filete en el patin
                    Dim Soldmin As Double
                    Soldmin = Math.Round((Fy * Apf) / (2 * 1.392 * Val(TextBox41.Text)), 2)
                    TextBox165.Text = Soldmin.ToString

                End If
            End If

            'comprobacion del espesor en la soldadura de filete
            If TextBox61.Text <> "" Then
                If Val(TextBox61.Text) > Val(TextBox62.Text) Then
                    TextBox61.BackColor = Color.Red
                    TextBox63.Enabled = False
                    TextBox63.Text = ""
                    TextBox64.Text = ""
                    TextBox65.Text = ""
                    Label104.Text = "No es posible soldar con soldadura de filete, puesto que el espesor de la placa de refuerzo nodal es insuficiente para acomodar el bisel." + vbCr + " " + vbCr + "Proponga un espesor que permita la hechura del bisel, o mejor aún opte por usar soldadura de ranura para unir la placa a los patines de la columna."
                Else
                    TextBox61.BackColor = Color.WhiteSmoke
                    TextBox63.Enabled = True
                    TextBox64.Text = TextBox61.Text
                    Label104.Text = "Establezca un bisel de tal manera que sea el mínimo posible. Tenga en cuenta que entre mayor sea el bisel resultará en un tamaño de soldadura de filete más grande." + vbCr + " " + vbCr + "El máximo bisel posible está limitado al espesor de la placa de refuerzo nodal."
                End If

            End If
            'Dado el caso que esté seleccionado el radioButton de la soldadura de filete, cambiar al radioButton5 (soldadura de ranura CJP)
            RadioButton5.Checked = True

            'CONDICION PARA VER SI LOS ESPESORES CUMPLEN
            If Val(TextBox54.Text) < Val(TextBox56.Text) Then
                TextBox54.BackColor = Color.Red
                RadioButton4.Enabled = False
                Label124.Visible = True
                Label124.Text = "Se requiere soldaduras de tapón para interconectar la(s) placa(s) con el alma de la columna"
                If RadioButton4.Checked = True Then
                    MessageBox.Show("No se puede establecer la disposición de placa nodal espaciada debido a que no reúne los requerimientos de espesor mínimo por pandeo", "Placa nodal espaciada", MessageBoxButtons.OK, MessageBoxIcon.Asterisk)
                    RadioButton3.Checked = True
                End If
            Else
                If TextBox55.BackColor = Color.Red Then
                    TextBox54.BackColor = Color.WhiteSmoke
                    RadioButton4.Enabled = False
                    Label124.Visible = True
                    Label124.Text = "Se requiere soldaduras de tapón para interconectar la(s) placa(s) con el alma de la columna"
                Else
                    TextBox54.BackColor = Color.WhiteSmoke
                    RadioButton4.Enabled = True
                    Label124.Visible = False
                End If
            End If

            'SI EL PANDEO OCURRE, HAY QUE SOLDAR LOS BORDES DE LA PLACA
            If TextBox54.BackColor = Color.Red Then
                Label108.Text = "Para limitar el pandeo local de la placa de refuerzo nodal es necesario soldar los bordes con el tamaño mínimo de soldadura dado en la Tabla J2.4 AISC 360-10." + vbCr + " " + vbCr + "Extender la placa nodal 6 in por encima y por debajo de la viga con mayor peralte, de acuerdo a como lo indica el AISC 341-10 E3.6.3(4)."
            Else
                Label108.Text = "Los bordes superior e inferior de la placa de refuerzo nodal no requieren ser soldados al alma de la columna." + vbCr + " " + vbCr + "Extender la placa nodal 6 in por encima y por debajo de la viga con mayor peralte, de acuerdo a como lo indica el AISC 341-10 E3.6.3(4)."
            End If

        End If

    End Sub


    Private Sub RadioButton3_CheckedChanged(sender As Object, e As EventArgs) Handles RadioButton3.CheckedChanged
        If RadioButton3.Checked Then
            TextBox60.Visible = False
            TextBox58.Visible = False
            TextBox59.Visible = False
            Label94.Visible = False
            Label95.Visible = False
            Label96.Visible = False
            Label97.Visible = False
            Label98.Visible = False
            PictureBox53.Visible = False
            PictureBox54.Visible = False
            RadioButton6.Enabled = True

            If RadioButton1.Checked = True Then
                PictureBox48.Image = My.Resources.PlacaNodalSing
                Label759.Visible = False
            Else
                PictureBox48.Image = My.Resources.PlacaNodalDob
                If SiPLcont = True Then
                    Label759.Visible = True
                End If
            End If

            'SOLDADURA DE RANURA EN CONTACTO CON EL ALMA
            Label114.Visible = True
            Label115.Visible = True
            TextBox69.Visible = True
            Label240.Visible = True
            Label117.Text = "La placa nodal es soldada a los patines de la columna con soldadura de ranura de penetración completa CJP para desarrollar la resistencia total del espesor de la placa a cortante. No son necesarias revisiones adicionales de diseño para esta soldadura. Dado que la placa nodal está contacto con el alma de la columna, considere el ""Encroachment"" permitido para la sección de la columna y detalle un bisel de ser necesario." + vbCr + " " + vbCr + "Una soldadura de ranura parcial PJP con refuerzo de filete también es aceptable para el uso en esta unión."
        Else
            GoTo Line5
        End If

Line5:
    End Sub

    Private Sub RadioButton4_CheckedChanged(sender As Object, e As EventArgs) Handles RadioButton4.CheckedChanged
        If RadioButton4.Checked Then
            'ASEGURAR QUE LA SOLDADURA ESTANDO LA PLACA NODAL DISTANCIADA, SEA SOLO CJP Y NO DE FILETE
            If RadioButton6.Checked = True Then
                RadioButton5.Checked = True
            End If

            'LO QUE OCURRE CUANDO EL RADIOBUTTON4 ES SELECCIONADO
            Label759.Visible = False
            TextBox60.Visible = True
            TextBox58.Visible = True
            TextBox59.Visible = True
            Label94.Visible = True
            Label95.Visible = True
            Label96.Visible = True
            Label97.Visible = True
            Label98.Visible = True
            PictureBox53.Visible = True
            PictureBox54.Visible = True
            RadioButton6.Enabled = False
            Label114.Visible = False
            Label115.Visible = False
            TextBox69.Visible = False
            Label240.Visible = False
            Label117.Text = "La placa nodal es soldada a los patines de la columna con soldadura de ranura de penetración completa CJP con el fin de desarrollar la resistencia total del espesor de la placa nodal a cortante. No son necesarias revisiones adicionales de diseño para esta soldadura." + vbCr + " " + vbCr + "Una soldadura de ranura parcial PJP con refuerzo de filete también es aceptable para el uso en esta unión."

            'Calculo de los espaciamientos mínimos y máximos
            Dim Instanperfil As Secciones = Secciones.GetSingleton
            Dim D, d1, d2 As Double
            Dim bfbeam As Double = Val(Instanperfil.TextBox4.Text)
            D = bfbeam / 2
            d1 = Math.Round((1 / 3) * D, 3)
            d2 = Math.Round((2 / 3) * D, 3)
            TextBox58.Text = d1.ToString
            TextBox59.Text = d2.ToString

            If RadioButton1.Checked = True Then
                PictureBox48.Image = My.Resources.PlacaNodEspaciadaSing
            Else
                PictureBox48.Image = My.Resources.PlacaNodEspaciadaDob
            End If
        Else
            GoTo Line4
        End If

Line4:

    End Sub



    Private Sub RadioButton6_CheckedChanged(sender As Object, e As EventArgs) Handles RadioButton6.CheckedChanged
        If RadioButton6.Checked Then
            If TextBox52.Text = "" Then
                If GroupBox21.Visible = True Then
                    MsgBox("Por favor, introduzca un valor para el espesor de refuerzo", MsgBoxStyle.Critical, "Error")
                End If
                GroupBox28.Visible = False
                Label99.Visible = False
                PictureBox55.Visible = False
                PictureBox77.Visible = False
                Label100.Visible = False
                Label101.Visible = False
                TextBox61.Visible = False
                TextBox62.Visible = False
            Else
                TextBox62.Text = TextBox53.Text
                Label99.Visible = True
                Label100.Visible = True
                Label101.Visible = True
                TextBox61.Visible = True
                TextBox62.Visible = True
                PictureBox55.Visible = True
                PictureBox77.Visible = True
                GroupBox28.Visible = True
                GroupBox31.Visible = False

                'Obtener Encroachment de la Base de Datos
                Dim GetDatSecc As Secciones = Secciones.GetSingleton
                Dim kdet, tfc As Double
                kdet = Val(GetDatSecc.TextBox18.Text)
                tfc = Val(GetDatSecc.TextBox13.Text)

                Dim diferencia As Double
                diferencia = redondear(kdet - tfc, 0.0625)
                consultaEncroach(diferencia.ToString)
                Dim tpmin As Double
                tpmin = kdet - tfc - Encr   'Calculo del espesor minimo para Bisel
                TextBox61.Text = tpmin.ToString
                'Si el espesor minimo sobrepasa al espesor de la placa nodal NO SE PUEDE APLICAR SOLDADURA DE FILETE
                'A menos que se modificque el espesor de la placa de refuerzo nodal
                If tpmin > Val(TextBox62.Text) Then
                    TextBox61.BackColor = Color.Red
                    TextBox63.Enabled = False
                    TextBox63.Text = ""
                    TextBox64.Text = ""
                    TextBox65.Text = ""
                    Label104.Text = "No es posible soldar con soldadura de filete, puesto que el espesor de la placa de refuerzo nodal es insuficiente para acomodar el bisel." + vbCr + " " + vbCr + "Proponga un espesor que permita la hechura del bisel, o mejor aún opte por usar soldadura de ranura para unir la placa a los patines de la columna."
                Else
                    TextBox61.BackColor = Color.WhiteSmoke
                    TextBox63.Enabled = True
                    TextBox64.Text = tpmin.ToString
                    Label104.Text = "Establezca un bisel de tal manera que sea el mínimo posible. Tenga en cuenta que entre mayor sea el bisel resultará en un tamaño de soldadura de filete más grande." + vbCr + " " + vbCr + "El máximo bisel posible está limitado al espesor de la placa de refuerzo nodal."
                End If
            End If
        Else
            GoTo Line3
        End If
Line3:
    End Sub

    Private Sub TextBox63_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox63.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox63.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox63.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox63.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox63.Text = Frac2Num(TextBox63.Text)
            End If

            'Hay que asegurar que el Bisel sea mayor o igual a Tpmin, pero a la vez
            'Menor o igual al espesor de la placa nodal
            Dim tplaca As Double
            tplaca = Val(TextBox62.Text)
            If Val(TextBox63.Text) < Val(TextBox64.Text) Or Val(TextBox63.Text) > Val(TextBox62.Text) Then
                TextBox63.BackColor = Color.Red
            Else
                TextBox63.BackColor = Color.White
                'CALCULO DEL TAMAÑO MINIMO DE SOLDADURA
                Dim GetAcero As Aceros = Aceros.GetSingleton
                Dim FyPlaca As Integer = Val(GetAcero.TextBox9.Text)
                Dim Dmin, Dfilete, Leg As Double
                Dfilete = (0.6 * Val(TextBox62.Text) * FyPlaca) / 1.392 / 16
                'si el bisel es igual al espesor de la placa nodal: Dmin >= tp*Raiz(2)
                If Val(TextBox63.Text) = tplaca Then
                    Dmin = tplaca * Math.Sqrt(2)
                Else
                    'el bisel no es igual al espesor de la placa nodal: Dmin >= tp*Raiz(2)-(tp-bisel)
                    Dmin = tplaca * Math.Sqrt(2) - (tplaca - Val(TextBox63.Text))
                End If
                'El tamaño de soldadura min es el Máx entre Dmin y Dfilete
                Leg = Math.Round((16 * Math.Max(Dfilete, Dmin)), 3)
                TextBox65.Text = Leg.ToString
                TextBox65.Focus()
            End If
        End If
    End Sub

    Private Sub RadioButton5_CheckedChanged(sender As Object, e As EventArgs) Handles RadioButton5.CheckedChanged
        If RadioButton5.Checked Then
            Label99.Visible = False
            Label100.Visible = False
            Label101.Visible = False
            TextBox61.Visible = False
            TextBox62.Visible = False
            PictureBox55.Visible = False
            PictureBox77.Visible = False
            GroupBox28.Visible = False
            GroupBox31.Visible = True

            If RadioButton3.Checked = True Then
                Dim instcualquiera As Secciones = Secciones.GetSingleton
                Dim tcf, kdetc As Double
                tcf = Val(instcualquiera.TextBox13.Text)
                kdetc = Val(instcualquiera.TextBox18.Text)
                Dim Busca As Double
                Busca = redondear(kdetc - tcf, 0.0625)

                consultaEncroach(Busca.ToString)
                TextBox69.Text = Encr
            End If
        Else
            GoTo Line2
        End If
Line2:
    End Sub

    Private Sub RadioButton7_CheckedChanged(sender As Object, e As EventArgs) Handles RadioButton7.CheckedChanged
        If RadioButton7.Checked Then
            TextBox68.Visible = False
            TextBox67.Visible = False
            Label112.Visible = False
            Label110.Visible = False
            PictureBox59.Visible = False
            Label111.Width = 487
            Label111.Height = 24
            Label111.TextAlign = ContentAlignment.TopCenter
            Label111.Location = New Point(213, 53)
            Dim sold As Double
            sold = Math.Round(Val(TextBox47.Text) / 16, 3)

            Label111.Text = "La placa nodal es soldada a las placas de continuidad con " & sold & " in de soldadura de filete."
        Else
            GoTo Line1
        End If
Line1:
    End Sub

    Private Sub RadioButton8_CheckedChanged(sender As Object, e As EventArgs) Handles RadioButton8.CheckedChanged
        If RadioButton8.Checked Then
            TextBox68.Visible = True
            TextBox67.Visible = True
            Label112.Visible = True
            Label110.Visible = True
            PictureBox59.Visible = True
            Label111.Width = 487
            Label111.Height = 100
            Label111.TextAlign = ContentAlignment.TopLeft
            Label111.Location = New Point(213, 36)

            'INSTANCIA DEL SINGLETON PARA OBTENER Kdet Y DETERMINAR CUANTO DEBE SOBRESALIR LA PLACA= 2.5Kdet
            Dim InstanciaKdet As Secciones
            Dim Kdet, sobresale As Double

            InstanciaKdet = Secciones.GetSingleton
            Kdet = Double.Parse(InstanciaKdet.TextBox18.Text)
            If LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida sin Rigidizar" Or LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida Rigidizada" Then
                sobresale = (3 * Kdet) + Val(TextBox96.Text)
            Else
                sobresale = 2.5 * Kdet
            End If

            Label111.Text = "La placa nodal es soldada al alma de la columna con el tamaño mínimo de soldadura Tabla J2.4 de las Especificaciones del AISC. El espesor de la placa nodal es revisado para garantizar que sea capaz de desarrollar la resistencia requerida de la conexión alma-placa de continuidad." + vbCr + " " + vbCr + "La distancia que sobresale la placa nodal por encima y por debajo de cada placa de continuidad es de " + sobresale.ToString + " in."

            'Calculo del espesor adecuado
            Dim tadec, Rct_cw, wplac_alma As Double
            Dim InstMaterial As Aceros = Aceros.GetSingleton
            Dim Fyp As Integer = Val(InstMaterial.TextBox9.Text)

            Rct_cw = Val(TextBox49.Text)
            wplac_alma = Val(TextBox44.Text)
            tadec = Math.Round(Rct_cw / (0.6 * Fyp * wplac_alma * 2), 3)
            TextBox67.Text = tadec.ToString
            If Val(TextBox68.Text) < tadec Then
                TextBox68.BackColor = Color.Red
            Else
                TextBox68.BackColor = Color.WhiteSmoke
            End If
        Else
            GoTo Line0
        End If
Line0:
    End Sub

    Private Sub TextBox68_TextChanged(sender As Object, e As EventArgs) Handles TextBox68.TextChanged
        If Val(TextBox68.Text) < Val(TextBox67.Text) Then
            TextBox68.BackColor = Color.Red
        Else
            TextBox68.BackColor = Color.WhiteSmoke
        End If
    End Sub

    Private Sub TextBox60_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox60.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox60.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox60.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox60.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox60.Text = Frac2Num(TextBox60.Text)
        End If

            If Val(TextBox60.Text) < Val(TextBox58.Text) Or Val(TextBox60.Text) > Val(TextBox59.Text) Then
                TextBox60.BackColor = Color.Red
            Else
                TextBox60.BackColor = Color.White
                GroupBox25.Focus()
            End If
        End If
    End Sub

    '----------------------------------------------------------------------------------------------
    'CALCULOS DE RBS

    Private Sub TextBox37_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox37.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox37.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox37.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox37.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox37.Text = Frac2Num(TextBox37.Text)
            End If
            If Val(TextBox37.Text) < 3 / 8 Then
                TextBox37.BackColor = Color.Red
            Else
                TextBox37.BackColor = Color.WhiteSmoke
            End If
        End If
    End Sub


    '----------------------------------------------------------------------------------------------
    'CALCULOS DE WUF-W

    Private Sub TextBox81_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox81.KeyPress

        'INSTANCIA PARA OBTENER tbf Y CONTROLAR ASI EL INGRESO DE LOS DATOS AL TEXTBOX
        Dim InstTbf As Secciones
        Dim tbf1, aWUF1, aMax, aMin As Double

        InstTbf = Secciones.GetSingleton
        tbf1 = Double.Parse(InstTbf.TextBox6.Text)
        aWUF1 = Math.Max(tbf1, 0.5)
        aMax = aWUF1 + (0.5 * tbf1)
        aMin = aWUF1 - (0.25 * tbf1)

        soloNumeros(Me.TextBox81, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox81.Text) < aMin Or Val(TextBox81.Text) > aMax Then
                MsgBox("Valor inadecuado. De acuerdo a las tolerancias, el mínimo valor posible es " + aMin.ToString + " in y el máximo es " + aMax.ToString + " in.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox81.Focus()
                TextBox81.Text = aWUF1
            Else
                TextBox79.Focus()
            End If
        End If
    End Sub

    Private Sub TextBox79_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox79.KeyPress

        'INSTANCIA PARA OBTENER tbf Y CONTROLAR ASI EL INGRESO DE LOS DATOS AL TEXTBOX
        Dim InstTbf2 As Secciones

        InstTbf2 = Secciones.GetSingleton
        Dim tbf2 As Double = Double.Parse(InstTbf2.TextBox6.Text)
        Dim bWUF2, bmin2, bMin, bMax As Double

        bmin2 = 0.75 * tbf2
        bWUF2 = Math.Max(bmin2, 0.75)
        If tbf2 >= 0.75 Then
            bMax = tbf2 + 1 / 4
        Else
            bMax = bWUF2 + 1 / 4
        End If
        bMin = bWUF2 - 1 / 4

        soloNumeros(Me.TextBox79, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox79.Text) < bMin Or Val(TextBox79.Text) > bMax Then
                MsgBox("Valor inadecuado. De acuerdo a las tolerancias, el mínimo valor posible es " + bMin.ToString + " in y el máximo es " + bMax.ToString + " in.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox79.Focus()
                TextBox79.Text = bWUF2
            Else
                TextBox75.Focus()
            End If
            'SI YA SE HAN HECHOS CALCULOS Y SOLO SE ESTÁ MODIFICANDO ESTE VALOR HAY QUE RECALCULAR RAPIDAMENTE AL DAR ENTER
            If TextBox87.Text <> "" Then
                Dim hp As Double

                'INSTANCIA PARA OBTENER tbf Y d DE LA VIGA
                Dim InstHP As Secciones
                Dim tbf, dvig As Double

                'CALCULO DE LA ALTURA O LONGITUD DE LA PLACA SIMPLE
                InstHP = Secciones.GetSingleton
                tbf = Double.Parse(InstHP.TextBox6.Text)
                dvig = Double.Parse(InstHP.TextBox1.Text)

                hp = dvig - (2 * tbf) - (2 * (Val(TextBox79.Text) + Val(TextBox75.Text))) + (2 * (Val(TextBox85.Text)))
                TextBox87.Text = hp.ToString
                If TextBox89.Text <> "" Then
                    'CALCULO DE EL NUEVO VALOR DE a'
                    Dim aPrima, hp2a As Double
                    hp2a = dvig - (2 * tbf) - 2 * (Val(TextBox79.Text) + Val(TextBox75.Text))
                    aPrima = (Val(TextBox89.Text) - hp2a) / 2
                    TextBox92.Text = aPrima.ToString

                    If aPrima < 0.25 Or aPrima > 0.5 Then
                        TextBox92.BackColor = Color.Red
                    Else
                        TextBox92.BackColor = Color.WhiteSmoke
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub TextBox75_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox75.KeyPress
        soloNumeros(Me.TextBox75, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox75.Text) < 3 / 8 Then
                MsgBox("Valor inadecuado. El mínimo valor posible para el radio es 3/8 in.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox75.Focus()
                TextBox75.Text = 3 / 8
            Else
                TextBox82.Focus()
            End If

            'SI YA SE HAN HECHOS CALCULOS Y SOLO SE ESTÁ MODIFICANDO ESTE VALOR HAY QUE RECALCULAR RAPIDAMENTE AL DAR ENTER
            If TextBox87.Text <> "" Then
                Dim hp As Double

                'INSTANCIA PARA OBTENER tbf Y d DE LA VIGA
                Dim InstHP As Secciones
                Dim tbf, dvig As Double

                'CALCULO DEL ANCHO  DE LA PLACA SIMPLE
                Dim ancho As Double
                ancho = Val(TextBox82.Text) + Val(TextBox75.Text) + Val(TextBox74.Text) + Val(TextBox93.Text)
                TextBox86.Text = ancho.ToString

                'CALCULO DE LA ALTURA O LONGITUD DE LA PLACA SIMPLE
                InstHP = Secciones.GetSingleton
                tbf = Double.Parse(InstHP.TextBox6.Text)
                dvig = Double.Parse(InstHP.TextBox1.Text)

                hp = dvig - (2 * tbf) - (2 * (Val(TextBox79.Text) + Val(TextBox75.Text))) + (2 * (Val(TextBox85.Text)))
                TextBox87.Text = hp.ToString
                If TextBox89.Text <> "" Then
                    'CALCULO DE EL NUEVO VALOR DE a'
                    Dim aPrima, hp2a As Double
                    hp2a = dvig - (2 * tbf) - 2 * (Val(TextBox79.Text) + Val(TextBox75.Text))
                    aPrima = (Val(TextBox89.Text) - hp2a) / 2
                    TextBox92.Text = aPrima.ToString

                    If aPrima < 0.25 Or aPrima > 0.5 Then
                        TextBox92.BackColor = Color.Red
                    Else
                        TextBox92.BackColor = Color.WhiteSmoke
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub TextBox82_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox82.KeyPress

        'INSTANCIA PARA OBTENER tbf Y CONTROLAR ASI EL INGRESO DE LOS DATOS AL TEXTBOX
        Dim InstTbf3 As Secciones
        Dim tbf3, dWUF2, dMin, dMax As Double

        InstTbf3 = Secciones.GetSingleton
        tbf3 = Double.Parse(InstTbf3.TextBox6.Text)

        dWUF2 = 3 * tbf3
        dMax = dWUF2 + 1 / 2
        dMin = dWUF2 - 1 / 2

        soloNumeros(Me.TextBox82, e)
        If Asc(e.KeyChar) = 13 Then

            If Val(TextBox82.Text) < dMin Or Val(TextBox82.Text) > dMax Then
                MsgBox("Valor inadecuado. De acuerdo a las tolerancias, el mínimo valor posible es " + dMin.ToString + " in y el máximo es " + dMax.ToString + " in.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox82.Focus()
                TextBox82.Text = dWUF2
            Else
                TextBox93.Focus()
            End If

            'SI YA SE HAN HECHOS CALCULOS Y SOLO SE ESTÁ MODIFICANDO ESTE VALOR HAY QUE RECALCULAR RAPIDAMENTE AL DAR ENTER
            If TextBox86.Text <> "" Then

                'CALCULO DEL ANCHO Y LONG DE LA PLACA SIMPLE
                Dim ancho As Double
                ancho = Val(TextBox82.Text) + Val(TextBox75.Text) + Val(TextBox74.Text) + Val(TextBox93.Text)
                TextBox86.Text = ancho.ToString
            End If

        End If
    End Sub
    Private Sub TextBox93_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox93.KeyPress
        soloNumeros(Me.TextBox93, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox93.Text) < 0.5 Then
                TextBox93.Text = 0.5
                TextBox93.Focus()
            Else
                TextBox85.Focus()

                'SI YA SE HAN HECHOS CALCULOS Y SOLO SE ESTÁ MODIFICANDO ESTE VALOR HAY QUE RECALCULAR RAPIDAMENTE AL DAR ENTER
                If TextBox86.Text <> " " Then

                    'CALCULO DEL ANCHO DE LA PLACA SIMPLE
                    Dim ancho As Double
                    ancho = Val(TextBox82.Text) + Val(TextBox75.Text) + Val(TextBox74.Text) + Val(TextBox93.Text)
                    TextBox86.Text = ancho.ToString
                End If
            End If
        End If

        'SI YA SE HAN HECHOS CALCULOS Y SOLO SE ESTÁ MODIFICANDO ESTE VALOR HAY QUE RECALCULAR RAPIDAMENTE AL DAR ENTER
        If TextBox86.Text <> "" Then

            'CALCULO DEL ANCHO DE LA PLACA SIMPLE
            Dim ancho As Double
            ancho = Val(TextBox82.Text) + Val(TextBox75.Text) + Val(TextBox74.Text) + Val(TextBox93.Text)
            TextBox86.Text = ancho.ToString
        End If

    End Sub

    Private Sub TextBox85_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox85.KeyPress
        soloNumeros(Me.TextBox85, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox85.Text) < 1 / 4 Or Val(TextBox85.Text) > 1 / 2 Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox85.Focus()
                TextBox85.Text = ""
            Else
                TextBox83.Focus()
            End If


            'SI YA SE HAN HECHOS CALCULOS Y SOLO SE ESTÁ MODIFICANDO ESTE VALOR HAY QUE RECALCULAR RAPIDAMENTE AL DAR ENTER
            If TextBox87.Text <> "" Then
                Dim hp As Double

                'INSTANCIA PARA OBTENER tbf Y d DE LA VIGA
                Dim InstHP As Secciones
                Dim tbf, dvig As Double

                'CALCULO DE LA ALTURA O LONGITUD DE LA PLACA SIMPLE
                InstHP = Secciones.GetSingleton
                tbf = Double.Parse(InstHP.TextBox6.Text)
                dvig = Double.Parse(InstHP.TextBox1.Text)

                hp = dvig - (2 * tbf) - (2 * (Val(TextBox79.Text) + Val(TextBox75.Text))) + (2 * (Val(TextBox85.Text)))
                TextBox87.Text = hp.ToString
                If TextBox89.Text <> "" Then
                    'CALCULO DE EL NUEVO VALOR DE a'
                    Dim aPrima, hp2a As Double
                    hp2a = dvig - (2 * tbf) - 2 * (Val(TextBox79.Text) + Val(TextBox75.Text))
                    aPrima = (Val(TextBox89.Text) - hp2a) / 2
                    TextBox92.Text = aPrima.ToString

                    If aPrima < 0.25 Or aPrima > 0.5 Then
                        TextBox92.BackColor = Color.Red
                    Else
                        TextBox92.BackColor = Color.WhiteSmoke
                    End If
                End If
            End If

        End If
    End Sub

    Private Sub TextBox83_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox83.KeyPress
        soloNumeros(Me.TextBox83, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox83.Text) < 1 Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox83.Focus()
                TextBox83.Text = " "
            Else
                TextBox76.Focus()
            End If
        End If
    End Sub

    Private Sub TextBox76_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox76.KeyPress
        soloNumeros(Me.TextBox76, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox76.Text) < 20 Or Val(TextBox76.Text) > 40 Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox76.Focus()
                TextBox76.Text = ""
            Else
                TextBox74.Focus()
            End If
        End If
    End Sub

    Private Sub TextBox74_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox74.KeyPress
        soloNumeros(Me.TextBox74, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox74.Text) < 2 Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox74.Focus()
                TextBox74.Text = ""
            Else
                TextBox73.Focus()
            End If

            'SI YA SE HAN HECHOS CALCULOS Y SOLO SE ESTÁ MODIFICANDO ESTE VALOR HAY QUE RECALCULAR RAPIDAMENTE AL DAR ENTER
            If TextBox86.Text <> "" Then

                'CALCULO DEL ANCHO DE LA PLACA SIMPLE
                Dim ancho As Double
                ancho = Val(TextBox82.Text) + Val(TextBox75.Text) + Val(TextBox74.Text) + Val(TextBox93.Text)
                TextBox86.Text = ancho.ToString
            End If

        End If
    End Sub

    Private Sub TextBox73_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox73.KeyPress
        soloNumeros(Me.TextBox73, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox73.Text) < 1 / 2 Or Val(TextBox73.Text) > 1 Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox73.Focus()
                TextBox73.Text = ""
            Else
                TextBox89.Focus()

                'CALCULO DEL ANCHO Y LONG DE LA PLACA SIMPLE
                Dim ancho As Double
                ancho = Val(TextBox82.Text) + Val(TextBox75.Text) + Val(TextBox74.Text) + Val(TextBox93.Text)
                TextBox86.Text = ancho.ToString

                Dim hp As Double

                'INSTANCIA PARA OBTENER tbf Y d DE LA VIGA
                Dim InstHP As Secciones
                Dim tbf, dvig As Double

                InstHP = Secciones.GetSingleton
                tbf = Double.Parse(InstHP.TextBox6.Text)
                dvig = Double.Parse(InstHP.TextBox1.Text)

                hp = dvig - (2 * tbf) - (2 * (Val(TextBox79.Text) + Val(TextBox75.Text))) + (2 * (Val(TextBox85.Text)))
                TextBox87.Text = hp.ToString
            End If
        End If
    End Sub
    Private Sub TextBox89_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox89.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox89.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox89.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox89.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox89.Text = Frac2Num(TextBox89.Text)
            End If
            TextBox192.Focus()

            'CALCULO DE EL NUEVO VALOR DE a'
            Dim aPrima As Double

            'INSTANCIA PARA OBTENER tbf Y d DE LA VIGA
            Dim InstAprim As Secciones
            Dim hp2a, tbf, dvig As Double

            InstAprim = Secciones.GetSingleton
            tbf = Double.Parse(InstAprim.TextBox6.Text)
            dvig = Double.Parse(InstAprim.TextBox1.Text)

            hp2a = dvig - (2 * tbf) - 2 * (Val(TextBox79.Text) + Val(TextBox75.Text))
            aPrima = (Val(TextBox89.Text) - hp2a) / 2
            TextBox92.Text = aPrima.ToString

            If aPrima < 0.25 Or aPrima > 0.5 Then
                TextBox92.BackColor = Color.Red
            Else
                TextBox92.BackColor = Color.WhiteSmoke
            End If

        End If
    End Sub

    'Introducir espesor de placa simple WUF-W
    Private Sub TextBox192_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox192.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox192.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox192.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox192.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox192.Text = Frac2Num(TextBox192.Text)
            End If
            Dim Inst As Secciones = Secciones.GetSingleton
            Dim TWB As Double = Val(Inst.TextBox2.Text)
            If Val(TextBox192.Text) < TWB Then
                TextBox192.BackColor = Color.Red
                MsgBox("El espesor de la placa debe ser almenos el espesor del alma de la viga", MsgBoxStyle.Exclamation, "Espesor incorrecto")
            Else
                TextBox192.BackColor = Color.White
                MsgBox("Puede proceder a realizar los cálculos de Diseño desde el Menú 'Diseño->Calcular', o bien, presionando la tecla F5. Asegúrese de haber ingresado todos los datos que se solicitan antes de continuar.", MsgBoxStyle.Information, "Ayuda de ADCAS")
            End If
        End If
    End Sub
    'Introducir Fy de la placa simple
    Public Sub CalcularPLsimple()
        Dim hp, tp, Dmin_f, DminPJP As Double
        hp = Val(TextBox89.Text)
        tp = Val(TextBox192.Text)

        Dim Fy As Integer = Val(TextBox193.Text)
        Dim Ry As Double = Val(TextBox199.Text)

        'Resistencia de la placa a corte
        Dim Rn As Double
        Rn = 0.6 * hp * tp * Fy * Ry
        Dim Rnmostrar As Double
        Rnmostrar = Math.Round(Rn, 3)
        TextBox200.Text = Rnmostrar.ToString

        'Tamaño min de soldadura de filete
        Dmin_f = Math.Floor(Rn / 2 / 1.392 / hp) + 1
        TextBox202.Text = Dmin_f.ToString + "/16"

        'Tamaño min de soldadura PJP
        DminPJP = Math.Round(Rn / 0.75 / 70 / 0.6 / hp, 3)
        TextBox203.Text = DminPJP.ToString
    End Sub
    Private Sub TextBox193_TextChanged(sender As Object, e As EventArgs) Handles TextBox193.TextChanged
        CalcularPLsimple()
    End Sub
    'Introducir Ry de la placa simple
    Private Sub TextBox199_TextChanged(sender As Object, e As EventArgs) Handles TextBox199.TextChanged
        CalcularPLsimple()
    End Sub
    'Boton Ayuda para soldadura de filete
    Private Sub Button10_Click(sender As Object, e As EventArgs) Handles Button10.Click
        MsgBox("Por recomendación del AISC el uso de soldadura de filete de un solo lado entre la placa simple y el patín de la columna DEBE SER EVITADO, ya que si la placa es cargada inadvertidamente o golpeada en dirección fuera del plano durante la construcción, la soldadura de filete puede romperse y dar lugar a problemas de seguridad de la soldadura." &
               vbCr + " " + vbCr + "El tamaño de la apertura de la raíz de la soldadura CJP entre el alma de la viga con la columna, debe coincidir con el tamaño de la soldadura de filete que será colocada en dicha abertura. También tenga presente que la colocación de la soldadura del alma puede resultar en entremezclado de metal de soldadura; requisitos para entremezclado de metales de relleno especificados en AWS D1.8 (AWS,2009) se deben seguir en este caso.", MsgBoxStyle.Information, "Acerca de soldadura de filete")
    End Sub

    'Boton Ayuda para soldadura PJP
    Private Sub Button11_Click(sender As Object, e As EventArgs) Handles Button11.Click
        MsgBox("El tamaño requerido de soldadura de ranura de penetración parcial (PJP) dado, corresponde a una soldadura con Electrodo E70. Se debe asegurar que el tamaño de garganta sea menor al espesor de la placa simple, de caso contrario no puede aplicarse este tipo de soldadura.", MsgBoxStyle.Information, "Acerca de soldadura PJP")
    End Sub

    '--------------------------------------------
    'CALLCULOS DE BUEEP Y BSEEP

    Private Sub ComboBox3_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox3.SelectedIndexChanged

        If ComboBox3.SelectedIndex = 1 Then
            PictureBox71.Image = My.Resources.bseepOchopernos
            PictureBox97.Visible = True
            TextBox94.Visible = True
            Label153.Visible = True
            Label150.Text = "in  Valor entre 5 y 6"
            Label149.Text = "in  Valor entre 9 y 15"
            Label144.Text = "in  Valor entre 1.625 y 2"
            Label157.Text = "in  Valor entre 1.625 y 2"
            LabeltpExt.Text = "in Valor entre 0.75 y 2.5"

            'YA QUE LOS LIM DE PRECALIF. DEPENDEN DE ESTE COMBOBOX, VERIFICAR LOS DATOS QUE YA SE HAN INTRODUCIDO
            'Verificacion de pfo y pfi

            If TextBox80.Text <> "" Then
                Dim smin, diam As Double
                Dim db2 As String = ComboBox5.SelectedItem.ToString

                diam = Frac2Num(db2.ToString)

                If diam <= 1 Then
                    smin = diam + 1 / 2
                Else
                    smin = diam + 3 / 4
                End If
                Dim pfomin As Double = Math.Max(smin, 1.625)

                If TextBox80.Text <> "" Then
                    If Val(TextBox80.Text) < pfomin Or Val(TextBox80.Text) > 2 Then
                        TextBox80.BackColor = Color.Red
                    Else
                        TextBox80.BackColor = Color.White
                    End If
                End If

                If TextBox100.Text <> "" Then
                    If Val(TextBox100.Text) < pfomin Or Val(TextBox100.Text) > 2 Then
                        TextBox100.BackColor = Color.Red
                    Else
                        TextBox100.BackColor = Color.White
                    End If
                End If
            End If

            'verificacion de g
            If TextBox90.Text <> "" Then
                'LIM DE PRECALIFICACION PARA EL GRAMIL EN DEPENDENCIA DE SI ES 4E, 4ES y/o 8ES

                'INSTANCIA PARA OBTENER bf 
                Dim Instbf As Secciones = Secciones.GetSingleton
                Dim bf As String = Instbf.TextBox4.Text


                'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
                Dim limmax As Double
                limmax = Math.Min(Double.Parse(bf), 6)

                If Val(TextBox90.Text) < 5 Or Val(TextBox90.Text) > limmax Then
                    TextBox90.BackColor = Color.Red
                Else
                    TextBox90.BackColor = Color.White
                End If
            End If

            'verificacion de bp (ancho de placa)
            If TextBox88.Text <> "" Then
                'INSTANCIA PARA OBTENER bf 
                Dim Instbf As Secciones = Secciones.GetSingleton
                Dim bf As String = Instbf.TextBox4.Text
                Dim bpmax As Double = 1 + Double.Parse(bf)

                'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
                Dim limmax2 As Double
                limmax2 = Math.Min(bpmax, 15)   'valor máximo

                If Val(TextBox88.Text) < 9 Or Val(TextBox88.Text) > limmax2 Then
                    TextBox88.BackColor = Color.Red
                Else
                    TextBox88.BackColor = Color.White
                End If
            End If

            'verificacion de tp (espesor de placa)
            If TextBox96.Text <> "" Then
                'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
                Dim tpmin, limMin As Double

                tpmin = Val(TextBox95.Text)
                limMin = Math.Max(tpmin, 0.75)

                If Val(TextBox96.Text) < limMin Or Val(TextBox96.Text) > 2.5 Then
                    TextBox96.BackColor = Color.Red
                Else
                    TextBox96.BackColor = Color.White
                End If
            End If

        Else
            PictureBox71.Image = My.Resources.bseepCuatropernos
            PictureBox97.Visible = False
            TextBox94.Visible = False
            Label153.Visible = False
            Label150.Text = "in  Valor entre 3.25 y 6"
            Label149.Text = "in  Valor entre 7 y 10.75"
            Label144.Text = "in  Valor entre 1.75 y 5.5"
            Label157.Text = "in  Valor entre 1.75 y 5.5"
            LabeltpExt.Text = "in Valor entre 0.5 y 1.5"

            'YA QUE LOS LIM DE PRECALIF. DEPENDEN DE ESTE COMBOBOX, VERIFICAR LOS DATOS QUE YA SE HAN INTRODUCIDO
            'Verificacion de pfo y pfi
            If TextBox80.Text <> "" Then
                Dim smin, diam As Double
                Dim db2 As String = ComboBox5.SelectedItem.ToString

                diam = Frac2Num(db2.ToString)

                If diam <= 1 Then
                    smin = diam + 1 / 2
                Else
                    smin = diam + 3 / 4
                End If

                Dim pfomin2 As Double = Math.Max(smin, 1.75)
                If TextBox80.Text <> "" Then
                    If Val(TextBox80.Text) < pfomin2 Or Val(TextBox80.Text) > 5.5 Then
                        TextBox80.BackColor = Color.Red
                    Else
                        TextBox80.BackColor = Color.White
                    End If
                End If

                If TextBox100.Text <> "" Then
                    If Val(TextBox100.Text) < pfomin2 Or Val(TextBox100.Text) > 5.5 Then
                        TextBox100.BackColor = Color.Red
                    Else
                        TextBox100.BackColor = Color.White
                    End If
                End If
            End If

            'verificacion de g
            If TextBox90.Text <> "" Then
                'LIM DE PRECALIFICACION PARA EL GRAMIL EN DEPENDENCIA DE SI ES 4E, 4ES y/o 8ES

                'INSTANCIA PARA OBTENER bf 
                Dim Instbf As Secciones = Secciones.GetSingleton
                Dim bf As String = Instbf.TextBox4.Text


                'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
                Dim limmax As Double
                limmax = Math.Min(Double.Parse(bf), 6)

                If Val(TextBox90.Text) < 3.25 Or Val(TextBox90.Text) > limmax Then
                    TextBox90.BackColor = Color.Red
                Else
                    TextBox90.BackColor = Color.White
                End If
            End If

            'verificacion de bp (ancho de placa)
            If TextBox88.Text <> "" Then
                'INSTANCIA PARA OBTENER bf 
                Dim Instbf As Secciones = Secciones.GetSingleton
                Dim bf As String = Instbf.TextBox4.Text
                Dim bpmax As Double = 1 + Double.Parse(bf)

                'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
                Dim limmax2 As Double
                limmax2 = Math.Min(bpmax, 10.75)   'valor máximo

                If Val(TextBox88.Text) < 7 Or Val(TextBox88.Text) > limmax2 Then
                    TextBox88.BackColor = Color.Red
                Else
                    TextBox88.BackColor = Color.White
                End If
            End If

            'verificacion de tp (espesor de placa)
            If TextBox96.Text <> "" Then
                'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
                Dim tpmin, limMin As Double

                tpmin = Val(TextBox95.Text)
                limMin = Math.Max(tpmin, 0.5)

                If Val(TextBox96.Text) < limMin Or Val(TextBox96.Text) > 1.5 Then
                    TextBox96.BackColor = Color.Red
                Else
                    TextBox96.BackColor = Color.White
                End If
            End If
        End If

    End Sub

    Private Sub ComboBox6_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox6.SelectedIndexChanged
        Select Case ComboBox6.SelectedIndex
            Case 0
                TextBox78.Text = "90"
                TextBox84.Text = "54"
            Case 1
                TextBox78.Text = "90"
                TextBox84.Text = "68"
            Case 2
                TextBox78.Text = "113"
                TextBox84.Text = "68"
            Case 3
                TextBox78.Text = "113"
                TextBox84.Text = "84"
        End Select
    End Sub

    Private Sub ComboBox6_KeyPress(sender As Object, e As KeyPressEventArgs) Handles ComboBox6.KeyPress
        If Asc(e.KeyChar) = 13 Then
            ComboBox4.Focus()
        Else
            e.Handled = True
        End If
    End Sub
    Private Sub ComboBox4_KeyPress(sender As Object, e As KeyPressEventArgs) Handles ComboBox4.KeyPress
        If Asc(e.KeyChar) = 13 Then
            ComboBox5.Focus()
        Else
            e.Handled = True
        End If
    End Sub

    'Boton de Ayuda para seleccionar el diametro

    Private Sub Button7_Click(sender As Object, e As EventArgs) Handles Button7.Click
        MsgBox("El cálculo del diámetro requerido depende del momento en la cara de la columna y la geometría de la conexión. Proponga un diámetro inicial de prueba e introduzca los valores geométricos preeliminares; una vez realice los cálculos de diseño desde el menú 'Diseño->Calcular' el diámetro requerido será determinado y podrá verificarlo desde esta casilla.", MsgBoxStyle.Information, "Acerca del diámetro requerido")
    End Sub

    Private Sub ComboBox5_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox5.SelectedIndexChanged

        'SI YA SE HAN INTRODUCIDO DATOS EN LOS TEXTBOX, VERIFICAR SI CUMPLEN
        'chekeo del diametro minimo requerido
        If TextBox77.Text <> "" Then
            Dim diam As Double
            diam = Frac2Num(ComboBox5.SelectedItem.ToString)
            If Val(TextBox77.Text) > diam Then
                ComboBox5.BackColor = Color.Red
            Else
                ComboBox5.BackColor = Color.White
            End If
        End If

        'ACTUALIZAR LOS LIMITES DE pfo, pfi, de y pb
        'chekeo de pfo y pfi
        If TextBox80.Text <> "" Or TextBox100.Text <> "" Then
            Dim smin, diam As Double
            Dim db As String
            db = ComboBox5.SelectedItem.ToString

            diam = Frac2Num(db.ToString)

            If diam <= 1 Then
                smin = diam + 1 / 2
            Else
                smin = diam + 3 / 4
            End If

            'limite inferior de precalificacion
            Dim pfomin As Double
            Dim pfolim As String

            If ComboBox3.Visible = True Then
                pfolim = Strings.Trim(Strings.Mid(Label144.Text, 17, 5))
            Else
                pfolim = Strings.Trim(Strings.Mid(Label144.Text, 17, 3))
            End If

            pfomin = Math.Max(smin, Val(pfolim))    'valor minimo de pfo y pfi

            'limite superior de precalificacion
            'LIMITE SUPERIOR EN DEPENDENCIA DE 4E, 4ES y/o 8ES.
            Dim pfol2 As String   'lim.SUPERIOR de precalificación.

            If ComboBox3.Visible = True Then
                pfol2 = Strings.Trim(Strings.Mid(Label144.Text, 24, 5))
            Else
                pfol2 = Strings.Trim(Strings.Mid(Label144.Text, 23, 4))
            End If
            Dim pfomax As Double = Val(pfol2)   'valor maximo

            'SI EL VALOR DE pfo y/o pfi SON MENORES A pfomin RESALTAR EN ROJO
            'SI EL VALOR DE pfo y/o pfi SON MAYORES A pfomax RESALTAR EN ROJO
            If TextBox80.Text <> "" Then
                If Val(TextBox80.Text) < pfomin Or Val(TextBox80.Text) > pfomax Then  'pfo
                TextBox80.BackColor = Color.Red
            Else
                TextBox80.BackColor = Color.White
            End If
            End If
            If TextBox100.Text <> "" Then
                If Val(TextBox100.Text) < pfomin Or Val(TextBox100.Text) > pfomax Then  'pfi
                TextBox100.BackColor = Color.Red
            Else
                TextBox100.BackColor = Color.White
            End If
            End If
        End If

        'chekeo de de
        If TextBox98.Text <> "" Then
            consultaPernos1(ComboBox5.Text)
            Dim Instwb As Secciones = Secciones.GetSingleton
            Dim tfc As Double = Val(Instwb.TextBox13.Text)

            Dim d1 As Double = Math.Min(Val(TextBox96.Text), tfc)
            Dim demax As Double = Math.Min(12 * d1, 6)

            If Val(TextBox98.Text) < demin Or Val(TextBox98.Text) > demax Then
                TextBox98.BackColor = Color.Red
            Else
                TextBox98.BackColor = Color.White
            End If
        End If

            'chekeo de pb
        If TextBox94.Text <> "" Then
            Dim diam As Double
            Dim db As String
            db = ComboBox5.SelectedItem.ToString

            diam = Frac2Num(db.ToString)
            Dim limpb, pbmin As Double
            pbmin = 3 * diam

            limpb = Math.Max(pbmin, 3.5)
            'SI EL VALOR DE pb ES MENOR A limpb RESALTAR EN ROJO
            If Val(TextBox94.Text) < limpb Then   'pb
                TextBox94.BackColor = Color.Red
            Else
                TextBox94.BackColor = Color.White
            End If
        End If
    End Sub
    Private Sub ComboBox5_KeyPress(sender As Object, e As KeyPressEventArgs) Handles ComboBox5.KeyPress
        If Asc(e.KeyChar) = 13 Then
            TextBox90.Focus()
        Else
            e.Handled = True
        End If
    End Sub

    Private Sub TextBox90_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox90.KeyPress
        LabelMinMax.Visible = True

        Dim workgage As Double
        'INSTANCIA PARA OBTENER bf 
        Dim Instbf As Secciones = Secciones.GetSingleton
        Dim bf As String = Instbf.TextBox4.Text
        consultColumna(TextBox1.Text)
        workgage = Val(wgageCol)

        LabelMinMax.Text = "Gramil práctico= " & workgage & " in,  Máx = " & bf & " in."
        ToolTip2.SetToolTip(LabelMinMax, "Puede proponer un gramil igual al gramil práctico, siempre y cuando" + vbCr + "los límites de precalificación y el valor máximo posible sean satisfechos." + vbCr + " " + vbCr + "La máxima dimension del gramil está limitada al ancho del patín de la" + vbCr + "viga conectada. Esto asegura un camino de carga favorable entre" + vbCr + "el patín de la viga y la conexión con pernos.")
        ToolTip2.SetToolTip(GroupBox41, "Puede proponer un gramil igual al gramil práctico, siempre y cuando" + vbCr + "los límites de precalificación y el valor máximo posible sean satisfechos." + vbCr + " " + vbCr + "La máxima dimension del gramil está limitada al ancho del patín de la" + vbCr + "viga conectada. Esto asegura un camino de carga favorable entre" + vbCr + "el patín de la viga y la conexión con pernos.")
        ToolTip2.IsBalloon = True
        ToolTip2.ToolTipIcon = ToolTipIcon.Info
        ToolTip2.ToolTipTitle = "Consideraciones para el gramil"
        ToolTip2.AutoPopDelay = 9500

        'LIM DE PRECALIFICACION PARA EL GRAMIL EN DEPENDENCIA DE SI ES 4E, 4ES y/o 8ES
        Dim gmin As String
        Dim gmax As String
        If ComboBox3.Visible = True Then
            If ComboBox3.SelectedItem = "4ES" Then
                gmin = Strings.Mid(Label150.Text, 17, 4)
                gmax = Strings.Mid(Label150.Text, 24, 1)
            Else
                gmin = Strings.Mid(Label150.Text, 17, 1)    'para 8ES
                gmax = Strings.Mid(Label150.Text, 21, 1)
            End If
        Else
            gmin = "4"    'para 4E
            gmax = "6"
        End If

        'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
        Dim limmax As Double
        limmax = Math.Min(Double.Parse(bf), Val(gmax))

        soloNumeros(Me.TextBox90, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox90.Text) < gmin Or Val(TextBox90.Text) > limmax Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox90.Focus()
                TextBox90.Text = ""
            Else
                TextBox88.Focus()
                TextBox90.BackColor = Color.White
            End If
        End If
    End Sub

    Private Sub TextBox88_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox88.KeyPress
        LabelMinMax.Visible = True

        'INSTANCIA PARA OBTENER bf 
        Dim Instbf2 As Secciones = Secciones.GetSingleton
        Dim bf2 As String = Instbf2.TextBox4.Text
        Dim bpmax As Double = 1 + Double.Parse(bf2)

        LabelMinMax.Text = "Máx = " & bpmax & " in."
        ToolTip2.SetToolTip(LabelMinMax, "El ancho efectivo de la placa de extremo no debe tomarse mayor al ancho del patín de la viga conectada más 1 in.")
        ToolTip2.SetToolTip(GroupBox41, "El ancho efectivo de la placa de extremo no debe tomarse mayor al ancho del patín de la viga conectada más 1 in.")
        ToolTip2.IsBalloon = True
        ToolTip2.ToolTipIcon = ToolTipIcon.Info
        ToolTip2.ToolTipTitle = "Consideraciones para el ancho de la placa"
        ToolTip2.AutoPopDelay = 5500

        'LIM DE PRECALIFICACION PARA EL bp (ancho de la placa de extremo) EN DEPENDENCIA DE SI ES 4E, 4ES y/o 8ES
        Dim bpinf, bpsup As String
        bpinf = Strings.Mid(Label149.Text, 17, 1)
        bpsup = Strings.Mid(Label149.Text, 21)


        'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
        Dim limmax2 As Double
        limmax2 = Math.Min(bpmax, Val(bpsup))   'valor máximo

        soloNumeros(Me.TextBox88, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox88.Text) < bpinf Or Val(TextBox88.Text) > limmax2 Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox88.Focus()
                TextBox88.Text = ""
            Else
                TextBox80.Focus()
                TextBox88.BackColor = Color.White
            End If
        End If
    End Sub


    Private Sub TextBox80_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox80.KeyPress
        LabelMinMax.Visible = True

        Dim smin, diam As Double
        Dim db As String
        db = ComboBox5.SelectedItem.ToString

        diam = Frac2Num(db.ToString)

        If diam <= 1 Then
            smin = diam + 1 / 2
        Else
            smin = diam + 3 / 4
        End If

        LabelMinMax.Text = "Mín = " & smin & " in."
        ToolTip2.SetToolTip(LabelMinMax, "Para un diámetro de perno de hasta 1 in. la distancia de paso mínima será el diámetro + 1/2 in." + vbCr + " " + vbCr + "Para un diámetro mayor a 1 in. la distancia de paso mínima será el diámetro + 3/4 in.")
        ToolTip2.SetToolTip(GroupBox41, "Para un diámetro de perno de hasta 1 in. la distancia de paso mínima será el diámetro + 1/2 in." + vbCr + " " + vbCr + "Para un diámetro mayor a 1 in. la distancia de paso mínima será el diámetro + 3/4 in.")
        ToolTip2.IsBalloon = True
        ToolTip2.ToolTipIcon = ToolTipIcon.Info
        ToolTip2.ToolTipTitle = "Consideraciones para la distancia de paso exterior"
        ToolTip2.AutoPopDelay = 6500


        Dim pfolim As String   'lim.inferior de precalif. en dependencia de 4E, 4ES y/o 8ES.

        If ComboBox3.Visible = True Then
            pfolim = Strings.Trim(Strings.Mid(Label144.Text, 17, 5))
        Else
            pfolim = Strings.Trim(Strings.Mid(Label144.Text, 17, 3))
        End If

        'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
        Dim pfomin As Double = Math.Max(smin, Val(pfolim))   'valor minimo

        'LIMITE SUPERIOR EN DEPENDENCIA DE 4E, 4ES y/o 8ES.
        Dim pfol2 As String   'lim.SUPERIOR de precalificación.

        If ComboBox3.Visible = True Then
            pfol2 = Strings.Trim(Strings.Mid(Label144.Text, 24, 5))
        Else
            pfol2 = Strings.Trim(Strings.Mid(Label144.Text, 23, 4))
        End If
        Dim pfomax As Double = Val(pfol2)   'valor maximo

        soloNumeros(Me.TextBox80, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox80.Text) < pfomin Or Val(TextBox80.Text) > pfomax Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox80.Focus()
                TextBox80.Text = ""
            Else
                TextBox100.Focus()
                TextBox80.BackColor = Color.White

                'SI hst & Lst ya han sido calculados, actualizar el calculo
                If TextBox101.Text <> "" Then
                    'CALCULO DE hst & Lst
                    Dim hst, Lst As Double
                    hst = Val(TextBox80.Text) + Val(TextBox98.Text) + Val(TextBox94.Text)
                    Lst = Math.Round(hst / (Math.Tan(30 * Math.PI / 180)), 3)

                    TextBox102.Text = hst.ToString
                    TextBox97.Text = hst.ToString
                    TextBox101.Text = Lst.ToString
                    TextBox99.Text = Lst.ToString
                End If
            End If
        End If
    End Sub

    Private Sub TextBox100_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox100.KeyPress

        Dim smin, diam As Double
        Dim db As String
        db = ComboBox5.SelectedItem.ToString

        diam = Frac2Num(db.ToString)

        If diam <= 1 Then
            smin = diam + 1 / 2
        Else
            smin = diam + 3 / 4
        End If

        LabelMinMax.Visible = True
        LabelMinMax.Text = "Mín = " & smin & " in."
        ToolTip2.SetToolTip(LabelMinMax, "Para un diámetro de perno de hasta 1 in. la distancia de paso mínima será el diámetro + 1/2 in." + vbCr + " " + vbCr + "Para un diámetro mayor a 1 in. la distancia de paso mínima será el diámetro + 3/4 in.")
        ToolTip2.SetToolTip(GroupBox41, "Para un diámetro de perno de hasta 1 in. la distancia de paso mínima será el diámetro + 1/2 in." + vbCr + " " + vbCr + "Para un diámetro mayor a 1 in. la distancia de paso mínima será el diámetro + 3/4 in.")
        ToolTip2.IsBalloon = True
        ToolTip2.ToolTipIcon = ToolTipIcon.Info
        ToolTip2.ToolTipTitle = "Consideraciones para la distancia de paso interior"
        ToolTip2.AutoPopDelay = 6500


        Dim pfolim As String   'lim.inferior de precalif. en dependencia de 4E, 4ES y/o 8ES.

        If ComboBox3.Visible = True Then
            pfolim = Strings.Trim(Strings.Mid(Label144.Text, 17, 5))
        Else
            pfolim = Strings.Trim(Strings.Mid(Label144.Text, 17, 3))
        End If

        'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
        Dim pfomin As Double = Math.Max(smin, Val(pfolim))   'valor minimo

        'LIMITE SUPERIOR EN DEPENDENCIA DE 4E, 4ES y/o 8ES.
        Dim pfol2 As String   'lim.SUPERIOR de precalificación.

        If ComboBox3.Visible = True Then
            pfol2 = Strings.Trim(Strings.Mid(Label144.Text, 24, 5))
        Else
            pfol2 = Strings.Trim(Strings.Mid(Label144.Text, 23, 4))
        End If
        Dim pfomax As Double = Val(pfol2)   'valor maximo

        soloNumeros(Me.TextBox100, e)
        If Asc(e.KeyChar) = 13 Then

            If Val(TextBox100.Text) < pfomin Or Val(TextBox100.Text) > pfomax Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox100.Focus()
                TextBox100.Text = ""
            Else
                TextBox98.Focus()
                TextBox100.BackColor = Color.White
            End If

        End If
    End Sub

    Private Sub TextBox98_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox98.KeyPress

        ToolTip2.SetToolTip(GroupBox41, "Cumplir con requisitos de distancia mínima y máxima al borde" + vbCr + "Secc. J3.4 y J3.5 ANSI/AISC 360-10.")
        ToolTip2.IsBalloon = True
        ToolTip2.ToolTipIcon = ToolTipIcon.Info
        ToolTip2.ToolTipTitle = "Consideraciones para la distancia al borde"
        ToolTip2.AutoPopDelay = 6500

        'CONSULTA A BASE DE DATOS DE LA DISTANCIA MINIMA AL BORDE

        'DIST. MAXIMA AL BORDE=MIN(12 espesor menor(tp,tfc),6 in)
        'instancia para obtener tfc y twb
        Dim Instwb As Secciones = Secciones.GetSingleton
        Dim twb As Double = Val(Instwb.TextBox2.Text)
        Dim tfc As Double = Val(Instwb.TextBox13.Text)

        Dim d1 As Double = Math.Min(Val(TextBox96.Text), tfc)
        Dim demax As Double = Math.Min(12 * d1, 6)
        consultaPernos1(ComboBox5.Text)
        LabelMinMax.Visible = True
        LabelMinMax.Text = "Mín=" & demin & " in,  Máx = " & demax & " in."
        ToolTip2.SetToolTip(LabelMinMax, "Cumplir con requisitos de distancia mínima y máxima al borde" + vbCr + "Secc. J3.4 y J3.5 ANSI/AISC 360-10.")


        soloNumeros(Me.TextBox98, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox98.Text) < demin Or Val(TextBox98.Text) > demax Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox98.Focus()
                TextBox98.Text = ""
            Else
                TextBox98.BackColor = Color.White
                'INSTANCIAS PARA OBTENER twb Y Fyb
                'La instancia para obtener twb ya se creó

                Dim InstFyb As Aceros = Aceros.GetSingleton
                Dim Fyb As Double = Val(InstFyb.TextBox1.Text)

                'CALCULO DE ESPESOR MINIMO PARA RIGIDIZADOR
                Dim tsMin As Double
                tsMin = Math.Round(twb * (Fyb / Val(TextBox103.Text)), 3)
                LabelTsmin.Visible = True
                LabelTsmin.Text = tsMin.ToString + " in"


                'SI hst & Lst ya han sido calculados, actualizar el calculo
                'O BIEN, SI ES UNA 4ES (por lo tanto pb no se muestra) HACER EL CALCULO POR 1RA VEZ
                If TextBox101.Text <> "" Or TextBox94.Visible = False Then
                    'CALCULO DE hst & Lst
                    Dim hst, Lst As Double
                    hst = Val(TextBox80.Text) + Val(TextBox98.Text) + Val(TextBox94.Text)
                    Lst = Math.Round(hst / (Math.Tan(30 * Math.PI / 180)), 3)

                    TextBox102.Text = hst.ToString
                    TextBox97.Text = hst.ToString
                    TextBox101.Text = Lst.ToString
                    TextBox99.Text = Lst.ToString
                End If


                If TextBox94.Visible = True Then
                    TextBox94.Focus()
                Else
                    TextBox96.Focus()
                End If

            End If
        End If
    End Sub
    Private Sub TextBox94_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox94.KeyPress

        ToolTip2.SetToolTip(GroupBox41, "Pb debe ser almenos 2 2/3 veces el diámetro de los pernos. Se prefiere 3 veces el diámetro.")
        ToolTip2.IsBalloon = True
        ToolTip2.ToolTipIcon = ToolTipIcon.Info
        ToolTip2.ToolTipTitle = "Consideraciones para el paso entre filas de pernos 8ES"
        ToolTip2.AutoPopDelay = 6500

        'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
        Dim diam, pbmin, limMin As Double
        Dim db As String = ComboBox5.SelectedItem.ToString
        diam = Frac2Num(db.ToString)
        pbmin = 3 * diam

        limMin = Math.Max(pbmin, 3.5)

        LabelMinMax.Text = "Mín = " & pbmin & " in."
        LabelMinMax.Visible = True
        ToolTip2.SetToolTip(LabelMinMax, "Pb debe ser almenos 2 2/3 veces el diámetro de los pernos. Se prefiere 3 veces el diámetro.")


        soloNumeros(Me.TextBox94, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox94.Text) < limMin Or Val(TextBox94.Text) > 3.75 Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox94.Focus()
                TextBox94.Text = ""
            Else
                TextBox96.Focus()
                TextBox94.BackColor = Color.White

                'CALCULO DE hst & Lst
                Dim hst, Lst As Double
                hst = Val(TextBox80.Text) + Val(TextBox98.Text) + Val(TextBox94.Text)
                Lst = Math.Round(hst / (Math.Tan(30 * Math.PI / 180)), 3)

                TextBox102.Text = hst.ToString
                TextBox97.Text = hst.ToString
                TextBox101.Text = Lst.ToString
                TextBox99.Text = Lst.ToString

            End If
        End If
    End Sub

    'Boton de Ayuda para el espesor requerido

    Private Sub Button8_Click(sender As Object, e As EventArgs) Handles Button8.Click
        MsgBox("El cálculo del espesor requerido depende del momento en la cara de la columna y la geometría de la conexión. Proponga un espesor de prueba inicial para la placa de extremo, y una vez realice los cálculos de diseño desde el menú 'Diseño->Calcular' el espesor de placa requerido será determinado y podrá verificarlo desde esta casilla.", MsgBoxStyle.Information, "Acerca del diámetro requerido")
    End Sub

    Private Sub TextBox96_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox96.KeyPress

        'LIMITES DE PRECALIFICACION EN DEPENDENCIA DE SI ES 4E, 4ES y/o 8ES
        Dim tpinf, tpsup As String
        tpinf = Strings.Mid(LabeltpExt.Text, 16, 4)
        tpsup = Strings.Mid(LabeltpExt.Text, 22)

        'VER QUE LIMITE ES MAS CRITICO PARA EVALUAR DATO
        Dim tpmin, limMin As Double

        tpmin = Val(TextBox95.Text)
        limMin = Math.Max(tpmin, Val(tpinf))

        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox96.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox96.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox96.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox96.Text = Frac2Num(TextBox96.Text)
            End If
            If Val(TextBox96.Text) < limMin Or Val(TextBox96.Text) > Val(tpsup) Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox96.Focus()
                TextBox96.Text = ""
            Else
                TextBox96.BackColor = Color.White
                'FOCO
                If Me.LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida Rigidizada" Then
                    TextBox101.Focus()
                Else
                    MsgBox("Puede proceder a realizar los cálculos de Diseño desde el Menú 'Diseño->Calcular', o bien, presionando la tecla F5. Asegúrese de haber ingresado todos los datos que se solicitan antes de continuar.", MsgBoxStyle.Information, "Ayuda de ADCAS")
            End If

                'verificacion de de, ya que el limite superior depende del espesor de la placa
                Dim Instcol As Secciones = Secciones.GetSingleton
                Dim tfc As Double = Val(Instcol.TextBox13.Text)

                Dim d1 As Double = Math.Min(Val(TextBox96.Text), tfc)
                Dim demax As Double = Math.Min(12 * d1, 6)
                consultaPernos1(ComboBox5.Text)

                If Val(TextBox98.Text) < demin Or Val(TextBox98.Text) > demax Then
                    TextBox98.BackColor = Color.Red
                Else
                    TextBox98.BackColor = Color.White
        End If

            End If
        End If
    End Sub

    Private Sub TextBox103_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox103.KeyPress
        'INSTANCIAS PARA OBTENER twb Y Fyb
        Dim Instwb As Secciones = Secciones.GetSingleton
        Dim twb As Double = Val(Instwb.TextBox2.Text)

        Dim InstFyb As Aceros = Aceros.GetSingleton
        Dim Fyb As Double = Val(InstFyb.TextBox1.Text)

        soloEntero(e)
        If Asc(e.KeyChar) = 13 Then
            'CALCULO DE ESPESOR MINIMO PARA RIGIDIZADOR
            Dim tsMin As Double
            tsMin = Math.Round(twb * (Fyb / Val(TextBox103.Text)), 3)
            LabelTsmin.Visible = True
            LabelTsmin.Text = tsMin.ToString + " in"

            TextBox104.Focus()

        End If
    End Sub

    Private Sub TextBox104_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox104.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox104.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox104.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox104.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox104.Text = Frac2Num(TextBox104.Text)
            End If
            Dim tmin As Double
            tmin = Val(Strings.Left(LabelTsmin.Text, 5))

            If Val(TextBox104.Text) < tmin Then
                MsgBox("Valor inadecuado.", MsgBoxStyle.Exclamation, "Error en dato")
                TextBox104.Focus()
                TextBox104.Text = ""
            Else
                MsgBox("Puede proceder a realizar los cálculos de Diseño desde el Menú 'Diseño->Calcular', o bien, presionando la tecla F5. Asegúrese de haber ingresado todos los datos que se solicitan antes de continuar.", MsgBoxStyle.Information, "Ayuda de ADCAS")
            End If

        End If
    End Sub

    'Introoducir espesor de placa de continuidad
    Private Sub TextBox160_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox160.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox160.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox160.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox160.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox160.Text = Frac2Num(TextBox160.Text)
            End If
            TextBox43.Text = TextBox160.Text
            If TextBox42.Text <> "" Then
                If Val(TextBox160.Text) < Val(TextBox42.Text) Then
                    TextBox43.BackColor = Color.Red
                Else
                    TextBox43.BackColor = Color.White
                End If
            End If

            If Val(TextBox43.Text) <= 3 / 8 Then
                PictureBox170.Visible = True
                TextBox165.Visible = True
                Label290.Visible = True
                Label291.Text = "Tamaño mínimo de soldadura en 1/16 in"
                Label75.Text = "La soldadura que une la placa de continuidad con el alma de la columna puede ser de ranura o de filete. El tamaño mínimo proporcionado aquí corresponde a una soldadura de doble lado usando electrodo E70." + vbCr + " " + vbCr + "Puesto que el espesor de la placa de continuidad es menor o igual a 3/8"" se permite una soldadura de filete de doble lado en la unión con los patines de la columna."
            Else
                PictureBox170.Visible = False
                TextBox165.Visible = False
                Label290.Visible = False
                Label291.Text = "Usar soldadura de ranura de penetración completa"
                Label75.Text = "La soldadura que une la placa de continuidad con el alma de la columna puede ser de ranura o de filete. El tamaño mínimo proporcionado aquí corresponde a una soldadura de doble lado usando electrodo E70." + vbCr + " " + vbCr + "Las placas de continuidad deben unirse a los patines de la columna con soldadura CJP."
            End If

            Dim INSTcolumna As Secciones = Secciones.GetSingleton
            Dim INSTfyplaca As Aceros = Aceros.GetSingleton
            Dim Fyc As Integer = Val(INSTfyplaca.TextBox5.Text)
            Dim bcf As Double = Val(INSTcolumna.TextBox12.Text)
            Dim db As Double = Val(INSTcolumna.TextBox1.Text)
            Dim tfb As Double = Val(INSTcolumna.TextBox6.Text)
            Dim tfc As Double = Val(INSTcolumna.TextBox13.Text)


            'Calculo de Yc con columna rigidizada
            If LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida sin Rigidizar" Then
                Dim s, Yc, c As Double
                c = Val(TextBox80.Text) + Val(TextBox100.Text) + tfb

                Dim h0, h1, gram As Double
                gram = Val(TextBox90.Text)
                h0 = db - tfb / 2 + Val(TextBox80.Text)
                h1 = db - (1.5 * tfb) - Val(TextBox100.Text)
                s = 0.5 * (Math.Sqrt(bcf * gram))
                Dim pcsi, psi, pso As Double
                psi = (c - Val(TextBox160.Text)) / 2
                pso = psi
                If psi > s Then
                    pcsi = s
                Else
                    pcsi = psi
                End If


                Yc = Math.Round(bcf / 2 * ((h1 * (1 / s + 1 / pcsi)) + (h0 * (1 / s + 1 / pso))) + 2 / gram * (h1 * (s + pcsi) + h0 * (s + pso)), 2)

                'Espesor de patin requerido con columna rigidizada
                Dim tfcReq As Double
                tfcReq = Math.Round(Math.Sqrt(1.11 * Mf / (Fyc * Yc)), 3)
                TextBox161.Text = tfcReq.ToString
                If tfc < tfcReq Then
                    TextBox161.BackColor = Color.Red
                Else
                    TextBox161.BackColor = Color.WhiteSmoke
                End If

            Else
                'Condicional para ver si es una 4ES o 8ES

                Dim gram As Double = Val(TextBox90.Text)
                If ComboBox3.SelectedItem = "4ES" Then
                    Dim s, Yc, c As Double
                    c = Val(TextBox80.Text) + Val(TextBox100.Text) + tfb

                    Dim h0, h1 As Double

                    h0 = db - tfb / 2 + Val(TextBox80.Text)
                    h1 = db - (1.5 * tfb) - Val(TextBox100.Text)
                    s = 0.5 * (Math.Sqrt(bcf * gram))
                    Dim pcsi, psi, pso As Double
                    psi = (c - Val(TextBox160.Text)) / 2
                    pso = psi
                    If psi > s Then
                        pcsi = s
                    Else
                        pcsi = psi
                    End If


                    Yc = Math.Round(bcf / 2 * ((h1 * (1 / s + 1 / pcsi)) + (h0 * (1 / s + 1 / pso))) + 2 / gram * (h1 * (s + pcsi) + h0 * (s + pso)), 2)

                    'Espesor de patin requerido con columna rigidizada
                    Dim tfcReq As Double
                    tfcReq = Math.Round(Math.Sqrt(1.11 * Mf / (Fyc * Yc)), 3)
                    TextBox161.Text = tfcReq.ToString
                    If tfc < tfcReq Then
                        TextBox161.BackColor = Color.Red
                    Else
                        TextBox161.BackColor = Color.WhiteSmoke
                    End If


                Else  'LA CONEXIÓN ES UNA 8ES
                    Dim s, Yc, c As Double
                    c = Val(TextBox80.Text) + Val(TextBox100.Text) + tfb
                    Dim Pb As Double = Val(TextBox94.Text)

                    Dim h1, h2, h3, h4 As Double
                    h1 = db - tfb / 2 + Val(TextBox80.Text) + Pb
                    h2 = db - tfb / 2 + Val(TextBox80.Text)
                    h3 = db - (1.5 * tfb) - Val(TextBox100.Text)
                    h4 = db - (1.5 * tfb) - Val(TextBox100.Text) - Pb
                    s = 0.5 * (Math.Sqrt(bcf * gram))

                    Dim pcsi, psi, pso As Double
                    psi = (c - Val(TextBox160.Text)) / 2
                    pso = psi
                    If psi > s Then
                        pcsi = s
                    Else
                        pcsi = psi
                    End If

                    Yc = Math.Round(bcf / 2 * (h1 / s + h2 / pso + h3 / pcsi + h4 / s) + 2 / gram * (h1 * (s + Pb / 4) + h2 * (pso + (0.75 * Pb)) + h3 * (pcsi + Pb / 4) + h4 * (s + (0.75 * Pb)) + (Pb ^ 2)) + gram, 2)

                    'Espesor de patin requerido con columna rigidizada
                    Dim tfcReq As Double
                    tfcReq = Math.Round(Math.Sqrt(1.11 * Mf / (Fyc * Yc)), 3)
                    TextBox161.Text = tfcReq.ToString
                    If tfc < tfcReq Then
                        TextBox161.BackColor = Color.Red
                    Else
                        TextBox161.BackColor = Color.WhiteSmoke
                    End If
                End If

            End If

        End If
    End Sub

    Private Sub TextBox160_TextChanged(sender As Object, e As EventArgs) Handles TextBox160.TextChanged
        Dim INSTcolumna As Secciones = Secciones.GetSingleton
        Dim INSTfyplaca As Aceros = Aceros.GetSingleton
        Dim Fyc As Integer = Val(INSTfyplaca.TextBox5.Text)
        Dim bcf As Double = Val(INSTcolumna.TextBox12.Text)
        Dim db As Double = Val(INSTcolumna.TextBox1.Text)
        Dim tfb As Double = Val(INSTcolumna.TextBox6.Text)
        Dim tfc As Double = Val(INSTcolumna.TextBox13.Text)


        'Calculo de Yc con columna rigidizada
        If LabelDiseño.Text = "Conexión de Momento con Placa Extrema Extendida sin Rigidizar" Then
            Dim s, Yc, c As Double
            c = Val(TextBox80.Text) + Val(TextBox100.Text) + tfb

            Dim h0, h1, gram As Double
            gram = Val(TextBox90.Text)
            h0 = db - tfb / 2 + Val(TextBox80.Text)
            h1 = db - (1.5 * tfb) - Val(TextBox100.Text)
            s = 0.5 * (Math.Sqrt(bcf * gram))
            Dim pcsi, psi, pso As Double
            psi = (c - Val(TextBox160.Text)) / 2
            pso = psi
            If psi > s Then
                pcsi = s
            Else
                pcsi = psi
            End If


            Yc = Math.Round(bcf / 2 * ((h1 * (1 / s + 1 / pcsi)) + (h0 * (1 / s + 1 / pso))) + 2 / gram * (h1 * (s + pcsi) + h0 * (s + pso)), 2)

            'Espesor de patin requerido con columna rigidizada
            Dim tfcReq As Double
            tfcReq = Math.Round(Math.Sqrt(1.11 * Mf / (Fyc * Yc)), 3)
            TextBox161.Text = tfcReq.ToString
            If tfc < tfcReq Then
                TextBox161.BackColor = Color.Red
            Else
                TextBox161.BackColor = Color.WhiteSmoke
            End If

        Else
            'Condicional para ver si es una 4ES o 8ES

            Dim gram As Double = Val(TextBox90.Text)
            If ComboBox3.SelectedItem = "4ES" Then
                Dim s, Yc, c As Double
                c = Val(TextBox80.Text) + Val(TextBox100.Text) + tfb

                Dim h0, h1 As Double

                h0 = db - tfb / 2 + Val(TextBox80.Text)
                h1 = db - (1.5 * tfb) - Val(TextBox100.Text)
                s = 0.5 * (Math.Sqrt(bcf * gram))
                Dim pcsi, psi, pso As Double
                psi = (c - Val(TextBox160.Text)) / 2
                pso = psi
                If psi > s Then
                    pcsi = s
                Else
                    pcsi = psi
                End If


                Yc = Math.Round(bcf / 2 * ((h1 * (1 / s + 1 / pcsi)) + (h0 * (1 / s + 1 / pso))) + 2 / gram * (h1 * (s + pcsi) + h0 * (s + pso)), 2)

                'Espesor de patin requerido con columna rigidizada
                Dim tfcReq As Double
                tfcReq = Math.Round(Math.Sqrt(1.11 * Mf / (Fyc * Yc)), 3)
                TextBox161.Text = tfcReq.ToString
                If tfc < tfcReq Then
                    TextBox161.BackColor = Color.Red
                Else
                    TextBox161.BackColor = Color.WhiteSmoke
                End If


            Else 'LA CONEXIÓN ES UNA 8ES
                Dim s, Yc, c As Double
                c = Val(TextBox80.Text) + Val(TextBox100.Text) + tfb
                Dim Pb As Double = Val(TextBox94.Text)

                Dim h1, h2, h3, h4 As Double
                h1 = db - tfb / 2 + Val(TextBox80.Text) + Pb
                h2 = db - tfb / 2 + Val(TextBox80.Text)
                h3 = db - (1.5 * tfb) - Val(TextBox100.Text)
                h4 = db - (1.5 * tfb) - Val(TextBox100.Text) - Pb
                s = 0.5 * (Math.Sqrt(bcf * gram))

                Dim pcsi, psi, pso As Double
                psi = (c - Val(TextBox160.Text)) / 2
                pso = psi
                If psi > s Then
                    pcsi = s
                Else
                    pcsi = psi
                End If

                Yc = Math.Round(bcf / 2 * (h1 / s + h2 / pso + h3 / pcsi + h4 / s) + 2 / gram * (h1 * (s + Pb / 4) + h2 * (pso + (0.75 * Pb)) + h3 * (pcsi + Pb / 4) + h4 * (s + (0.75 * Pb)) + (Pb ^ 2)) + gram, 2)

                'Espesor de patin requerido con columna rigidizada
                Dim tfcReq As Double
                tfcReq = Math.Round(Math.Sqrt(1.11 * Mf / (Fyc * Yc)), 3)
                TextBox161.Text = tfcReq.ToString
                If tfc < tfcReq Then
                    TextBox161.BackColor = Color.Red
                Else
                    TextBox161.BackColor = Color.WhiteSmoke
                End If
            End If
        End If

    End Sub
    Private Sub Label277_Click(sender As Object, e As EventArgs) Handles Label277.Click
        TabControlJ1.SelectTab(2)
    End Sub

    Private Sub Label281_Click(sender As Object, e As EventArgs) Handles Label281.Click
        TabControlJ1.SelectTab(2)
    End Sub
    Private Sub Label284_Click(sender As Object, e As EventArgs) Handles Label284.Click
        TabControlJ1.SelectTab(2)
    End Sub



    '----------------------------
    'CALCULOS DE BFP

    'INGRESO DE HOLGURA DE MONTAJE
    Private Sub TextBox105_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox105.KeyPress
        soloNumeros(Me.TextBox105, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox105.Text) < 0.5 Then
                TextBox105.Text = 0.5
                TextBox105.Focus()
            Else
                ComboBox7.Focus()
            End If
            'si ya se ha calculado Lev, actualizar el calculo de Lev en la placa de patin
            'que depende de la holgura de montaje
            If TextBox110.Text <> "" Then
                'CALCULO DE Lev en la placa de patín
                Dim Lev As Double
                Lev = Val(TextBox110.Text) + Val(TextBox105.Text)
                TextBox120.Text = Lev.ToString
                TextBox128.Text = Lev.ToString
                'puesto que se modifica Lev (S1) hay que recalcular Sh
                If TextBox127.Text <> "" And TextBox130.Text <> "" Then   'si ya se ha calculado Sh, actualizar el dato
                    Dim Sh As Double
                    Dim n As Double = Val(TextBox135.Text)
                    Sh = Lev + Val(TextBox130.Text) * (n / 2 - 1)
                    TextBox127.Text = Sh.ToString
                End If

                If TextBox122.Text <> "" Then   'si ya ha aparecido el valor de Lemax en la placa de patin
                    'chekear valores
                    If Lev < Val(TextBox123.Text) Or Lev > Val(TextBox122.Text) Then
                        TextBox120.BackColor = Color.Red
                    Else
                        TextBox120.BackColor = Color.WhiteSmoke
                    End If
                End If
                'calculo de Lc en la placa de patín
                Dim dh, db As Double
                Dim Lcpl As Double
                db = Frac2Num(ComboBox7.Text)
                If ComboBox9.SelectedItem = "STD" Then 'condicional para saber que dh buscar en la BD
                    dh = db + 1 / 16
                Else
                    consultaPernos3(ComboBox7.Text)
                    dh = Val(dhOVS)
                End If
                Lcpl = Lev - (0.5 * dh)
                TextBox119.Text = Lcpl.ToString

                If Lcpl < 2 * db Then 'Lc debe ser mayor o igual a 2db
                    TextBox119.BackColor = Color.Red
                Else
                    TextBox119.BackColor = Color.WhiteSmoke
                End If

            End If
        End If
    End Sub


    'ELECCION DEL DIÁMETRO DEL PERNO

    Private Sub ComboBox7_SelectedValueChanged(sender As Object, e As EventArgs) Handles ComboBox7.SelectedValueChanged
        Dim db As Double
        Dim diamBFP As String
        diamBFP = ComboBox7.Text
        Dim espmin As Double

        'Chekeo del diametro maximo
        If TextBox107.Text <> "" Then
            db = Frac2Num(diamBFP)
            Dim Dmax As Double
            Dmax = Frac2Num(TextBox107.Text)

            If Dmax < db Then
                ComboBox7.BackColor = Color.Red
            Else
                ComboBox7.BackColor = Color.White
            End If
        End If

        'Actualizacion del calculo del espaciam.minimo del gramil
        If TextBox114.Text <> "" Then
            db = Frac2Num(diamBFP)
            espmin = Math.Round((8 / 3) * db, 3)
            TextBox114.Text = espmin.ToString
            'chekeo del gramil
            If Val(TextBox113.Text) < espmin Then
                TextBox114.BackColor = Color.Red
            Else
                TextBox114.BackColor = Color.WhiteSmoke
            End If
        End If

        'Actualización del 'CALCULO DE Mpr, la fuerza cortante nominal d/c perno
        'para determinar el número de pernos a seleccionar
        If TextBox134.Text <> "" Then
            Dim MprBFP, rn, n As Double
            Dim InstPerf As Secciones = Secciones.GetSingleton
            Dim InsMat As Aceros = Aceros.GetSingleton

            Dim Fyb As Double = Val(InsMat.TextBox1.Text)
            Dim Fub As Double = Val(InsMat.TextBox2.Text)
            Dim Zxb As Double = Val(InstPerf.TextBox5.Text)
            Dim dbeam As Double = Val(InstPerf.TextBox1.Text)
            Dim Ryb As Double = Val(InsMat.TextBox3.Text)
            Dim tfb As Double = Val(InstPerf.TextBox6.Text)
            Dim Fup As Double = Val(InsMat.TextBox11.Text)
            Dim tp As Double = Val(TextBox118.Text)

            Dim Cpr As Double
            Cpr = (Fyb + Fub) / (2 * Fyb)
            Dim Momento As Double
            Momento = Cpr * Zxb * Ryb * Fyb
            MprBFP = redondear(Momento, 10)

            Dim Ab As Double
            db = Frac2Num(ComboBox7.SelectedValue.ToString)
            Ab = Math.PI * (db ^ 2) / 4

            Dim rn1, rn2, rn3 As Double
            rn1 = 84 * Ab
            rn2 = 2.4 * Fub * db * tfb
            rn3 = 2.4 * Fup * db * tp

            rn = Math.Min(Math.Min(rn1, rn2), rn3)
            rnPernos = rn

            n = Math.Floor(1.25 * MprBFP / (0.9 * rn * (dbeam + tp))) + 1
            'Es necesario redondear 'n' al siguiente número par superior
            If n Mod 2 = 0 Then
                n = n
            Else
                n = n + 1
            End If

            TextBox134.Text = n.ToString
        End If

        'Actualización de espmin para la dist. de paso "s"
        If TextBox131.Text <> "" Then
            db = Frac2Num(diamBFP)
            espmin = Math.Round((8 / 3) * db, 3)
            TextBox131.Text = espmin.ToString
            'chekeo de s ya que se ha modificado uno de sus limites
            If TextBox130.Text <> "" Then
                If Val(TextBox130.Text) < espmin Or Val(TextBox130.Text) > Val(TextBox129.Text) Then
                    TextBox130.BackColor = Color.Red
                Else
                    TextBox130.BackColor = Color.White
                End If
            End If
        End If

        'Actualización de Lc (debe ser mayor o igual a 2db)
        'ReCalcular Lc en EL PATIN DE LA VIGA
        If TextBox112.Text <> "" Then 'Lc en el patín
            Dim LcPATIN As Double
            db = Frac2Num(diamBFP)
            LcPATIN = Val(TextBox110.Text) - 0.5 * (db + 0.0625)
            TextBox112.Text = LcPATIN.ToString

            'chekeo de Lc en el patin de la viga
            If Val(TextBox112.Text) < 2 * db Then
                TextBox112.BackColor = Color.Red
            Else
                TextBox112.BackColor = Color.WhiteSmoke
            End If
        End If

        'ReCalcular Lc en la PLACA DE PATIN
        If TextBox119.Text <> "" Then 'Lc en la placa
            Dim LcPLACA As Double
            db = Frac2Num(diamBFP)
            Dim dh As Double
            If ComboBox9.SelectedItem = "STD" Then 'condicional para saber que dh buscar en la BD
                dh = db + 1 / 16
            Else
                consultaPernos3(ComboBox7.Text)
                dh = Val(dhOVS)
            End If
            LcPLACA = Val(TextBox120.Text) - (0.5 * dh)
            TextBox119.Text = LcPLACA.ToString

            'chekeo de Lc en la placa de patín
            If Val(TextBox119.Text) < 2 * db Then
                TextBox119.BackColor = Color.Red
            Else
                TextBox119.BackColor = Color.WhiteSmoke
            End If
        End If

        'ReCalcular Lc debido a la DISTANCIA DE PASO "s"
        If TextBox132.Text <> "" Then 'Lc debido a la distancia de paso 's'
            Dim LcINTERIOR As Double
            db = Frac2Num(diamBFP)
            Dim dh As Double
            If ComboBox9.SelectedItem = "STD" Then 'condicional para saber que dh buscar en la BD
                dh = db + 1 / 16
            Else
                consultaPernos3(ComboBox7.Text)
                dh = Val(dhOVS)
            End If
            LcINTERIOR = Val(TextBox130.Text) - dh
            TextBox132.Text = LcINTERIOR.ToString

            'chekeo de Lc en la placa de patin
            If Val(TextBox132.Text) < 2 * db Then
                TextBox132.BackColor = Color.Red
            Else
                TextBox132.BackColor = Color.WhiteSmoke
            End If
        End If

        'Verificacion de Lemin para Leh y Lev
        If TextBox110.Text <> "" Then   'chekeo de Lev
            consultaPernos(diamBFP)
            Dim Lemin As Double
            Lemin = Val(LeminSTD)

            If Val(TextBox110.Text) < Lemin Then
                TextBox110.BackColor = Color.Red
            Else
                TextBox110.BackColor = Color.White
            End If
        End If

        If TextBox111.Text <> "" Then   'chekeo de Leh
            consultaPernos(diamBFP)
            Dim Lemin As Double
            Lemin = Val(LeminSTD)

            If Val(TextBox111.Text) < Lemin Then
                TextBox111.BackColor = Color.Red
            Else
                TextBox111.BackColor = Color.White
            End If
        End If

        'CALCULO DE Lemin EN LA PLACA DE PATÍN
        If Me.ComboBox7.Text <> "" Then
            consultaPernos2(Me.ComboBox7.Text)

            If dread.Read() Then
                If Me.ComboBox9.SelectedItem = "STD" Then
                    Me.TextBox123.Text = dread(1).ToString
                Else
                    Me.TextBox123.Text = dread(2).ToString
                End If

                dread.Close()
            Else
                MsgBox("Diámetro incorrecto", vbCritical, "Ingreso no reconocido")
            End If

        End If

        'si ya ha aparecido Lemax, chekear Leh y Lev
        If TextBox122.Text <> "" Then
            'chekeo de Leh
            If TextBox121.Text <> "" Then
                If Val(TextBox121.Text) < Val(TextBox123.Text) Or Val(TextBox121.Text) > Val(TextBox122.Text) Then
                    TextBox121.BackColor = Color.Red
                Else
                    TextBox121.BackColor = Color.WhiteSmoke
                End If
            End If

            'chekeo de Lev
            If TextBox120.Text <> "" Then
                If Val(TextBox120.Text) < Val(TextBox123.Text) Or Val(TextBox120.Text) > Val(TextBox122.Text) Then
                    TextBox120.BackColor = Color.Red
                Else
                    TextBox120.BackColor = Color.WhiteSmoke
                End If
            End If
        End If
    End Sub
    Private Sub ComboBox7_KeyPress(sender As Object, e As KeyPressEventArgs) Handles ComboBox7.KeyPress
        If Asc(e.KeyChar) = 13 Then
            TextBox111.Focus()
        Else
            e.Handled = True
        End If
    End Sub

    'INTRODUCIR Leh
    Private Sub TextBox111_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox111.KeyPress
        soloNumeros(Me.TextBox111, e)
        If Asc(e.KeyChar) = 13 Then
            If Val(TextBox111.Text) < Val(TextBox108.Text) Or Val(TextBox111.Text) > Val(TextBox109.Text) Then
                TextBox111.BackColor = Color.Red
            Else
                TextBox111.BackColor = Color.White
                TextBox110.Focus()
            End If

            'Calculo del gramil
            Dim g, bf, db, espmin As Double
            Dim InstGramil As Secciones = Secciones.GetSingleton
            bf = Val(InstGramil.TextBox4.Text)
            g = bf - (2 * Val(TextBox111.Text))
            TextBox113.Text = g.ToString
            db = Frac2Num(ComboBox7.Text)
            espmin = Math.Round((8 / 3) * db, 3)
            TextBox114.Text = espmin.ToString

            Dim secc As String
            secc = TextBox2.Text
            consultarSecc(secc) 'Procedimiento DataReader para consultar el workable gage


            If g < espmin Then  'gramil debe ser mayor al espaciamiento mínimo de 2 2/3*db
                TextBox114.BackColor = Color.Red
            Else
                TextBox114.BackColor = Color.WhiteSmoke
            End If

            'Puesto que el gramil cambia, hay que actualizar el cálculo de 
            'Leh en la placa de patín (que depende tambien del gramil)
            'y chekearlo, si ya ha sido calculado
            If TextBox121.Text <> "" Then
                Dim Leh As Double
                Leh = (Val(TextBox116.Text) - g) / 2
                TextBox121.Text = Leh.ToString

                'si ya existe Lemax, revisar Leh 
                If TextBox122.Text <> "" Then
                    If Leh < Val(TextBox123.Text) Or Leh > Val(TextBox122.Text) Then
                        TextBox121.BackColor = Color.Red
                    Else
                        TextBox121.BackColor = Color.WhiteSmoke
                    End If
                End If
            End If
        End If
    End Sub

    'INTRODUCIR Lev 
    Private Sub TextBox110_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox110.KeyPress
        soloNumeros(Me.TextBox110, e)
        If Asc(e.KeyChar) = 13 Then
            'calculo de Lc en el patín de la viga
            Dim Lc, db As Double
            db = Frac2Num(ComboBox7.Text)
            Lc = Val(TextBox110.Text) - 0.5 * (db + 0.0625)
            TextBox112.Text = Lc.ToString

            If Lc < 2 * db Then 'Lc debe ser mayor o igual a 2db
                TextBox112.BackColor = Color.Red
            Else
                TextBox112.BackColor = Color.WhiteSmoke
            End If

            If Val(TextBox110.Text) < Val(TextBox108.Text) Or Val(TextBox110.Text) > Val(TextBox109.Text) Then
                TextBox110.BackColor = Color.Red
            Else
                TextBox110.BackColor = Color.White
                TextBox112.Focus()
            End If

            'CALCULO DE Lev en la placa de patín
            Dim Lev As Double
            Lev = Val(TextBox110.Text) + Val(TextBox105.Text)
            TextBox120.Text = Lev.ToString
            TextBox128.Text = Lev.ToString
            If TextBox127.Text <> "" And TextBox130.Text <> "" Then   'si ya se ha calculado Sh, actualizar el dato
                Dim Sh As Double
                Dim n As Double = Val(TextBox135.Text)
                Sh = Lev + Val(TextBox130.Text) * (n / 2 - 1)
                TextBox127.Text = Sh.ToString
            End If

            If TextBox122.Text <> "" Then   'si ya ha aparecido el valor de Lemax en la placa de patin
                'chekear valores
                If Lev < Val(TextBox123.Text) Or Lev > Val(TextBox122.Text) Then
                    TextBox120.BackColor = Color.Red
                Else
                    TextBox120.BackColor = Color.WhiteSmoke
                End If
            End If
            'calculo de Lc en la placa de patín
            Dim dh As Double
            Dim Lcpl As Double
            If ComboBox9.SelectedItem = "STD" Then 'condicional para saber que dh buscar en la BD
                dh = db + 1 / 16
            Else
                consultaPernos3(ComboBox7.Text)
                dh = Val(dhOVS)
            End If
            Lcpl = Lev - (0.5 * dh)
            TextBox119.Text = Lcpl.ToString

            If Lcpl < 2 * db Then 'Lc debe ser mayor o igual a 2db
                TextBox119.BackColor = Color.Red
            Else
                TextBox119.BackColor = Color.WhiteSmoke
            End If

        End If
    End Sub

    Private Sub TextBox112_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox112.KeyPress
        TextBox115.Focus()
        MsgBox("La práctica usual de diseño es proponer un gramil igual al valor del gramil práctico (""workable gage"")." + vbCr + " " + vbCr + "Considere el gramil práctico como una guía para establecer un gramil apropiado para la sección de la viga. Si el gramil estimado resulta menor al gramil práctico verifique que los pernos puedan ser instalados.", vbInformation, "Acerca del gramil práctico")
    End Sub

    Private Sub Button6_Click(sender As Object, e As EventArgs) Handles Button6.Click
        MsgBox("La práctica usual de diseño es proponer un gramil igual al valor del gramil práctico (""workable gage"")." + vbCr + " " + vbCr + "Considere el gramil práctico como una guía para establecer un gramil apropiado para la sección de la viga. Si el gramil estimado resulta menor al gramil práctico verifique que los pernos puedan ser instalados.", vbInformation, "Acerca del gramil práctico")
    End Sub
    'SELECC agujero STD ó OVS
    Private Sub ComboBox9_SelectedValuedChanged(sender As Object, e As EventArgs) Handles ComboBox9.SelectedValueChanged
        'Lemin en la placa de patín
        Dim diam As String = ComboBox7.SelectedValue.ToString
        TextBox123.Text = saberLemin(ComboBox9.SelectedItem.ToString, diam)

        'si ya ha aparecido Lemax, chekear Leh y Lev
        If TextBox122.Text <> "" Then
            'chekeo de Leh
            If TextBox121.Text <> "" Then
                If Val(TextBox121.Text) < Val(TextBox123.Text) Or Val(TextBox121.Text) > Val(TextBox122.Text) Then
                    TextBox121.BackColor = Color.Red
                Else
                    TextBox121.BackColor = Color.WhiteSmoke
                End If
            End If

            'chekeo de Lev
            If TextBox120.Text <> "" Then
                If Val(TextBox120.Text) < Val(TextBox123.Text) Or Val(TextBox120.Text) > Val(TextBox122.Text) Then
                    TextBox120.BackColor = Color.Red
                Else
                    TextBox120.BackColor = Color.WhiteSmoke
                End If
            End If
        End If

        ' si ya se ha calculado Lc en la placa de patin
        'Actualizar el dato
        If TextBox119.Text <> "" Then
            Dim dh, diametro As Double
            Dim Lcpl As Double
            diametro = Frac2Num(ComboBox7.Text)
            If ComboBox9.SelectedItem = "STD" Then 'condicional para saber que dh buscar en la BD
                dh = diametro + 1 / 16
            Else
                consultaPernos3(ComboBox7.Text)
                dh = Val(dhOVS)
            End If
            Lcpl = Val(TextBox120.Text) - (0.5 * dh)
            TextBox119.Text = Lcpl.ToString

            If Lcpl < 2 * diametro Then 'Lc debe ser mayor o igual a 2db
                TextBox119.BackColor = Color.Red
            Else
                TextBox119.BackColor = Color.WhiteSmoke
            End If
        End If

        'si ya se ha calculado Lc debido a la dist. de paso 's'
        'Actualizar el dato
        If TextBox132.Text <> "" Then
            Dim LcXs As Double  'LcXs= "Lc por(X) distancia de paso(s)"
            Dim dh, db As Double
            db = Frac2Num(ComboBox7.Text)
            If ComboBox9.SelectedItem = "STD" Then 'condicional para saber que dh buscar en la BD
                dh = db + 1 / 16
            Else
                consultaPernos3(ComboBox7.Text)
                dh = Val(dhOVS)
            End If
            LcXs = Val(TextBox130.Text) - dh
            TextBox132.Text = LcXs.ToString
            'chekeo de Lc
            If LcXs < 2 * db Then
                TextBox132.BackColor = Color.Red
            Else
                TextBox132.BackColor = Color.WhiteSmoke
            End If

        End If

    End Sub
    Private Sub ComboBox9_KeyPress(sender As Object, e As KeyPressEventArgs) Handles ComboBox9.KeyPress
        If Asc(e.KeyChar) = 13 Then
            TextBox118.Focus()
        Else
            e.Handled = True
        End If
    End Sub

    'INTRODUCIR ESPESOR DE PLACA DE PATIN tp
    Private Sub TextBox118_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox118.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox118.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox118.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox118.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox118.Text = Frac2Num(TextBox118.Text)
            End If
            TextBox116.Focus()
            'calculo de Lemax
            Dim tpla, p1 As Double
            tpla = Val(TextBox118.Text)
            p1 = Math.Min((12 * tpla), 6)
            TextBox122.Text = p1.ToString   'Lemax en la placa de patín

            'chekear Leh y Lev
            If TextBox122.Text <> "" Then
                If TextBox121.Text <> "" Then
                    If Val(TextBox121.Text) < Val(TextBox123.Text) Or Val(TextBox121.Text) > Val(TextBox122.Text) Then
                        TextBox121.BackColor = Color.Red
                    Else
                        TextBox121.BackColor = Color.WhiteSmoke
                    End If
                End If
                If TextBox120.Text <> "" Then
                    If Val(TextBox120.Text) < Val(TextBox123.Text) Or Val(TextBox120.Text) > Val(TextBox122.Text) Then
                        TextBox120.BackColor = Color.Red
                    Else
                        TextBox120.BackColor = Color.WhiteSmoke
                    End If
                End If
            End If

            'actualizacion de smax
            If TextBox129.Text <> "" Then
                Dim Instpaso As Secciones = Secciones.GetSingleton
                Dim tfbeam As Double = Val(Instpaso.TextBox6.Text)
                Dim min1 As Double = Math.Min(tpla, tfbeam)
                Dim smax As Double = Math.Min(24 * min1, 12)
                TextBox129.Text = smax.ToString

                'chekeo de s, ya que se ha modificado smax
                If TextBox130.Text <> "" Then
                    If Val(TextBox130.Text) < Val(TextBox131.Text) Or Val(TextBox130.Text) > smax Then
                        TextBox130.BackColor = Color.Red
                    Else
                        TextBox130.BackColor = Color.WhiteSmoke
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub TextBox118_TextChanged(sender As Object, e As EventArgs) Handles TextBox118.TextChanged
        Label304.Text = TextBox118.Text + " in"
    End Sub

    'INTRODUCIR ANCHO DE PLACA DE PATIN bfp
    Public Sub apareceGlobo()
        'instancia para obtener el ancho de patin de la viga y la columna
        Dim InstNesima As Secciones = Secciones.GetSingleton
        Dim bfb, bfc As String
        bfb = InstNesima.TextBox4.Text
        bfc = InstNesima.TextBox12.Text

        'ToolTip en cuanto se teclea para introducir el ancho de placa
        ToolTip2.SetToolTip(TextBox116, "Considerar el ancho de patín de la viga (" + bfb + " in) y el ancho del patín de la columna (" + bfc + " in)" + vbCr + "para proponer un ancho de placa razonable.")
        ToolTip2.IsBalloon = True
        ToolTip2.ShowAlways = True
        ToolTip2.ToolTipIcon = ToolTipIcon.Info
        ToolTip2.ToolTipTitle = "Consideraciones para ancho de placa"
        ToolTip2.AutoPopDelay = 6500
    End Sub

    Private Sub TextBox116_Enter(sender As Object, e As EventArgs) Handles TextBox116.Enter
        apareceGlobo()
    End Sub
    Private Sub TextBox116_Click(sender As Object, e As EventArgs) Handles TextBox116.Click
        apareceGlobo()
    End Sub

    Private Sub TextBox116_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox116.KeyPress
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox116.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox116.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox116.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox116.Text = Frac2Num(TextBox116.Text)
            End If

            'calculo de Leh en la placa de patín
            Dim gramil, Leh As Double
            gramil = Val(TextBox113.Text)
            Leh = (Val(TextBox116.Text) - gramil) / 2
            TextBox121.Text = Leh.ToString

            'si ya existe Lemax, revisar Leh 
            If TextBox122.Text <> "" Then
                If Leh < Val(TextBox123.Text) Or Leh > Val(TextBox122.Text) Then
                    TextBox121.BackColor = Color.Red
                Else
                    TextBox121.BackColor = Color.WhiteSmoke
                End If
            End If

            'CALCULO DE Mpr, la fuerza cortante nominal d/c perno
            'para determinar el número de pernos a seleccionar
            If TextBox2.Text <> "" And TextBox8.Text <> "" Then
                'Esto asegura que ya se haya seleccionado las seeciones y el material
                Dim MprBFP, rn, n As Double
                Dim InstPerf As Secciones = Secciones.GetSingleton
                Dim InsMat As Aceros = Aceros.GetSingleton

                Dim Fyb As Double = Val(InsMat.TextBox1.Text)
                Dim Fub As Double = Val(InsMat.TextBox2.Text)
                Dim Zxb As Double = Val(InstPerf.TextBox5.Text)
                Dim dbeam As Double = Val(InstPerf.TextBox1.Text)
                Dim Ryb As Double = Val(InsMat.TextBox3.Text)
                Dim tfb As Double = Val(InstPerf.TextBox6.Text)
                Dim Fup As Double = Val(InsMat.TextBox11.Text)
                Dim tp As Double = Val(TextBox118.Text)

                Dim Cpr As Double
                Cpr = (Fyb + Fub) / (2 * Fyb)
                Dim Momento As Double
                Momento = Cpr * Zxb * Ryb * Fyb
                MprBFP = redondear(Momento, 10)

                Dim Ab, db As Double
                db = Frac2Num(ComboBox7.Text)
                Ab = Math.PI * (db ^ 2) / 4

                Dim rn1, rn2, rn3 As Double
                rn1 = 84 * Ab
                rn2 = 2.4 * Fub * db * tfb
                rn3 = 2.4 * Fup * db * tp

                rn = Math.Min(Math.Min(rn1, rn2), rn3)
                rnPernos = rn

                n = Math.Floor(1.25 * MprBFP / (0.9 * rn * (dbeam + tp))) + 1
                'Es necesario redondear 'n' al siguiente número par superior
                If n Mod 2 = 0 Then
                    n = n
                Else
                    n = n + 1
                End If

                TextBox134.Text = n.ToString
            End If

            TextBox135.Focus()
        End If
    End Sub

    'INTRODUCIR EL N° DE PERNOS "n"
    Private Sub TextBox135_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox135.KeyPress
        'admitir solo numero entero par
        soloEntero(e)
        If Asc(e.KeyChar) = 13 Then

            If Val(TextBox135.Text) Mod 2 = 0 Then
                TextBox130.Focus()
                'calculo de espmin para el paso "s"
                If TextBox131.Text = "" Then
                    Dim smin, dper As Double
                    dper = Frac2Num(ComboBox7.Text)
                    smin = Math.Round((8 / 3) * dper, 3)
                    TextBox131.Text = smin.ToString
                End If
                'calculo de espmax para el paso "s"
                If TextBox129.Text = "" Then
                    Dim Instpaso As Secciones = Secciones.GetSingleton
                    Dim tfbeam As Double = Val(Instpaso.TextBox6.Text)
                    Dim min1 As Double = Math.Min(Val(TextBox118.Text), tfbeam)
                    Dim smax As Double = Math.Min(24 * min1, 12)
                    TextBox129.Text = smax.ToString
                End If
                'Actualizacion del calculo de Sh
                If TextBox127.Text <> "" Then
                    Dim Sh As Double
                    Dim n As Double = Val(TextBox135.Text)
                    Sh = Val(TextBox128.Text) + Val(TextBox130.Text) * (n / 2 - 1)
                    TextBox127.Text = Sh.ToString
                End If
            Else
                TextBox135.Text = ""
                TextBox135.Focus()
            End If

        End If
    End Sub
    Private Sub TextBox135_TextChanged(sender As Object, e As EventArgs) Handles TextBox135.TextChanged
        Label303.Text = TextBox135.Text
    End Sub

    'INTRODUCIR DISTANCIA DE PASO "s"
    Private Sub TextBox130_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox130.KeyPress
        If TextBox135.Text = "" Then
            MsgBox("Por favor, ingrese un número de pernos de prueba", vbCritical, "Dato faltante")
            e.Handled = True
        Else
            soloNumeros(TextBox130, e)
            If Asc(e.KeyChar) = 13 Then

                If Val(TextBox130.Text) < Val(TextBox131.Text) Or Val(TextBox130.Text) > Val(TextBox129.Text) Then
                    TextBox130.BackColor = Color.Red
                Else
                    TextBox130.BackColor = Color.White
                    MsgBox("Puede proceder a realizar los cálculos de Diseño desde el Menú 'Diseño->Calcular', o bien, presionando la tecla F5. Asegúrese de haber ingresado todos los datos que se solicitan antes de continuar.", MsgBoxStyle.Information, "Ayuda de ADCAS")
                End If

                'calculo de Sh
                Dim Sh As Double
                Dim n As Double = Val(TextBox135.Text)
                Sh = Val(TextBox128.Text) + (Val(TextBox130.Text) * ((n / 2) - 1))
                TextBox127.Text = Sh.ToString

                'calculo de Lc debido a "s"
                Dim LcXs As Double  'LcXs= "Lc por(X) distancia de paso(s)"
                Dim dh, db As Double
                db = Frac2Num(ComboBox7.Text)
                If ComboBox9.SelectedItem = "STD" Then 'condicional para saber que dh buscar en la BD
                    dh = db + 1 / 16
                Else
                    consultaPernos3(ComboBox7.Text)
                    dh = Val(dhOVS)
                End If
                LcXs = Val(TextBox130.Text) - dh
                TextBox132.Text = LcXs.ToString
                'chekeo de Lc
                If LcXs < 2 * db Then
                    TextBox132.BackColor = Color.Red
                Else
                    TextBox132.BackColor = Color.WhiteSmoke
                End If
            End If

        End If
    End Sub

    'DISEÑO DE LA PLACA SIMPLE (EN LA PESTAÑA 'DISEÑO DE CONEXIÓN')
    Private Sub ComboBox11_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox11.SelectedIndexChanged
        Dim db As Double
        db = Frac2Num(ComboBox11.Text)
        Dim lehm = 2 * db
        ToolTip1.SetToolTip(TextBox185, "Valor de al menos " + lehm.ToString + " in(dos veces el diámetro de los pernos)")
        If TextBox185.Text <> "" Then
            If Val(TextBox185.Text) < lehm Then
                TextBox185.BackColor = Color.Red
            Else
                TextBox185.BackColor = Color.LightSteelBlue
            End If
        End If
        Dim tmax As Double
        tmax = db / 2 + 1 / 16
        Label322.Text = tmax.ToString + " in"
        If TextBox188.Text <> "" Then
            If Val(TextBox188.Text) > tmax Then
                TextBox188.BackColor = Color.Red
            Else
                TextBox188.BackColor = Color.White
            End If
        End If

        If TextBox184.Text <> "" Then
            Dim a As Double = Val(TextBox184.Text)
            Dim Lehalma As Double = a - Val(TextBox105.Text)
            If Lehalma < lehm Then
                Label320.Text = "Leh en el alma de la viga inadecuado, aumentar 'a'"
                TextBox184.BackColor = Color.Red
            Else
                TextBox184.BackColor = Color.LightSteelBlue
                Label320.Text = "Leh en el alma de la viga adecuado"
            End If
        End If

        consultaPernos2(ComboBox11.Text)
        If dread.Read() Then
            Me.TextBox189.Text = dread(1).ToString
            dread.Close()
        Else
            MsgBox("Diámetro incorrecto", vbCritical, "Ingreso no reconocido")
        End If

        If TextBox187.Text <> "" Then
            If Val(TextBox187.Text) < Val(TextBox189.Text) Then
                TextBox187.BackColor = Color.Red
                TextBox186.BackColor = Color.Red
            Else
                TextBox187.BackColor = Color.LightSteelBlue
                TextBox186.BackColor = Color.LightSteelBlue
            End If
        End If

        If TextBox182.Text <> "" Then

            Dim Lev As Double = Val(TextBox187.Text)
            Dim Leh As Double = Val(TextBox185.Text)
            Dim Tp As Double = Val(TextBox188.Text)
            Dim numbolts As Double = Val(ComboBox10.SelectedItem)
            Dim esp_s As Double = Val(TextBox183.Text)
            Dim Fyp, Fup As Integer
            If ComboBox12.SelectedItem = "ASTM A36" Then
                Fup = 58
                Fyp = 36
            Else
                Fup = 65
                Fyp = 50
            End If
            'Longitud de la placa 
            Dim Lplaca, bplaca As Double
            Lplaca = 2 * Lev + ((numbolts - 1) * esp_s)
            bplaca = Val(TextBox184.Text) + Leh

            'i)Resistencia a cortante de los pernos
            Dim Fnv, Ab As Double
            Fnv = Val(FnvTextBox.Text)
            Ab = Math.PI * (db ^ 2) / 4
            Dim rn1 As Double
            rn1 = 0.75 * Fnv * Ab * numbolts

            'ii)Resistencia al aplastamiento
            Dim OVAL1, OVAL2, APLA As Double
            Dim lcsup, lcint As Double
            'lcsup = lc del perno superior
            'lcint = lc de los pernos interiores
            lcsup = Lev - 0.5 * (db + 1 / 16)
            OVAL1 = 0.75 * 1.2 * lcsup * Tp * Fup
            APLA = 0.75 * 2.4 * db * Tp * Fup
            Dim rsup, rint, rn2 As Double
            rsup = Math.Min(OVAL1, APLA)

            lcint = esp_s - (db + 1 / 16)
            OVAL2 = 0.75 * 1.2 * lcint * Tp * Fup
            rint = Math.Min(OVAL2, APLA)

            rn2 = rsup + ((numbolts - 1) * rint)

            'iii) Fluencia por cortante de la placa
            Dim rn3 As Double
            rn3 = 0.6 * Fyp * Lplaca * Tp

            'iv)Ruptura por cortante de la placa
            Dim Lholes As Double 'Lholes= Long. total de los agujeros de pernos (incluyendo la holgura, dh + 1/16)
            Lholes = (db + 1 / 8) * numbolts
            Dim Anv, rn4 As Double
            Anv = Tp * (Lplaca - Lholes)
            rn4 = 0.75 * 0.6 * Fup * Anv

            'v)Resistencia a la ruptura por bloque de cortante de la placa
            consultRanuraSSL(ComboBox11.Text)
            Dim SSL As Double = Val(ranura)
            Dim rn5, compTension, comFluen, compRupt As Double
            compTension = 0.75 * Fup * (Leh - SSL / 2) * Tp
            comFluen = 0.75 * 0.6 * Fyp * (Lev + esp_s * (numbolts - 1)) * Tp
            compRupt = 0.75 * 0.6 * Fup * ((Lev + esp_s * (numbolts - 1)) - (numbolts - 0.5) * (db + 1 / 8)) * Tp

            rn5 = compTension + Math.Min(comFluen, compRupt)

            'Resistencia de Diseño (la menor de la anteriores)
            Dim RdisPL, RnMostrar As Double
            RdisPL = Math.Min(Math.Min(Math.Min(rn1, rn2), Math.Min(rn3, rn4)), rn5)
            RnMostrar = Math.Round(RdisPL, 2)
            TextBox182.Text = RnMostrar.ToString
            If Val(TextBox170.Text) > RdisPL Then
                TextBox182.BackColor = Color.Red
            Else
                TextBox182.BackColor = Color.WhiteSmoke
            End If
        End If

    End Sub

    'Introducir 'a'
    Private Sub TextBox184_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox184.KeyPress
        soloNumeros(TextBox184, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox185.Focus()
        End If
    End Sub
    Private Sub TextBox184_TextChanged(sender As Object, e As EventArgs) Handles TextBox184.TextChanged
        Dim db As Double
        db = Frac2Num(ComboBox11.Text)
        Dim lehm = 2 * db
        Dim a As Double = Val(TextBox184.Text)
        Dim Lehalma As Double = a - Val(TextBox105.Text)
        If Lehalma < lehm Then
            Label320.Text = "Leh en el alma de la viga inadecuado, aumentar 'a'"
            TextBox184.BackColor = Color.Red
        Else
            TextBox184.BackColor = Color.LightSteelBlue
            Label320.Text = "Leh en el alma de la viga adecuado"
        End If
        Label320.Visible = True
        If a > 3.5 Then
            TextBox184.BackColor = Color.Red
        Else
            TextBox184.BackColor = Color.LightSteelBlue
        End If

        If TextBox182.Text <> "" Then
            'Calculo de las resistencias de diseño
            'RESISTENCIA NOMINAL DE LA PLACA DE CORTANTE
            Dim Lev As Double = Val(TextBox187.Text)
            Dim Leh As Double = Val(TextBox185.Text)
            Dim Tp As Double = Val(TextBox188.Text)
            Dim numbolts As Double = Val(ComboBox10.SelectedItem)
            Dim esp_s As Double = Val(TextBox183.Text)
            Dim Fyp, Fup As Integer
            If ComboBox12.SelectedItem = "ASTM A36" Then
                Fup = 58
                Fyp = 36
            Else
                Fup = 65
                Fyp = 50
            End If
            'Longitud de la placa 
            Dim Lplaca, bplaca As Double
            Lplaca = 2 * Lev + ((numbolts - 1) * esp_s)
            bplaca = Val(TextBox184.Text) + Leh

            'i)Resistencia a cortante de los pernos
            Dim Fnv, Ab As Double
            Fnv = Val(FnvTextBox.Text)
            Ab = Math.PI * (db ^ 2) / 4
            Dim rn1 As Double
            rn1 = 0.75 * Fnv * Ab * numbolts

            'ii)Resistencia al aplastamiento
            Dim OVAL1, OVAL2, APLA As Double
            Dim lcsup, lcint As Double
            'lcsup = lc del perno superior
            'lcint = lc de los pernos interiores
            lcsup = Lev - 0.5 * (db + 1 / 16)
            OVAL1 = 0.75 * 1.2 * lcsup * Tp * Fup
            APLA = 0.75 * 2.4 * db * Tp * Fup
            Dim rsup, rint, rn2 As Double
            rsup = Math.Min(OVAL1, APLA)

            lcint = esp_s - (db + 1 / 16)
            OVAL2 = 0.75 * 1.2 * lcint * Tp * Fup
            rint = Math.Min(OVAL2, APLA)

            rn2 = rsup + ((numbolts - 1) * rint)

            'iii) Fluencia por cortante de la placa
            Dim rn3 As Double
            rn3 = 0.6 * Fyp * Lplaca * Tp

            'iv)Ruptura por cortante de la placa
            Dim Lholes As Double 'Lholes= Long. total de los agujeros de pernos (incluyendo la holgura, dh + 1/16)
            Lholes = (db + 1 / 8) * numbolts
            Dim Anv, rn4 As Double
            Anv = Tp * (Lplaca - Lholes)
            rn4 = 0.75 * 0.6 * Fup * Anv

            'v)Resistencia a la ruptura por bloque de cortante de la placa
            consultRanuraSSL(ComboBox11.Text)
            Dim SSL As Double = Val(ranura)
            Dim rn5, compTension, comFluen, compRupt As Double
            compTension = 0.75 * Fup * (Leh - SSL / 2) * Tp
            comFluen = 0.75 * 0.6 * Fyp * (Lev + esp_s * (numbolts - 1)) * Tp
            compRupt = 0.75 * 0.6 * Fup * ((Lev + esp_s * (numbolts - 1)) - (numbolts - 0.5) * (db + 1 / 8)) * Tp

            rn5 = compTension + Math.Min(comFluen, compRupt)

            'Resistencia de Diseño (la menor de la anteriores)
            Dim RdisPL, RnMostrar As Double
            RdisPL = Math.Min(Math.Min(Math.Min(rn1, rn2), Math.Min(rn3, rn4)), rn5)
            RnMostrar = Math.Round(RdisPL, 2)
            TextBox182.Text = RnMostrar.ToString
            If Val(TextBox170.Text) > RdisPL Then
                TextBox182.BackColor = Color.Red
            Else
                TextBox182.BackColor = Color.WhiteSmoke
            End If
        End If
    End Sub

    'Introuducir Leh en la placa simple
    Private Sub TextBox185_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox185.KeyPress
        soloNumeros(TextBox185, e)
        If Asc(e.KeyChar) = 13 Then
            ComboBox10.Focus()
        End If
    End Sub
    Private Sub TextBox185_TextChanged(sender As Object, e As EventArgs) Handles TextBox185.TextChanged
        Dim db As Double
        db = Frac2Num(ComboBox11.Text)
        Dim lehm = 2 * db
        If Val(TextBox185.Text) < lehm Then
            TextBox185.BackColor = Color.Red
        Else
            TextBox185.BackColor = Color.LightSteelBlue
        End If
        If TextBox182.Text <> "" Then
            'Calculo de las resistencias de diseño
            'RESISTENCIA NOMINAL DE LA PLACA DE CORTANTE
            Dim Lev As Double = Val(TextBox187.Text)
            Dim Leh As Double = Val(TextBox185.Text)
            Dim Tp As Double = Val(TextBox188.Text)
            Dim numbolts As Double = Val(ComboBox10.SelectedItem)
            Dim esp_s As Double = Val(TextBox183.Text)
            Dim Fyp, Fup As Integer
            If ComboBox12.SelectedItem = "ASTM A36" Then
                Fup = 58
                Fyp = 36
            Else
                Fup = 65
                Fyp = 50
            End If
            'Longitud de la placa 
            Dim Lplaca, bplaca As Double
            Lplaca = 2 * Lev + ((numbolts - 1) * esp_s)
            bplaca = Val(TextBox184.Text) + Leh

            'i)Resistencia a cortante de los pernos
            Dim Fnv, Ab As Double
            Fnv = Val(FnvTextBox.Text)
            Ab = Math.PI * (db ^ 2) / 4
            Dim rn1 As Double
            rn1 = 0.75 * Fnv * Ab * numbolts

            'ii)Resistencia al aplastamiento
            Dim OVAL1, OVAL2, APLA As Double
            Dim lcsup, lcint As Double
            'lcsup = lc del perno superior
            'lcint = lc de los pernos interiores
            lcsup = Lev - 0.5 * (db + 1 / 16)
            OVAL1 = 0.75 * 1.2 * lcsup * Tp * Fup
            APLA = 0.75 * 2.4 * db * Tp * Fup
            Dim rsup, rint, rn2 As Double
            rsup = Math.Min(OVAL1, APLA)

            lcint = esp_s - (db + 1 / 16)
            OVAL2 = 0.75 * 1.2 * lcint * Tp * Fup
            rint = Math.Min(OVAL2, APLA)

            rn2 = rsup + ((numbolts - 1) * rint)

            'iii) Fluencia por cortante de la placa
            Dim rn3 As Double
            rn3 = 0.6 * Fyp * Lplaca * Tp

            'iv)Ruptura por cortante de la placa
            Dim Lholes As Double 'Lholes= Long. total de los agujeros de pernos (incluyendo la holgura, dh + 1/16)
            Lholes = (db + 1 / 8) * numbolts
            Dim Anv, rn4 As Double
            Anv = Tp * (Lplaca - Lholes)
            rn4 = 0.75 * 0.6 * Fup * Anv

            'v)Resistencia a la ruptura por bloque de cortante de la placa
            consultRanuraSSL(ComboBox11.Text)
            Dim SSL As Double = Val(ranura)
            Dim rn5, compTension, comFluen, compRupt As Double
            compTension = 0.75 * Fup * (Leh - SSL / 2) * Tp
            comFluen = 0.75 * 0.6 * Fyp * (Lev + esp_s * (numbolts - 1)) * Tp
            compRupt = 0.75 * 0.6 * Fup * ((Lev + esp_s * (numbolts - 1)) - (numbolts - 0.5) * (db + 1 / 8)) * Tp

            rn5 = compTension + Math.Min(comFluen, compRupt)

            'Resistencia de Diseño (la menor de la anteriores)
            Dim RdisPL, RnMostrar As Double
            RdisPL = Math.Min(Math.Min(Math.Min(rn1, rn2), Math.Min(rn3, rn4)), rn5)
            RnMostrar = Math.Round(RdisPL, 2)
            TextBox182.Text = RnMostrar.ToString
            If Val(TextBox170.Text) > RdisPL Then
                TextBox182.BackColor = Color.Red
            Else
                TextBox182.BackColor = Color.WhiteSmoke
            End If
        End If
    End Sub

    'Introducir Lev en la placa simple
    Private Sub TextBox187_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox187.KeyPress
        soloNumeros(TextBox187, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox188.Focus()
        End If
    End Sub
    Private Sub TextBox187_TextChanged(sender As Object, e As EventArgs) Handles TextBox187.TextChanged
        If Val(TextBox187.Text) < Val(TextBox189.Text) Then
            TextBox187.BackColor = Color.Red
            TextBox186.BackColor = Color.Red
        Else
            TextBox187.BackColor = Color.LightSteelBlue
            TextBox186.BackColor = Color.LightSteelBlue
        End If
        Dim Variable As String
        Variable = TextBox187.Text
        TextBox186.Text = Variable

        If TextBox182.Text <> "" Then
            'Calculo de las resistencias de diseño
            'RESISTENCIA NOMINAL DE LA PLACA DE CORTANTE
            Dim Lev As Double = Val(TextBox187.Text)
            Dim Leh As Double = Val(TextBox185.Text)
            Dim Tp As Double = Val(TextBox188.Text)
            Dim numbolts As Double = Val(ComboBox10.SelectedItem)
            Dim esp_s As Double = Val(TextBox183.Text)
            Dim Fyp, Fup As Integer
            If ComboBox12.SelectedItem = "ASTM A36" Then
                Fup = 58
                Fyp = 36
            Else
                Fup = 65
                Fyp = 50
            End If
            'Longitud de la placa 
            Dim Lplaca, bplaca As Double
            Lplaca = 2 * Lev + ((numbolts - 1) * esp_s)
            bplaca = Val(TextBox184.Text) + Leh

            'i)Resistencia a cortante de los pernos
            Dim Fnv, Ab As Double
            Fnv = Val(FnvTextBox.Text)
            Dim db As Double
            db = Frac2Num(ComboBox11.Text)
            Ab = Math.PI * (db ^ 2) / 4
            Dim rn1 As Double
            rn1 = 0.75 * Fnv * Ab * numbolts

            'ii)Resistencia al aplastamiento
            Dim OVAL1, OVAL2, APLA As Double
            Dim lcsup, lcint As Double
            'lcsup = lc del perno superior
            'lcint = lc de los pernos interiores
            lcsup = Lev - 0.5 * (db + 1 / 16)
            OVAL1 = 0.75 * 1.2 * lcsup * Tp * Fup
            APLA = 0.75 * 2.4 * db * Tp * Fup
            Dim rsup, rint, rn2 As Double
            rsup = Math.Min(OVAL1, APLA)

            lcint = esp_s - (db + 1 / 16)
            OVAL2 = 0.75 * 1.2 * lcint * Tp * Fup
            rint = Math.Min(OVAL2, APLA)

            rn2 = rsup + ((numbolts - 1) * rint)

            'iii) Fluencia por cortante de la placa
            Dim rn3 As Double
            rn3 = 0.6 * Fyp * Lplaca * Tp

            'iv)Ruptura por cortante de la placa
            Dim Lholes As Double 'Lholes= Long. total de los agujeros de pernos (incluyendo la holgura, dh + 1/16)
            Lholes = (db + 1 / 8) * numbolts
            Dim Anv, rn4 As Double
            Anv = Tp * (Lplaca - Lholes)
            rn4 = 0.75 * 0.6 * Fup * Anv

            'v)Resistencia a la ruptura por bloque de cortante de la placa
            consultRanuraSSL(ComboBox11.Text)
            Dim SSL As Double = Val(ranura)
            Dim rn5, compTension, comFluen, compRupt As Double
            compTension = 0.75 * Fup * (Leh - SSL / 2) * Tp
            comFluen = 0.75 * 0.6 * Fyp * (Lev + esp_s * (numbolts - 1)) * Tp
            compRupt = 0.75 * 0.6 * Fup * ((Lev + esp_s * (numbolts - 1)) - (numbolts - 0.5) * (db + 1 / 8)) * Tp

            rn5 = compTension + Math.Min(comFluen, compRupt)

            'Resistencia de Diseño (la menor de la anteriores)
            Dim RdisPL, RnMostrar As Double
            RdisPL = Math.Min(Math.Min(Math.Min(rn1, rn2), Math.Min(rn3, rn4)), rn5)
            RnMostrar = Math.Round(RdisPL, 2)
            TextBox182.Text = RnMostrar.ToString
            If Val(TextBox170.Text) > RdisPL Then
                TextBox182.BackColor = Color.Red
            Else
                TextBox182.BackColor = Color.WhiteSmoke
            End If
        End If
        'Actualización del Dmin de soldadura (Ya que depende de n)
        If TextBox191.Text <> "" Then
            Dim Dmin, lw As Double
            Dim n As Double = Val(ComboBox10.Text)
            Dim s As Double = Val(TextBox183.Text)
            lw = 2 * Val(TextBox187.Text) + (n - 1) * s
            Dmin = Math.Round(Val(TextBox170.Text) / (2 * 1.392 * lw), 2)
            TextBox191.Text = Dmin.ToString
        End If
    End Sub

    'Introducir paso entre pernos
    Private Sub TextBox183_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox183.KeyPress
        soloNumeros(TextBox183, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox187.Focus()
        End If
    End Sub
    Private Sub TextBox183_TextChanged(sender As Object, e As EventArgs) Handles TextBox183.TextChanged
        If TextBox182.Text <> "" Then
            'Calculo de las resistencias de diseño
            'RESISTENCIA NOMINAL DE LA PLACA DE CORTANTE
            Dim Lev As Double = Val(TextBox187.Text)
            Dim Leh As Double = Val(TextBox185.Text)
            Dim Tp As Double = Val(TextBox188.Text)
            Dim numbolts As Double = Val(ComboBox10.SelectedItem)
            Dim esp_s As Double = Val(TextBox183.Text)
            Dim Fyp, Fup As Integer
            If ComboBox12.SelectedItem = "ASTM A36" Then
                Fup = 58
                Fyp = 36
            Else
                Fup = 65
                Fyp = 50
            End If
            'Longitud de la placa 
            Dim Lplaca, bplaca As Double
            Lplaca = 2 * Lev + ((numbolts - 1) * esp_s)
            bplaca = Val(TextBox184.Text) + Leh

            'i)Resistencia a cortante de los pernos
            Dim Fnv, Ab As Double
            Fnv = Val(FnvTextBox.Text)
            Dim db As Double
            db = Frac2Num(ComboBox11.Text)
            Ab = Math.PI * (db ^ 2) / 4
            Dim rn1 As Double
            rn1 = 0.75 * Fnv * Ab * numbolts

            'ii)Resistencia al aplastamiento
            Dim OVAL1, OVAL2, APLA As Double
            Dim lcsup, lcint As Double
            'lcsup = lc del perno superior
            'lcint = lc de los pernos interiores
            lcsup = Lev - 0.5 * (db + 1 / 16)
            OVAL1 = 0.75 * 1.2 * lcsup * Tp * Fup
            APLA = 0.75 * 2.4 * db * Tp * Fup
            Dim rsup, rint, rn2 As Double
            rsup = Math.Min(OVAL1, APLA)

            lcint = esp_s - (db + 1 / 16)
            OVAL2 = 0.75 * 1.2 * lcint * Tp * Fup
            rint = Math.Min(OVAL2, APLA)

            rn2 = rsup + ((numbolts - 1) * rint)

            'iii) Fluencia por cortante de la placa
            Dim rn3 As Double
            rn3 = 0.6 * Fyp * Lplaca * Tp

            'iv)Ruptura por cortante de la placa
            Dim Lholes As Double 'Lholes= Long. total de los agujeros de pernos (incluyendo la holgura, dh + 1/16)
            Lholes = (db + 1 / 8) * numbolts
            Dim Anv, rn4 As Double
            Anv = Tp * (Lplaca - Lholes)
            rn4 = 0.75 * 0.6 * Fup * Anv

            'v)Resistencia a la ruptura por bloque de cortante de la placa
            consultRanuraSSL(ComboBox11.Text)
            Dim SSL As Double = Val(ranura)
            Dim rn5, compTension, comFluen, compRupt As Double
            compTension = 0.75 * Fup * (Leh - SSL / 2) * Tp
            comFluen = 0.75 * 0.6 * Fyp * (Lev + esp_s * (numbolts - 1)) * Tp
            compRupt = 0.75 * 0.6 * Fup * ((Lev + esp_s * (numbolts - 1)) - (numbolts - 0.5) * (db + 1 / 8)) * Tp

            rn5 = compTension + Math.Min(comFluen, compRupt)

            'Resistencia de Diseño (la menor de la anteriores)
            Dim RdisPL, RnMostrar As Double
            RdisPL = Math.Min(Math.Min(Math.Min(rn1, rn2), Math.Min(rn3, rn4)), rn5)
            RnMostrar = Math.Round(RdisPL, 2)
            TextBox182.Text = RnMostrar.ToString
            If Val(TextBox170.Text) > RdisPL Then
                TextBox182.BackColor = Color.Red
            Else
                TextBox182.BackColor = Color.WhiteSmoke
            End If
        End If
        'Actualización del Dmin de soldadura (Ya que depende de s)
        If TextBox191.Text <> "" Then
            Dim Dmin, lw As Double
            Dim n As Double = Val(ComboBox10.Text)
            Dim s As Double = Val(TextBox183.Text)
            lw = 2 * Val(TextBox187.Text) + (n - 1) * s
            Dmin = Math.Round(Val(TextBox170.Text) / (2 * 1.392 * lw), 2)
            TextBox191.Text = Dmin.ToString
        End If
    End Sub

    'Introducir espesor de placa simple
    Private Sub TextBox188_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox188.KeyPress
        If TextBox184.Text = "" Then
            MsgBox("Por favor indique un valor de 'a'", MsgBoxStyle.Exclamation, "Faltan datos")
            e.Handled = True
        ElseIf TextBox185.Text = "" Then
            MsgBox("Por favor indique un valor de la distancia al borde horizontal", MsgBoxStyle.Exclamation, "Faltan datos")
            e.Handled = True
        ElseIf TextBox187.Text = "" Then
            MsgBox("Por favor indique un valor de la distancia al borde vertical", MsgBoxStyle.Exclamation, "Faltan datos")
            e.Handled = True
        ElseIf TextBox183.Text = "" Then
            MsgBox("Por favor indique un valor de distancia de paso", MsgBoxStyle.Exclamation, "Faltan datos")
            e.Handled = True
        Else
            If Char.IsDigit(e.KeyChar) Then
                e.Handled = False
            ElseIf Char.IsControl(e.KeyChar) Then
                e.Handled = False
            ElseIf Char.IsSeparator(e.KeyChar) Then
                e.Handled = False
            ElseIf e.KeyChar = "/" And Not TextBox188.Text.IndexOf("/") Then
                e.Handled = True
            ElseIf e.KeyChar = "/" Then
                e.Handled = False
            ElseIf e.KeyChar = "." And Not TextBox188.Text.IndexOf(".") Then
                e.Handled = True
            ElseIf e.KeyChar = "." Then
                e.Handled = False
            Else
                e.Handled = True
            End If

            Dim exTexto As Integer
            If Asc(e.KeyChar) = 13 Then
                exTexto = Strings.InStr(TextBox188.Text, "/")
                If exTexto <> 0 Then
                    'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                    TextBox188.Text = Frac2Num(TextBox188.Text)
                End If
                ComboBox14.Focus()

                'Calculo de las resistencias de diseño
                'RESISTENCIA NOMINAL DE LA PLACA DE CORTANTE
                Dim Lev As Double = Val(TextBox187.Text)
                Dim Leh As Double = Val(TextBox185.Text)
                Dim Tp As Double = Val(TextBox188.Text)
                Dim numbolts As Double = Val(ComboBox10.SelectedItem)
                Dim esp_s As Double = Val(TextBox183.Text)
                Dim Fyp, Fup As Integer
                If ComboBox12.SelectedItem = "ASTM A36" Then
                    Fup = 58
                    Fyp = 36
                Else
                    Fup = 65
                    Fyp = 50
                End If
                'Longitud de la placa 
                Dim Lplaca, bplaca As Double
                Lplaca = 2 * Lev + ((numbolts - 1) * esp_s)
                bplaca = Val(TextBox184.Text) + Leh

                'i)Resistencia a cortante de los pernos
                Dim Fnv, Ab As Double
                Fnv = Val(FnvTextBox.Text)
                Dim db As Double
                db = Frac2Num(ComboBox11.Text)
                Ab = Math.PI * (db ^ 2) / 4
                Dim rn1 As Double
                rn1 = 0.75 * Fnv * Ab * numbolts

                'ii)Resistencia al aplastamiento
                Dim OVAL1, OVAL2, APLA As Double
                Dim lcsup, lcint As Double
                'lcsup = lc del perno superior
                'lcint = lc de los pernos interiores
                lcsup = Lev - 0.5 * (db + 1 / 16)
                OVAL1 = 0.75 * 1.2 * lcsup * Tp * Fup
                APLA = 0.75 * 2.4 * db * Tp * Fup
                Dim rsup, rint, rn2 As Double
                rsup = Math.Min(OVAL1, APLA)

                lcint = esp_s - (db + 1 / 16)
                OVAL2 = 0.75 * 1.2 * lcint * Tp * Fup
                rint = Math.Min(OVAL2, APLA)

                rn2 = rsup + ((numbolts - 1) * rint)

                'iii) Fluencia por cortante de la placa
                Dim rn3 As Double
                rn3 = 0.6 * Fyp * Lplaca * Tp

                'iv)Ruptura por cortante de la placa
                Dim Lholes As Double 'Lholes= Long. total de los agujeros de pernos (incluyendo la holgura, dh + 1/16)
                Lholes = (db + 1 / 8) * numbolts
                Dim Anv, rn4 As Double
                Anv = Tp * (Lplaca - Lholes)
                rn4 = 0.75 * 0.6 * Fup * Anv

                'v)Resistencia a la ruptura por bloque de cortante de la placa
                consultRanuraSSL(ComboBox11.Text)
                Dim SSL As Double = Val(ranura)
                Dim rn5, compTension, comFluen, compRupt As Double
                compTension = 0.75 * Fup * (Leh - SSL / 2) * Tp
                comFluen = 0.75 * 0.6 * Fyp * (Lev + esp_s * (numbolts - 1)) * Tp
                compRupt = 0.75 * 0.6 * Fup * ((Lev + esp_s * (numbolts - 1)) - (numbolts - 0.5) * (db + 1 / 8)) * Tp

                rn5 = compTension + Math.Min(comFluen, compRupt)

                'Resistencia de Diseño (la menor de la anteriores)
                Dim RdisPL, RnMostrar As Double
                RdisPL = Math.Min(Math.Min(Math.Min(rn1, rn2), Math.Min(rn3, rn4)), rn5)
                RnMostrar = Math.Round(RdisPL, 2)
                TextBox182.Text = RnMostrar.ToString
                If Val(TextBox170.Text) > RdisPL Then
                    TextBox182.BackColor = Color.Red
                Else
                    TextBox182.BackColor = Color.WhiteSmoke
                End If


                Dim tmax As Double = db / 2 + 1 / 16
                If Val(TextBox188.Text) > tmax Then
                    TextBox188.BackColor = Color.Red
                Else
                    TextBox188.BackColor = Color.White
                End If
            End If

        End If
    End Sub
    Private Sub TextBox188_TextChanged(sender As Object, e As EventArgs) Handles TextBox188.TextChanged

        'Calculo de las resistencias de diseño
        'RESISTENCIA NOMINAL DE LA PLACA DE CORTANTE
        Dim Lev As Double = Val(TextBox187.Text)
        Dim Leh As Double = Val(TextBox185.Text)
        Dim Tp As Double = Val(TextBox188.Text)
        Dim numbolts As Double = Val(ComboBox10.SelectedItem)
        Dim esp_s As Double = Val(TextBox183.Text)
        Dim Fyp, Fup As Integer
        If ComboBox12.SelectedItem = "ASTM A36" Then
            Fup = 58
            Fyp = 36
        Else
            Fup = 65
            Fyp = 50
        End If
        'Longitud de la placa 
        Dim Lplaca, bplaca As Double
        Lplaca = 2 * Lev + ((numbolts - 1) * esp_s)
        bplaca = Val(TextBox184.Text) + Leh

        'i)Resistencia a cortante de los pernos
        Dim Fnv, Ab As Double
        Fnv = Val(FnvTextBox.Text)
        Dim db As Double
        db = Frac2Num(ComboBox11.Text)
        Ab = Math.PI * (db ^ 2) / 4
        Dim rn1 As Double
        rn1 = 0.75 * Fnv * Ab * numbolts

        'ii)Resistencia al aplastamiento
        Dim OVAL1, OVAL2, APLA As Double
        Dim lcsup, lcint As Double
        'lcsup = lc del perno superior
        'lcint = lc de los pernos interiores
        lcsup = Lev - 0.5 * (db + 1 / 16)
        OVAL1 = 0.75 * 1.2 * lcsup * Tp * Fup
        APLA = 0.75 * 2.4 * db * Tp * Fup
        Dim rsup, rint, rn2 As Double
        rsup = Math.Min(OVAL1, APLA)

        lcint = esp_s - (db + 1 / 16)
        OVAL2 = 0.75 * 1.2 * lcint * Tp * Fup
        rint = Math.Min(OVAL2, APLA)

        rn2 = rsup + ((numbolts - 1) * rint)

        'iii) Fluencia por cortante de la placa
        Dim rn3 As Double
        rn3 = 0.6 * Fyp * Lplaca * Tp

        'iv)Ruptura por cortante de la placa
        Dim Lholes As Double 'Lholes= Long. total de los agujeros de pernos (incluyendo la holgura, dh + 1/16)
        Lholes = (db + 1 / 8) * numbolts
        Dim Anv, rn4 As Double
        Anv = Tp * (Lplaca - Lholes)
        rn4 = 0.75 * 0.6 * Fup * Anv

        'v)Resistencia a la ruptura por bloque de cortante de la placa
        consultRanuraSSL(ComboBox11.Text)
        Dim SSL As Double = Val(ranura)
        Dim rn5, compTension, comFluen, compRupt As Double
        compTension = 0.75 * Fup * (Leh - SSL / 2) * Tp
        comFluen = 0.75 * 0.6 * Fyp * (Lev + esp_s * (numbolts - 1)) * Tp
        compRupt = 0.75 * 0.6 * Fup * ((Lev + esp_s * (numbolts - 1)) - (numbolts - 0.5) * (db + 1 / 8)) * Tp

        rn5 = compTension + Math.Min(comFluen, compRupt)

        'Resistencia de Diseño (la menor de la anteriores)
        Dim RdisPL, RnMostrar As Double
        RdisPL = Math.Min(Math.Min(Math.Min(rn1, rn2), Math.Min(rn3, rn4)), rn5)
        RnMostrar = Math.Round(RdisPL, 2)
        TextBox182.Text = RnMostrar.ToString
        If Val(TextBox170.Text) > RdisPL Then
            TextBox182.BackColor = Color.Red
        Else
            TextBox182.BackColor = Color.WhiteSmoke
        End If

        'RESISTENCIA NOMINAL DEL ALMA DE LA VIGA
        'La resistencia a cortante de la viga ya ha sido chekeada, el bloque de cortante no se considera ya que el alma de la viga no presenta "coped".
        'Por lo tanto la resistencia de la viga es adecuada.
        Dim tmax As Double = db / 2 + 1 / 16
        If Val(TextBox188.Text) > tmax Then
            TextBox188.BackColor = Color.Red
        Else
            TextBox188.BackColor = Color.White
        End If
        If TextBox191.Visible = True Then
            'Calculo de sold. minima
            Dim Dmin, lw As Double
            Dim n As Double = Val(ComboBox10.Text)
            Dim s As Double = Val(TextBox183.Text)
            lw = 2 * Val(TextBox187.Text) + (n - 1) * s
            Dmin = Math.Round(Val(TextBox170.Text) / (2 * 1.392 * lw), 2)
            If lw <> 0 Then
                TextBox191.Text = Dmin.ToString
            End If
        End If
    End Sub
    'Boton de Ayuda
    Private Sub Button9_Click(sender As Object, e As EventArgs) Handles Button9.Click
        MsgBox("Menor de todas las resistencias de diseño evaluadas en la placa de cortante, a saber, 1)Resistencia a cortante de los pernos, 2)Resistencia al aplastamiento, 3)Fluencia por cortante de la placa, 4)Ruptura por cortante de la placa, 5)Bloque de cortante en la placa.", MsgBoxStyle.Information, "Diseño de Placa Simple")
    End Sub

    'Introducir número de pernos
    Private Sub ComboBox10_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox10.SelectedIndexChanged
        If TextBox182.Text <> "" Then
            'Calculo de las resistencias de diseño
            'RESISTENCIA NOMINAL DE LA PLACA DE CORTANTE
            Dim Lev As Double = Val(TextBox187.Text)
            Dim Leh As Double = Val(TextBox185.Text)
            Dim Tp As Double = Val(TextBox188.Text)
            Dim numbolts As Double = Val(ComboBox10.SelectedItem)
            Dim esp_s As Double = Val(TextBox183.Text)
            Dim Fyp, Fup As Integer
            If ComboBox12.SelectedItem = "ASTM A36" Then
                Fup = 58
                Fyp = 36
            Else
                Fup = 65
                Fyp = 50
            End If
            'Longitud de la placa 
            Dim Lplaca, bplaca As Double
            Lplaca = 2 * Lev + ((numbolts - 1) * esp_s)
            bplaca = Val(TextBox184.Text) + Leh

            'i)Resistencia a cortante de los pernos
            Dim Fnv, Ab As Double
            Fnv = Val(FnvTextBox.Text)
            Dim db As Double
            db = Frac2Num(ComboBox11.Text)
            Ab = Math.PI * (db ^ 2) / 4
            Dim rn1 As Double
            rn1 = 0.75 * Fnv * Ab * numbolts

            'ii)Resistencia al aplastamiento
            Dim OVAL1, OVAL2, APLA As Double
            Dim lcsup, lcint As Double
            'lcsup = lc del perno superior
            'lcint = lc de los pernos interiores
            lcsup = Lev - 0.5 * (db + 1 / 16)
            OVAL1 = 0.75 * 1.2 * lcsup * Tp * Fup
            APLA = 0.75 * 2.4 * db * Tp * Fup
            Dim rsup, rint, rn2 As Double
            rsup = Math.Min(OVAL1, APLA)

            lcint = esp_s - (db + 1 / 16)
            OVAL2 = 0.75 * 1.2 * lcint * Tp * Fup
            rint = Math.Min(OVAL2, APLA)

            rn2 = rsup + ((numbolts - 1) * rint)

            'iii) Fluencia por cortante de la placa
            Dim rn3 As Double
            rn3 = 0.6 * Fyp * Lplaca * Tp

            'iv)Ruptura por cortante de la placa
            Dim Lholes As Double 'Lholes= Long. total de los agujeros de pernos (incluyendo la holgura, dh + 1/16)
            Lholes = (db + 1 / 8) * numbolts
            Dim Anv, rn4 As Double
            Anv = Tp * (Lplaca - Lholes)
            rn4 = 0.75 * 0.6 * Fup * Anv

            'v)Resistencia a la ruptura por bloque de cortante de la placa
            consultRanuraSSL(ComboBox11.Text)
            Dim SSL As Double = Val(ranura)
            Dim rn5, compTension, comFluen, compRupt As Double
            compTension = 0.75 * Fup * (Leh - SSL / 2) * Tp
            comFluen = 0.75 * 0.6 * Fyp * (Lev + esp_s * (numbolts - 1)) * Tp
            compRupt = 0.75 * 0.6 * Fup * ((Lev + esp_s * (numbolts - 1)) - (numbolts - 0.5) * (db + 1 / 8)) * Tp

            rn5 = compTension + Math.Min(comFluen, compRupt)

            'Resistencia de Diseño (la menor de la anteriores)
            Dim RdisPL, RnMostrar As Double
            RdisPL = Math.Min(Math.Min(Math.Min(rn1, rn2), Math.Min(rn3, rn4)), rn5)
            RnMostrar = Math.Round(RdisPL, 2)
            TextBox182.Text = RnMostrar.ToString
            If Val(TextBox170.Text) > RdisPL Then
                TextBox182.BackColor = Color.Red
            Else
                TextBox182.BackColor = Color.WhiteSmoke
            End If
        End If
        'Actualización del Dmin de soldadura (Ya que depende de n)
        If TextBox191.Text <> "" Then
            Dim Dmin, lw As Double
            Dim n As Double = Val(ComboBox10.Text)
            Dim s As Double = Val(TextBox183.Text)
            lw = 2 * Val(TextBox187.Text) + (n - 1) * s
            Dmin = Math.Round(Val(TextBox170.Text) / (2 * 1.392 * lw), 2)
            TextBox191.Text = Dmin.ToString
        End If
    End Sub

    'Introducir Acero de la Placa de Cortante
    Private Sub ComboBox12_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox12.SelectedIndexChanged
        If TextBox182.Text <> "" Then
            'Calculo de las resistencias de diseño
            'RESISTENCIA NOMINAL DE LA PLACA DE CORTANTE
            Dim Lev As Double = Val(TextBox187.Text)
            Dim Leh As Double = Val(TextBox185.Text)
            Dim Tp As Double = Val(TextBox188.Text)
            Dim numbolts As Double = Val(ComboBox10.SelectedItem)
            Dim esp_s As Double = Val(TextBox183.Text)
            Dim Fyp, Fup As Integer
            If ComboBox12.SelectedItem = "ASTM A36" Then
                Fup = 58
                Fyp = 36
            Else
                Fup = 65
                Fyp = 50
            End If
            'Longitud de la placa 
            Dim Lplaca, bplaca As Double
            Lplaca = 2 * Lev + ((numbolts - 1) * esp_s)
            bplaca = Val(TextBox184.Text) + Leh

            'i)Resistencia a cortante de los pernos
            Dim Fnv, Ab As Double
            Fnv = Val(FnvTextBox.Text)
            Dim db As Double
            db = Frac2Num(ComboBox11.Text)
            Ab = Math.PI * (db ^ 2) / 4
            Dim rn1 As Double
            rn1 = 0.75 * Fnv * Ab * numbolts

            'ii)Resistencia al aplastamiento
            Dim OVAL1, OVAL2, APLA As Double
            Dim lcsup, lcint As Double
            'lcsup = lc del perno superior
            'lcint = lc de los pernos interiores
            lcsup = Lev - 0.5 * (db + 1 / 16)
            OVAL1 = 0.75 * 1.2 * lcsup * Tp * Fup
            APLA = 0.75 * 2.4 * db * Tp * Fup
            Dim rsup, rint, rn2 As Double
            rsup = Math.Min(OVAL1, APLA)

            lcint = esp_s - (db + 1 / 16)
            OVAL2 = 0.75 * 1.2 * lcint * Tp * Fup
            rint = Math.Min(OVAL2, APLA)

            rn2 = rsup + ((numbolts - 1) * rint)

            'iii) Fluencia por cortante de la placa
            Dim rn3 As Double
            rn3 = 0.6 * Fyp * Lplaca * Tp

            'iv)Ruptura por cortante de la placa
            Dim Lholes As Double 'Lholes= Long. total de los agujeros de pernos (incluyendo la holgura, dh + 1/16)
            Lholes = (db + 1 / 8) * numbolts
            Dim Anv, rn4 As Double
            Anv = Tp * (Lplaca - Lholes)
            rn4 = 0.75 * 0.6 * Fup * Anv

            'v)Resistencia a la ruptura por bloque de cortante de la placa
            consultRanuraSSL(ComboBox11.Text)
            Dim SSL As Double = Val(ranura)
            Dim rn5, compTension, comFluen, compRupt As Double
            compTension = 0.75 * Fup * (Leh - SSL / 2) * Tp
            comFluen = 0.75 * 0.6 * Fyp * (Lev + esp_s * (numbolts - 1)) * Tp
            compRupt = 0.75 * 0.6 * Fup * ((Lev + esp_s * (numbolts - 1)) - (numbolts - 0.5) * (db + 1 / 8)) * Tp

            rn5 = compTension + Math.Min(comFluen, compRupt)

            'Resistencia de Diseño (la menor de la anteriores)
            Dim RdisPL, RnMostrar As Double
            RdisPL = Math.Min(Math.Min(Math.Min(rn1, rn2), Math.Min(rn3, rn4)), rn5)
            RnMostrar = Math.Round(RdisPL, 2)
            TextBox182.Text = RnMostrar.ToString
            If Val(TextBox170.Text) > RdisPL Then
                TextBox182.BackColor = Color.Red
            Else
                TextBox182.BackColor = Color.WhiteSmoke
            End If
        End If
    End Sub

    Private Sub FnvTextBox_TextChanged(sender As Object, e As EventArgs) Handles FnvTextBox.TextChanged
        If TextBox182.Text <> "" Then
            'Calculo de las resistencias de diseño
            'RESISTENCIA NOMINAL DE LA PLACA DE CORTANTE
            Dim Lev As Double = Val(TextBox187.Text)
            Dim Leh As Double = Val(TextBox185.Text)
            Dim Tp As Double = Val(TextBox188.Text)
            Dim numbolts As Double = Val(ComboBox10.SelectedItem)
            Dim esp_s As Double = Val(TextBox183.Text)
            Dim Fyp, Fup As Integer
            If ComboBox12.SelectedItem = "ASTM A36" Then
                Fup = 58
                Fyp = 36
            Else
                Fup = 65
                Fyp = 50
            End If
            'Longitud de la placa 
            Dim Lplaca, bplaca As Double
            Lplaca = 2 * Lev + ((numbolts - 1) * esp_s)
            bplaca = Val(TextBox184.Text) + Leh

            'i)Resistencia a cortante de los pernos
            Dim Fnv, Ab As Double
            Fnv = Val(FnvTextBox.Text)
            Dim db As Double
            db = Frac2Num(ComboBox11.Text)
            Ab = Math.PI * (db ^ 2) / 4
            Dim rn1 As Double
            rn1 = 0.75 * Fnv * Ab * numbolts

            'ii)Resistencia al aplastamiento
            Dim OVAL1, OVAL2, APLA As Double
            Dim lcsup, lcint As Double
            'lcsup = lc del perno superior
            'lcint = lc de los pernos interiores
            lcsup = Lev - 0.5 * (db + 1 / 16)
            OVAL1 = 0.75 * 1.2 * lcsup * Tp * Fup
            APLA = 0.75 * 2.4 * db * Tp * Fup
            Dim rsup, rint, rn2 As Double
            rsup = Math.Min(OVAL1, APLA)

            lcint = esp_s - (db + 1 / 16)
            OVAL2 = 0.75 * 1.2 * lcint * Tp * Fup
            rint = Math.Min(OVAL2, APLA)

            rn2 = rsup + ((numbolts - 1) * rint)

            'iii) Fluencia por cortante de la placa
            Dim rn3 As Double
            rn3 = 0.6 * Fyp * Lplaca * Tp

            'iv)Ruptura por cortante de la placa
            Dim Lholes As Double 'Lholes= Long. total de los agujeros de pernos (incluyendo la holgura, dh + 1/16)
            Lholes = (db + 1 / 8) * numbolts
            Dim Anv, rn4 As Double
            Anv = Tp * (Lplaca - Lholes)
            rn4 = 0.75 * 0.6 * Fup * Anv

            'v)Resistencia a la ruptura por bloque de cortante de la placa
            consultRanuraSSL(ComboBox11.Text)
            Dim SSL As Double = Val(ranura)
            Dim rn5, compTension, comFluen, compRupt As Double
            compTension = 0.75 * Fup * (Leh - SSL / 2) * Tp
            comFluen = 0.75 * 0.6 * Fyp * (Lev + esp_s * (numbolts - 1)) * Tp
            compRupt = 0.75 * 0.6 * Fup * ((Lev + esp_s * (numbolts - 1)) - (numbolts - 0.5) * (db + 1 / 8)) * Tp

            rn5 = compTension + Math.Min(comFluen, compRupt)

            'Resistencia de Diseño (la menor de la anteriores)
            Dim RdisPL, RnMostrar As Double
            RdisPL = Math.Min(Math.Min(Math.Min(rn1, rn2), Math.Min(rn3, rn4)), rn5)
            RnMostrar = Math.Round(RdisPL, 2)
            TextBox182.Text = RnMostrar.ToString
            If Val(TextBox170.Text) > RdisPL Then
                TextBox182.BackColor = Color.Red
            Else
                TextBox182.BackColor = Color.WhiteSmoke
            End If
        End If
    End Sub

    'Introducir Tipo de Soldadura 
    Private Sub ComboBox14_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox14.SelectedIndexChanged
        If ComboBox14.SelectedItem = "CJP" Then
            Label323.Location = New Point(35, 43)
            Label323.Text = "Soldadura de ranura de penetración completa"
            TextBox190.Visible = False
            Label324.Visible = False
            PictureBox200.Visible = False
            TextBox191.Visible = False
            Label325.Visible = False
            Label326.Visible = False
        ElseIf ComboBox14.SelectedItem = "PJP" Then
            Label323.Location = New Point(77, 43)
            Label323.Text = "Soldadura PJP por ambos lados"
            TextBox190.Visible = False
            Label324.Visible = False
            PictureBox200.Visible = False
            TextBox191.Visible = False
            Label325.Visible = False
            Label326.Visible = False
        Else
            Label323.Location = New Point(68, 23)
            Label323.Text = "Soldadura de filete de doble lado"
            TextBox190.Visible = True
            Label324.Visible = True
            PictureBox200.Visible = True
            TextBox191.Visible = True
            Label325.Visible = True

            'Calculo de sold. minima
            Dim Dmin, lw As Double
            Dim n As Double = Val(ComboBox10.Text)
            Dim s As Double = Val(TextBox183.Text)
            lw = 2 * Val(TextBox187.Text) + (n - 1) * s
            Dmin = Math.Round(Val(TextBox170.Text) / (2 * 1.392 * lw), 2)
            If lw <> 0 Then
                TextBox191.Text = Dmin.ToString
            End If
        End If
    End Sub

    'Introducir tamaño de soldadura
    Private Sub TextBox190_TextChanged(sender As Object, e As EventArgs) Handles TextBox190.TextChanged
        If Val(TextBox190.Text) < Val(TextBox191.Text) Then
            TextBox190.BackColor = Color.Red
        Else
            TextBox190.BackColor = Color.White
        End If

        'revision de los espesores del patin y de la placa
        'por Ruptura debido a la soldadura
        Dim Instcolumna As Secciones = Secciones.GetSingleton
        Dim Insacer As Aceros = Aceros.GetSingleton
        Dim twc As Double = Val(Instcolumna.TextBox14.Text)
        Dim tp As Double = Val(Me.TextBox188.Text)
        Dim FUcol As Integer = Val(Insacer.TextBox7.Text)
        Dim Fup As Integer = Val(Insacer.TextBox11.Text)
        Dim Dsold, tmcol, tmpl As Double
        Dsold = Val(Me.TextBox190.Text)

        'Calcular espesor minimo para la columna
        tmcol = Math.Round(3.09 * Dsold / FUcol, 3)

        'Calcular el espesor minimo para la placa
        tmpl = Math.Round(6.19 * Dsold / Fup, 3)

        If twc < tmcol And tp >= tmpl Then
            Label326.Visible = True
            Label326.Text = "El espesor del patín de la columna es insuficiente para resistir la ruptura debido a la soldadura"
        ElseIf twc >= tmcol And tp < tmpl Then
            Label326.Visible = True
            Label326.Text = "El espesor de la placa de cortante es insuficiente para resistir la ruptura debido a la soldadura"
        ElseIf twc < tmcol And tp < tmpl Then
            Label326.Visible = True
            Label326.Text = "Tanto el espesor del patín de la columna como el de la placa no resisten la ruptura debido a la soldadura"
        Else
            Label326.Visible = False
        End If

    End Sub

    Private Sub TextBox190_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox190.KeyPress
        soloEntero(e)
    End Sub
    Private Sub TextBox193_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox193.KeyPress
        soloEntero(e)
        If Asc(e.KeyChar) = 13 Then
            TextBox199.Focus()
        End If
    End Sub

    Private Sub TextBox199_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox199.KeyPress
        soloNumeros(TextBox199, e)
        If Asc(e.KeyChar) = 13 Then
            Label347.Focus()
        End If
    End Sub
    'Eventos KeyPress de los ComboBox en el Diseño de Placa de cortante
    Private Sub ComboBox12_KeyPress(sender As Object, e As KeyPressEventArgs) Handles ComboBox12.KeyPress
        e.Handled = True
    End Sub

    Private Sub ComboBox13_KeyPress(sender As Object, e As KeyPressEventArgs) Handles ComboBox13.KeyPress
        e.Handled = True
    End Sub

    Private Sub ComboBox11_KeyPress(sender As Object, e As KeyPressEventArgs) Handles ComboBox11.KeyPress
        e.Handled = True
    End Sub

    Private Sub ComboBox10_KeyPress(sender As Object, e As KeyPressEventArgs) Handles ComboBox10.KeyPress
        e.Handled = True
    End Sub

    Private Sub ComboBox14_KeyPress(sender As Object, e As KeyPressEventArgs) Handles ComboBox14.KeyPress
        e.Handled = True
    End Sub


    '-------------------------------
    '-------------------------------
    'CALCULOS DE CONEX DE ARRIOSTRES
    '-------------------------------
    '-------------------------------
    Private Sub Button7N_Click(sender As Object, e As EventArgs)
        labelStatusBar1.Text = "Aceros según la designación ASTM"
        AceroBR2.ShowDialog()
    End Sub

    Private Sub CalculosArr()

        'CARGAS EN LAS CONEXIONES DE ARRIOSTRES

        If Sistema = "SCBF" Then

            CMBM = Val(TextBox209N.Text)
            CLBM = Val(TextBox210N.Text)
            LBM = Val(TextBox211N.Text)
            SHF = Val(TextBox212N.Text)
            SHF2 = Val(TextBox213N.Text)

            If Tipo = 6 Or Tipo = 7 Or Tipo = 8 Or Tipo = 9 Then

                If Tipo = 8 Then
                    CargasSCBF(textbox354, textbox368)
                ElseIf Tipo = 9 Then
                    CargasSCBF(TextBox261, TextBox275)
                Else
                    CargasSCBF(TextBox219, textbox368)
                End If

            Else

                CargasSCBF(TextBox219, textbox368)

            End If

        ElseIf Sistema = "EBF" Then

            LBM = Val(TextBox303.Text)
            SHF = Val(TextBox304.Text)

            CargasEBFproc()

        ElseIf Sistema = "BRBF" Then

            


        End If

    End Sub

       Private Sub Button6N1_Click(sender As Object, e As EventArgs) Handles Button6N1.Click
        GroupBox138N.Visible = True
        GroupBox139N.Visible = True
        GroupBox140N.Visible = True
        GroupBox141N.Visible = True
        GroupBox142N.Visible = True
        GroupBox149N.Visible = False
        GroupBox150N.Visible = False
        Label630N.Visible = True
        TextBox204N.Visible = True
        Label634N.Visible = True
        TextBox208N.Visible = True
        GroupBox141N.Location = New System.Drawing.Point(270, 403)
        GroupBox142N.Location = New System.Drawing.Point(270, 526)
        Label641N.Visible = True
        Label643N.Visible = True
        TextBox212N.Visible = True
        Label642N.Location = New System.Drawing.Point(76, 56)
        Label644N.Location = New System.Drawing.Point(167, 56)
        TextBox213N.Location = New System.Drawing.Point(121, 53)

        Button1.Enabled = False
        Button3.Enabled = False
        Button15.Enabled = False

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambios en los íconos de los botones
        Button6N1.BackColor = Color.CadetBlue
        Button6N1.BackgroundImage = My.Resources.ICONOscbfPlacaSimple_ILUMINADO
        Button7N1.BackColor = Color.Transparent
        Button7N1.BackgroundImage = My.Resources.ICONOscbfSoldada
        Button23N.BackColor = Color.Transparent
        Button23N.BackgroundImage = My.Resources.ICONOsoldadaDoble
        Button24N.BackColor = Color.Transparent
        Button24N.BackgroundImage = My.Resources.ICONOscbfX
        Button26N.BackColor = Color.Transparent
        Button26N.BackgroundImage = My.Resources.ICONOtopePLsimp
        Button27N.BackColor = Color.Transparent
        Button27N.BackgroundImage = My.Resources.ICONOtopeSold

        'cambio imagen

        PictureBox241N.Image = My.Resources.PSVCSCBF
        PictureBox240N.Image = My.Resources.SCBFC

        'cambio imagenes diseño

        PictureBox316.Image = My.Resources.PSGC
        PictureBox312.Image = My.Resources.CargasGC6
        PictureBox327.Image = My.Resources.PSBC
        PictureBox320.Image = My.Resources.CargasBC6
        PictureBox332.Image = My.Resources.CargasGB6
        PictureBox337.Image = My.Resources.CargasPS

        'cambio posición de labels

        Label946.Location = New System.Drawing.Point(246, 400)
        Label947.Location = New System.Drawing.Point(379, 361)
        Label917.Location = New System.Drawing.Point(206, 143)
        Label916.Location = New System.Drawing.Point(132, 101)
        Label941.Location = New System.Drawing.Point(71, 183)

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna empernada"

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = False
        LabelDiseño.Text = "Conexión Viga/Columna Empernada"

        'If Calculate = 1 Then
        '    LimpiezaPS()
        'End If

        'TIPO
        Tipo = 6

        If TabControl1N.TabPages.Contains(TabPage9) = True And TabControl1N.TabPages.Contains(TabPage15) = True Then
            TabControl1N.TabPages.Remove(TabPage9)
        ElseIf TabControl1N.TabPages.Contains(TabPage9) = True And TabControl1N.TabPages.Contains(TabPage15) = False Then
            TabControl1N.TabPages.Remove(TabPage9)
            TabControl1N.TabPages.Insert(1, TabPage15)
        ElseIf TabControl1N.TabPages.Contains(TabPage9) = False And TabControl1N.TabPages.Contains(TabPage15) = False Then
            TabControl1N.TabPages.Insert(1, TabPage15)
        End If


    End Sub

    Private Sub Button6N_Click(sender As Object, e As EventArgs)

        labelStatusBar1.Text = "Secciones de patín ancho y redondos, sistema imperial"
        BRsecc2.ShowDialog()
        If TextBox209N.Text <> String.Empty Then
            LongInclArriostres(TextBox211N, TextBox212N, TextBox213N)
        End If

    End Sub

    Private Sub Button7N1_Click(sender As Object, e As EventArgs) Handles Button7N1.Click
        GroupBox138N.Visible = True
        GroupBox139N.Visible = True
        GroupBox140N.Visible = True
        GroupBox141N.Visible = True
        GroupBox142N.Visible = True
        GroupBox149N.Visible = False
        GroupBox150N.Visible = False
        Label641N.Visible = True
        Label643N.Visible = True
        TextBox212N.Visible = True
        Label630N.Visible = True
        TextBox204N.Visible = True
        Label634N.Visible = True
        TextBox208N.Visible = True

        Button1.Enabled = False
        Button3.Enabled = False
        Button15.Enabled = False
        GroupBox141N.Location = New System.Drawing.Point(270, 403)
        GroupBox142N.Location = New System.Drawing.Point(270, 526)
        Label642N.Location = New System.Drawing.Point(76, 56)
        Label644N.Location = New System.Drawing.Point(167, 56)
        TextBox213N.Location = New System.Drawing.Point(121, 53)

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambios en los íconos de los botones
        Button6N1.BackColor = Color.Transparent
        Button6N1.BackgroundImage = My.Resources.ICONOscbfPlacaSimple
        Button7N1.BackColor = Color.CadetBlue
        Button7N1.BackgroundImage = My.Resources.ICONOscbfSoldada_ILUMINADO
        Button23N.BackColor = Color.Transparent
        Button23N.BackgroundImage = My.Resources.ICONOsoldadaDoble
        Button24N.BackColor = Color.Transparent
        Button24N.BackgroundImage = My.Resources.ICONOscbfX
        Button26N.BackColor = Color.Transparent
        Button26N.BackgroundImage = My.Resources.ICONOtopePLsimp
        Button27N.BackColor = Color.Transparent
        Button27N.BackgroundImage = My.Resources.ICONOtopeSold

        Button6N1.BackColor = Color.Transparent
        Button6N1.BackgroundImage = My.Resources.ICONOscbfPlacaSimple

        'cambio en el picturebox
        PictureBox241N.Image = My.Resources.SolVCSCBF
        PictureBox240N.Image = My.Resources.SCBFC

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna soldada"

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = False
        LabelDiseño.Text = "Conexión Viga-Columna Soldada"

        'cambio en las imagenes de diseño
        PictureBox214.Image = My.Resources.CargasBC7
        PictureBox221.Image = My.Resources.CargasGB7
        PictureBox225.Image = My.Resources.CargasGC7

        'cambio en la posición de los labels

        Label384.Location = New System.Drawing.Point(143, 115)
        Label385.Location = New System.Drawing.Point(118, 164)
        Label419.Location = New System.Drawing.Point(118, 100)
        Label418.Location = New System.Drawing.Point(182, 144)
        Label439.Location = New System.Drawing.Point(45, 181)
        Label438.Location = New System.Drawing.Point(56, 106)
        Label437.Location = New System.Drawing.Point(160, 116)
        Label436.Location = New System.Drawing.Point(200, 150)

        Tipo = 7

        If TabControl1N.TabPages.Contains(TabPage9) = True And TabControl1N.TabPages.Contains(TabPage15) = True Then
            TabControl1N.TabPages.Remove(TabPage15)
        ElseIf TabControl1N.TabPages.Contains(TabPage15) = True And TabControl1N.TabPages.Contains(TabPage9) = False Then
            TabControl1N.TabPages.Remove(TabPage15)
            TabControl1N.TabPages.Insert(1, TabPage9)
        ElseIf TabControl1N.TabPages.Contains(TabPage15) = False And TabControl1N.TabPages.Contains(TabPage9) = False Then
            TabControl1N.TabPages.Insert(1, TabPage9)
        End If

    End Sub

    Private Sub Button12N_Click(sender As Object, e As EventArgs)

        Button1.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False
        Button12N.BackColor = Color.CadetBlue
        Button13N.BackColor = Color.Transparent
        Button14N.BackColor = Color.Transparent
        Button12N.BackgroundImage = My.Resources.ICONOscbfPlacaSimple_ILUMINADO
        Button13N.BackgroundImage = My.Resources.ICONOscbfSoldada
        Button14N.BackgroundImage = My.Resources.ICONOebfEnlace

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna"

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = False
        LabelDiseño.Text = "Conexión Viga/Columna Empernada"
        Tipo = 11

    End Sub

    Private Sub Button13N_Click(sender As Object, e As EventArgs)

        Button1.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambios en el icono del boton
        Button13N.BackColor = Color.CadetBlue
        Button13N.BackgroundImage = My.Resources.ICONOscbfSoldada_ILUMINADO

        Button12N.BackColor = Color.Transparent
        Button12N.BackgroundImage = My.Resources.ICONOscbfPlacaSimple

        Button14N.BackColor = Color.Transparent
        Button14N.BackgroundImage = My.Resources.ICONOebfEnlace

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna EBF"

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = False
        LabelDiseño.Text = "Conexión Viga/Columna Soldada"
        Tipo = 12

    End Sub

    Private Sub Button14N_Click(sender As Object, e As EventArgs)

        Button1.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambios en el icono del boton
        Button14N.BackColor = Color.CadetBlue
        Button14N.BackgroundImage = My.Resources.ICONOebfEnlace_ILUMINADO

        Button12N.BackColor = Color.Transparent
        Button12N.BackgroundImage = My.Resources.ICONOscbfPlacaSimple

        Button13N.BackColor = Color.Transparent
        Button13N.BackgroundImage = My.Resources.ICONOscbfSoldada

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión Arriostre-Enlace"

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = False
        LabelDiseño.Text = "Conexión Arriostre-Enlace"
        Tipo = 13

    End Sub

    Private Sub Button22N_Click(sender As Object, e As EventArgs) Handles Button22N.Click
        labelStatusBar1.Text = "Secciones de patín ancho y redondos, sistema imperial"
        If Tipo = 9 Then
            BrSecc3.ShowDialog()
        Else
            BRsecc2.ShowDialog()
        End If
        If TextBox201N.Text <> String.Empty Then
            LongInclArriostres(TextBox211N, TextBox212N, TextBox213N)
        End If
    End Sub

    Private Sub Button25N_Click(sender As Object, e As EventArgs) Handles Button25N.Click

        labelStatusBar1.Text = "Aceros según la designación ASTM"
        If Tipo = 9 Then
            AceroBr3.ShowDialog()
        Else
            AceroBR2.ShowDialog()
        End If

    End Sub

    Private Sub TextBox215N_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox215N.KeyPress

        If OpenMode Then
            GoTo Line0
        End If

        SoloNumFrac(TextBox215N, e)

        If Asc(e.KeyChar) = 13 Then

            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox215N.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox215N.Text = Frac2Num(TextBox215N.Text)
            End If
Line0:
            If TextBox215N.Text = "" Then
            Else
                If Sistema = "SCBF" Then
                    If Tipo <> 11 And Tipo <> 10 Then
                        SoldaduraArriostre(TextBox215N, Label652N, TextBox216N, Label654N, Label656N, Tu, Label650N, Label649N, False)
                    Else
                        SoldaduraArriostre(TextBox215N, Label652N, TextBox216N, Label654N, Label656N, Tu2, Label650N, Label649N, True)
                    End If
                ElseIf Sistema = "EBF" Then

                    SoldaduraArriostre(TextBox215N, Label652N, TextBox216N, Label654N, Label656N, Tu, Label650N, Label649N, False)

                End If

                TextBox216N.Focus()

            End If
        End If

    End Sub

    Private Sub TextBox216N_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox216N.KeyPress

        If OpenMode Then
            GoTo Line0
        End If

        SoloNumFrac(TextBox216, e)

        If Asc(e.KeyChar) = 13 Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox216N.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox216N.Text = Frac2Num(TextBox216N.Text)
            End If

Line0:

            If TextBox216N.Text = "" Or TextBox215N.Text = "" Then
            Else

                TextBox205.Text = ""
                TextBox206.Text = ""
                TextBox337.Text = ""

                If Tipo = 10 Or Tipo = 11 Or Tipo = 15 Or Tipo = 16 Then
                    Inferior = True
                End If

                If Tipo = 10 Or Tipo = 11 Then
                    SoldaduraArriostre(TextBox215N, Label652N, TextBox216N, Label654N, Label656N, Tu2, Label650N, Label649N, True)
                Else
                    SoldaduraArriostre(TextBox215N, Label652N, TextBox216N, Label654N, Label656N, Tu, Label650N, Label649N, False)
                End If

                GeometríaGusset4()

                TextBox217N.Focus()

            End If
        End If

    End Sub

    Private Sub SoldaduraArriostre(TamañoSoldadura As TextBox, SoldMáx As Label, LongSold As TextBox, LongMín As Label, Resistencia As Label, Paxialbr As Double, LapMínimo As Label, AxialBr As Label, Inferior As Boolean)

        Dim Lapmin, Dbr, Dbrmax, Lwbrmin As Double

        'Tamaño de soldadura

        If Inferior = False Then
            Lapmin = Math.Round(Paxialbr / (0.75 * 0.6 * Rtbr * Fubr * 4 * tbrdes), 2)
        Else
            Lapmin = Math.Round(Paxialbr / (0.75 * 0.6 * Rtbr2 * Fubr2 * 4 * tbrdes2), 2)
        End If

        LapMínimo.Text = "Lmín = " + Lapmin.ToString + " in"

        AxialBr.Text = Paxialbr.ToString + " kips"

        Dbrmax = Math.Round(Paxialbr / (4 * 1.392 * Lapmin), 2)

        SoldMáx.Text = "in <= " + Dbrmax.ToString + "/16 in"

        If TamañoSoldadura.Text = "" Then
        Else
            Dbr = Val(TamañoSoldadura.Text) * 16
            Lwbrmin = Math.Max(Math.Round(Paxialbr / (4 * 1.392 * Dbr), 2), Lapmin)
            LongMín.Text = "in >= " + Lwbrmin.ToString + " in"
            If Dbr > Dbrmax Then
                SoldMáx.Text = "in > " + Dbrmax.ToString + "/16 in"
                TamañoSoldadura.BackColor = Color.Red
                SoldMáx.ForeColor = Color.Red
            Else
                SoldMáx.Text = "in < " + Dbrmax.ToString + "/16 in"
                TamañoSoldadura.BackColor = Color.White
                SoldMáx.ForeColor = Color.White
            End If
        End If

        If LongSold.Text = "" Then
        Else

            Dim Rbrweld As Double

            If Inferior = False Then
                Lwbr = Val(LongSold.Text)
                If Lwbr < Lwbrmin Then
                    LongSold.BackColor = Color.Red
                    LongMín.ForeColor = Color.Red
                Else
                    LongSold.BackColor = Color.White
                    LongMín.ForeColor = Color.White
                End If
                Rbrweld = 4 * 1.392 * Dbr * Lwbr
            Else
                Lwbr2 = Val(LongSold.Text)

                If Lwbr2 < Lwbrmin Then
                    LongSold.BackColor = Color.Red
                    LongMín.ForeColor = Color.Red
                Else
                    LongSold.BackColor = Color.White
                    LongMín.ForeColor = Color.White
                End If
                Rbrweld = Math.Round(4 * 1.392 * Dbr * Lwbr2, 2)
            End If

            Resistencia.Text = Rbrweld.ToString + " kips"

        End If
    End Sub

    Public Sub AnchoWhitmore(MxWtmr As Label, Mxwtmr2 As Label, Wtmr As TextBox, tmínimo As Label, tgusset As TextBox, RnFluencia As Label, Rnbloque As Label, Lweldbox As TextBox, Inferior As Boolean)

        If Inferior = False Then
            Lwmr = Math.Round(2 * Val(Lweldbox.Text) * Math.Tan(Math.PI / 6) + Darr, 2)
        Else
            Lwmr = Math.Round(2 * Val(Lweldbox.Text) * Math.Tan(Math.PI / 6) + Darr2, 2)
        End If

        MxWtmr.Text = "Ancho de Whitmore máximo: " + Lwmr.ToString + " in"
        Mxwtmr2.Text = "in <= " + Lwmr.ToString + " in"

        If Wtmr.Text = "" Then
        Else
            gLwmr = Val(Wtmr.Text)

            If gLwmr > Lwmr Then
                Wtmr.BackColor = Color.Red
                Mxwtmr2.ForeColor = Color.Red
            Else
                Wtmr.BackColor = Color.White
                Mxwtmr2.ForeColor = Color.White
            End If

            If Inferior = False Then
                tmin = Math.Round(Tu / (0.9 * Fyp * gLwmr), 2)
                tmínimo.Text = "in >= " + tmin.ToString + " in"
            Else
                tmininf = Math.Round(Tu2 / (0.9 * Fyp * gLwmr), 2)
                tmínimo.Text = "in >= " + tmininf.ToString + " in"
            End If

        End If

        If tgusset.Text = "" Then
        Else

            Dim gtpl As Double

            gtpl = Val(tgusset.Text)

            If Inferior = False Then
                If gtpl < tmin Then
                    tgusset.BackColor = Color.Red
                    tmínimo.ForeColor = Color.Red
                Else
                    tgusset.BackColor = Color.White
                    tmínimo.ForeColor = Color.White
                End If
            Else
                If gtpl < tmininf Then
                    tgusset.BackColor = Color.Red
                    tmínimo.ForeColor = Color.Red
                Else
                    tgusset.BackColor = Color.White
                    tmínimo.ForeColor = Color.White
                End If
            End If

            Rngyl = Math.Round(Fyp * gLwmr * gtpl, 2)

            RnFluencia.Text = Rngyl.ToString + " kips"

            If Tu > Rngyl Then
                RnFluencia.ForeColor = Color.Red
            Else
                RnFluencia.ForeColor = Color.White
            End If

            'RESISTENCIA A LA RUPTURA POR BLOQUE DE CORTANTE

            Dim Agv, Ant, Rnblq As Double

            Agv = 2 * gtpl * Val(Lweldbox.Text)

            If Inferior = False Then
                Ant = gtpl * Darr
            Else
                Ant = gtpl * Darr2
            End If

            Rnblq = Math.Round(0.75 * (0.6 * Fyp * Agv + 1 * Fup * Ant), 2)

            Rnbloque.Text = Rnblq.ToString + " kips"

            If Inferior = False Then
                If Rnblq < Tu Then
                    Rnbloque.ForeColor = Color.Red
                Else
                    Rnbloque.ForeColor = Color.White
                End If
            Else
                If Rnblq < Tu2 Then
                    Rnbloque.ForeColor = Color.Red
                Else
                    Rnbloque.ForeColor = Color.White
                End If
            End If

        End If

    End Sub

    Private Sub CargasSCBF(Lgsst As TextBox, Lgsst2 As TextBox)

        Dim Lmenosarr, Lmenosarr2 As Double

        If OpcionesDiseño.LthetaBr = 0 Then
            If Lgsst.Text = "" Then
                If Tipo = 9 Then
                    Lmenosarr = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - theta)) / 12 + (Darr + 2) / 12, 2)
                Else
                    Lmenosarr = Math.Round(db / 12 + dc / 24, 2)
                End If
            Else
                Lmenosarr = Math.Round((Lgsst.Text) / 12, 2)
            End If

            If Lgsst2.Text = "" Then
                If Tipo = 9 Then
                    Lmenosarr2 = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - theta2)) / 12 + (Darr2 + 2) / 12, 2)
                Else
                    Lmenosarr2 = db / 12 + dc / 24
                End If
            Else
                Lmenosarr2 = Val(Lgsst2.Text) / 12
            End If

            Lbr = Math.Round(Math.Sqrt(SHF ^ 2 + (0.5 * LBM) ^ 2) - 2 * Lmenosarr - 0.5, 2)
            Lbr2 = Math.Round(Math.Sqrt(SHF2 ^ 2 + (0.5 * LBM) ^ 2) - 2 * Lmenosarr2 - 0.5, 2)
        End If
        
        Dim k, klr, Fe, Fcre, klr2, Fe2, Fcre2 As Double

        'Cargas requeridas
        '   Arriostres Superiores
        '       Carga esperada a tensión
        k = 1
        If Tipo <> 10 And Tipo <> 11 Then
            Tu = Math.Round(Rybr * Fybr * Agbr)
            '       Carga esperada a compresión
            klr = Math.Round(k * Lbr * 12 / rbr, 2)
            Fe = Math.Round((Math.PI ^ 2) * 29000 / klr ^ 2, 2)
            If klr <= 4.71 * Math.Sqrt(29000 / Fybr) Then
                Fcre = Math.Round((0.658 ^ (Rybr * Fybr / Fe)) * Rybr * Fybr, 2)
            Else
                Fcre = Math.Round(0.877 * Fe, 2)
            End If
            Pu = Math.Round(Math.Min(Tu, 1.14 * Fcre * Agbr))
            '       Carga esperada a compresión post-pandeo
            Pupb = Math.Round(0.3 * Pu, 2)
        End If

        If Tipo <> 6 And Tipo <> 7 Then
            '   Arriostre Inferiores
            '       Carga esperada a tensión
            Tu2 = Math.Round(Rybr2 * Fybr2 * Agbr2)
            '       Carga esperada a compresión
            klr2 = Math.Round(k * Lbr2 * 12 / rbr2, 2)
            Fe2 = Math.Round((Math.PI ^ 2) * 29000 / klr2 ^ 2, 2)
            If klr2 <= 4.71 * Math.Sqrt(29000 / Fybr2) Then
                Fcre2 = Math.Round((0.658 ^ (Rybr2 * Fybr2 / Fe2)) * Rybr2 * Fybr2, 2)
            Else
                Fcre2 = Math.Round(0.877 * Fe, 2)
            End If
            Pu2 = Math.Round(Math.Min(Tu2, 1.14 * Fcre2 * Agbr2))
            '       Carga esperada a compresión post-pandeo
            Pupb2 = Math.Round(0.3 * Pu2, 2)
        End If
        
        If Tipo <> 9 Then
            '   Carga lateral sobre el marco
            '       Considera los casos de análisis del marco. 1's: Carga lateral en la dirección x positiva
            '                                                  2's: Carga lateral en la dirección x negativa
            '                                                  a's: Compresión total del arriostre
            '                                                  b's: Compresión post-pandeo del arriostre
            Dim factcomp As Double

            If OpcionesDiseño.CompConsid = 1 Then
                factcomp = 1
            Else
                factcomp = 0.5
            End If

            Ast1a = Math.Round((Math.Sin(theta2) * (Tu2 + Pu2) - Math.Sin(theta) * (Tu + Pu)) * factcomp, 2)
            Ast1b = Math.Round((Math.Sin(theta2) * (Tu2 + Pupb2) - Math.Sin(theta) * (Tu + Pupb)) * factcomp, 2)
            Ast2a = -Ast1a
            Ast2b = -Ast1b

            '   Carga axial sobre la viga
            '       Determina por equilibrio de fuerzas la carga axial sobre la viga
            HBm1a = -((Tu * Math.Sin(theta)) - (Pu2 * Math.Sin(theta2)) + Ast1a)
            HBm1b = -((Tu * Math.Sin(theta)) - (Pupb2 * Math.Sin(theta2)) + Ast1a)
            HBm2a = -((Tu2 * Math.Sin(theta2)) - (Pu * Math.Sin(theta)) - Ast2a)
            HBm2b = -((Tu2 * Math.Sin(theta2)) - (Pupb * Math.Sin(theta)) - Ast2b)
            '   Cortante gravitacional en la viga
            RuBM = -Math.Round((1.4 * CMBM + 0.5 * CLBM) * LBM / 2, 2)

            '   Cortante por acción de los arriostres en la viga

            Dim CortVig1, CortVig2 As Double

            If Tipo = 8 Then

                CortVig1 = ((Tu * Math.Cos(theta)) + (Pu2 * Math.Cos(theta2))) / 2
                CortVig2 = -((Pu * Math.Cos(theta)) + (Tu2 * Math.Cos(theta2))) / 2

                VBM = Math.Round(Math.Max(Math.Abs(RuBM + CortVig1), Math.Abs(RuBM + CortVig2)), 2)

            ElseIf Tipo = 10 Or Tipo = 11 Then

                CortVig1 = -Tu2 * Math.Cos(theta2) / 2
                CortVig2 = Pu2 * Math.Cos(theta2) / 2

                VBM = Math.Round(Math.Max(Math.Abs(RuBM + CortVig1), Math.Abs(RuBM + CortVig2)), 2)

            Else

                CortVig1 = Tu * Math.Cos(theta) / 2
                CortVig2 = -Pu * Math.Cos(theta) / 2

                VBM = Math.Round(Math.Max(Math.Abs(RuBM + CortVig1), Math.Abs(RuBM + CortVig2)), 2)

            End If

            'Resistencia disponible al cortante en la viga

            VnBM = 0.6 * Fyb * (db * tbw)

        End If

    End Sub

    Private Sub TextBox217N_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox217N.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If

        SoloNumFrac(TextBox217N, e)

        If Asc(e.KeyChar) = 13 Then

            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox217N.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox217N.Text = Frac2Num(TextBox217N.Text)
            End If
Line0:
            If TextBox216N.Text = "" Or TextBox215N.Text = "" Or TextBox217N.Text = "" Then
            Else
                TextBox205.Text = ""
                TextBox206.Text = ""
                TextBox337.Text = ""
                If Tipo = 10 Or Tipo = 11 Or Tipo = 15 Or Tipo = 16 Then
                    Inferior = True
                End If
                GeometríaGusset4()

                TextBox218N.Focus()

            End If

        End If
    End Sub
    Private Sub TextBox218N_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox218N.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox218N.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox218N.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox218N.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox218N.Text = Frac2Num(TextBox218N.Text)
            End If
Line0:
            If TextBox216N.Text = "" Or TextBox215N.Text = "" Or TextBox217N.Text = "" Or TextBox218N.Text = "" Then
            Else
                TextBox205.Text = ""
                TextBox206.Text = ""
                TextBox337.Text = ""
                If Tipo = 10 Or Tipo = 11 Or Tipo = 15 Or Tipo = 16 Then
                    Inferior = True
                End If
                GeometríaGusset4()
                TextBox204.Focus()

            End If
        End If
    End Sub

    Private Sub OpcionesDeCálculoToolStripMenuItem_Click(sender As Object, e As EventArgs) Handles OpcionesCalculosToolStripMenuItem.Click

        OpcionesDiseño.ShowDialog()
        If (Tipo = 6 Or Tipo = 7 Or Tipo = 8 Or Tipo = 9) And OpcionesDiseño.LthetaBr = 1 And TextBox201N.Text <> String.Empty Then
            LongInclArriostres(TextBox211N, TextBox212N, TextBox213N)
        ElseIf (Tipo = 10 Or Tipo = 11) And OpcionesDiseño.LthetaBr = 1 And TextBox209.Text <> String.Empty Then
            LongInclArriostres(TextBox211N, TextBox212N, TextBox213N)
        ElseIf (Tipo = 12 Or Tipo = 13 Or Tipo = 15 Or Tipo = 16) And OpcionesDiseño.LthetaBr = 1 And TextBox295.Text <> String.Empty Then
            LongInclArriostres(TextBox303, TextBox304, TextBox304)
        ElseIf (Tipo = 14) And OpcionesDiseño.LthetaBr = 1 And TextBox306.Text <> String.Empty Then
            LongInclArriostres(TextBox303, TextBox304, TextBox304)
        End If

    End Sub

    Private Sub Button12_Click(sender As Object, e As EventArgs) Handles Button12.Click
        AnchoPlcont.ShowDialog()
    End Sub


    Private Sub Button23N_Click(sender As Object, e As EventArgs) Handles Button23N.Click
        GroupBox138N.Visible = True
        GroupBox139N.Visible = True
        GroupBox140N.Visible = True
        GroupBox141N.Visible = True
        GroupBox142N.Visible = True
        GroupBox149N.Visible = False
        GroupBox150N.Visible = False
        Label641N.Visible = True
        Label643N.Visible = True
        TextBox212N.Visible = True
        Label630N.Visible = True
        TextBox204N.Visible = True
        Label634N.Visible = True
        TextBox208N.Visible = True

        Button1.Enabled = False
        Button3.Enabled = False
        Button15.Enabled = False
        GroupBox141N.Location = New System.Drawing.Point(270, 403)
        GroupBox142N.Location = New System.Drawing.Point(270, 526)
        Label642N.Location = New System.Drawing.Point(76, 56)
        Label644N.Location = New System.Drawing.Point(167, 56)
        TextBox213N.Location = New System.Drawing.Point(121, 53)

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambios en los íconos de los botones
        Button6N1.BackColor = Color.Transparent
        Button6N1.BackgroundImage = My.Resources.ICONOscbfPlacaSimple
        Button7N1.BackColor = Color.Transparent
        Button7N1.BackgroundImage = My.Resources.ICONOscbfSoldada
        Button23N.BackColor = Color.CadetBlue
        Button23N.BackgroundImage = My.Resources.ICONOsoldadaDoble_ILUMINADO
        Button24N.BackColor = Color.Transparent
        Button24N.BackgroundImage = My.Resources.ICONOscbfX
        Button26N.BackColor = Color.Transparent
        Button26N.BackgroundImage = My.Resources.ICONOtopePLsimp
        Button27N.BackColor = Color.Transparent
        Button27N.BackgroundImage = My.Resources.ICONOtopeSold

        'Button7N1.BackColor = Color.CadetBlue
        'Button7N1.BackgroundImage = My.Resources.ICONOscbfSoldada_ILUMINADO

        'Button6N1.BackColor = Color.Transparent
        'Button6N1.BackgroundImage = My.Resources.ICONOscbfPlacaSimple

        'Button8N2.BackColor = Color.Transparent
        'Button8N2.BackgroundImage = My.Resources.ICONOscbfArriostre

        'cambio en el picturebox
        PictureBox241N.Image = My.Resources._2arrSolVC
        PictureBox240N.Image = My.Resources.SCBFX

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna soldada"

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = False
        LabelDiseño.Text = "Conexión Viga-Columna Soldada 2"

        Tipo = 8

    End Sub

    Private Sub Button24N_Click(sender As Object, e As EventArgs) Handles Button24N.Click

        GroupBox138N.Visible = True
        GroupBox139N.Visible = True
        GroupBox140N.Visible = True
        GroupBox141N.Visible = True
        GroupBox142N.Visible = True
        GroupBox149N.Visible = False
        GroupBox150N.Visible = False
        Label630N.Visible = False
        TextBox204N.Visible = False
        Label634N.Visible = False
        TextBox208N.Visible = False
        Button1.Enabled = False
        Button3.Enabled = False
        Button15.Enabled = False
        GroupBox141N.Location = New System.Drawing.Point(270, 403)
        GroupBox142N.Location = New System.Drawing.Point(270, 526)
        Label641N.Visible = True
        Label643N.Visible = True
        TextBox212N.Visible = True
        Label642N.Location = New System.Drawing.Point(76, 56)
        Label644N.Location = New System.Drawing.Point(167, 56)
        TextBox213N.Location = New System.Drawing.Point(121, 53)

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambios en los íconos de los botones
        Button6N1.BackColor = Color.Transparent
        Button6N1.BackgroundImage = My.Resources.ICONOscbfPlacaSimple
        Button7N1.BackColor = Color.Transparent
        Button7N1.BackgroundImage = My.Resources.ICONOscbfSoldada
        Button23N.BackColor = Color.Transparent
        Button23N.BackgroundImage = My.Resources.ICONOsoldadaDoble
        Button24N.BackColor = Color.CadetBlue
        Button24N.BackgroundImage = My.Resources.ICONOscbfX_ILUMINADO
        Button26N.BackColor = Color.Transparent
        Button26N.BackgroundImage = My.Resources.ICONOtopePLsimp
        Button27N.BackColor = Color.Transparent
        Button27N.BackgroundImage = My.Resources.ICONOtopeSold

        'Cambio en el picturebox
        PictureBox241N.Image = My.Resources.XSoldada
        PictureBox240N.Image = My.Resources.XSCBF

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga en X"

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = False
        LabelDiseño.Text = "Conexión Arriostre-Viga X"

        Tipo = 9

    End Sub

    Private Sub Button26N_Click(sender As Object, e As EventArgs) Handles Button26N.Click
        GroupBox138N.Visible = True
        GroupBox149N.Visible = True
        GroupBox150N.Visible = True
        GroupBox139N.Visible = False
        GroupBox140N.Visible = False
        GroupBox141N.Visible = True
        GroupBox142N.Visible = True
        GroupBox141N.Location = New System.Drawing.Point(270, 345)
        GroupBox142N.Location = New System.Drawing.Point(270, 468)
        Label641N.Visible = False
        Label643N.Visible = False
        TextBox212N.Visible = False
        Label642N.Location = New System.Drawing.Point(76, 43)
        Label644N.Location = New System.Drawing.Point(167, 43)
        TextBox213N.Location = New System.Drawing.Point(121, 40)
        Button1.Enabled = False
        Button3.Enabled = False
        Button15.Enabled = False

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambio en los íconos de los botones
        Button6N1.BackColor = Color.Transparent
        Button6N1.BackgroundImage = My.Resources.ICONOscbfPlacaSimple
        Button7N1.BackColor = Color.Transparent
        Button7N1.BackgroundImage = My.Resources.ICONOscbfSoldada
        Button23N.BackColor = Color.Transparent
        Button23N.BackgroundImage = My.Resources.ICONOsoldadaDoble
        Button24N.BackColor = Color.Transparent
        Button24N.BackgroundImage = My.Resources.ICONOscbfX
        Button26N.BackColor = Color.CadetBlue
        Button26N.BackgroundImage = My.Resources.ICONOtopePLsimp_ILUMINADO
        Button27N.BackColor = Color.Transparent
        Button27N.BackgroundImage = My.Resources.ICONOtopeSold

        'CAMBIO EN LAS IMAGENES
        PictureBox241N.Image = My.Resources.BCBolted
        PictureBox240N.Image = My.Resources.VSCBF

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna empernada (Tope)"

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = False
        LabelDiseño.Text = "Conexión Viga-Columna Empernada (Tope)"

        'Cambio en las imágenes de diseño
        PictureBox312.Image = My.Resources.CargasGC6i
        PictureBox320.Image = My.Resources.CargasBC6i
        PictureBox332.Image = My.Resources.CargasGB6i
        PictureBox337.Image = My.Resources.CargasPSi
        'cambio de lugar en los labels
        Label946.Location = New System.Drawing.Point(240, 317)
        Label947.Location = New System.Drawing.Point(373, 278)
        Label917.Location = New System.Drawing.Point(215, 117)
        Label941.Location = New System.Drawing.Point(74, 146)
        Label916.Location = New System.Drawing.Point(137, 70)

        Tipo = 10

        If TabControl1N.TabPages.Contains(TabPage9) = True And TabControl1N.TabPages.Contains(TabPage15) = True Then
            TabControl1N.TabPages.Remove(TabPage9)
        ElseIf TabControl1N.TabPages.Contains(TabPage9) = True And TabControl1N.TabPages.Contains(TabPage15) = False Then
            TabControl1N.TabPages.Remove(TabPage9)
            TabControl1N.TabPages.Insert(1, TabPage15)
        ElseIf TabControl1N.TabPages.Contains(TabPage9) = False And TabControl1N.TabPages.Contains(TabPage15) = False Then
            TabControl1N.TabPages.Insert(1, TabPage15)
        End If

    End Sub

    Private Sub Button27N_Click(sender As Object, e As EventArgs) Handles Button27N.Click
        GroupBox138N.Visible = True
        GroupBox149N.Visible = True
        GroupBox150N.Visible = True
        GroupBox139N.Visible = False
        GroupBox140N.Visible = False
        GroupBox141N.Visible = True
        GroupBox142N.Visible = True
        GroupBox141N.Location = New System.Drawing.Point(270, 345)
        GroupBox142N.Location = New System.Drawing.Point(270, 468)
        Label641N.Visible = False
        Label643N.Visible = False
        TextBox212N.Visible = False
        Label642N.Location = New System.Drawing.Point(76, 43)
        Label644N.Location = New System.Drawing.Point(167, 43)
        TextBox213N.Location = New System.Drawing.Point(121, 40)
        Button1.Enabled = False
        Button3.Enabled = False
        Button15.Enabled = False

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'cambio en las imágenes de los botones
        Button6N1.BackColor = Color.Transparent
        Button6N1.BackgroundImage = My.Resources.ICONOscbfPlacaSimple
        Button7N1.BackColor = Color.Transparent
        Button7N1.BackgroundImage = My.Resources.ICONOscbfSoldada
        Button23N.BackColor = Color.Transparent
        Button23N.BackgroundImage = My.Resources.ICONOsoldadaDoble
        Button24N.BackColor = Color.Transparent
        Button24N.BackgroundImage = My.Resources.ICONOscbfX
        Button26N.BackColor = Color.Transparent
        Button26N.BackgroundImage = My.Resources.ICONOtopePLsimp
        Button27N.BackColor = Color.CadetBlue
        Button27N.BackgroundImage = My.Resources.ICONOtopeSold_ILUMINADO

        'CAMBIO EN LAS IMAGENES
        PictureBox241N.Image = My.Resources.BCWelded
        PictureBox240N.Image = My.Resources.VSCBF

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna soldada (Tope)"

        'CAMBIO EN EL LABEL DE DISEÑO 
        LabelDiseño.Visible = False
        LabelDiseño.Text = "Conexión Viga-Columna Soldada (Tope)"

        'cambio en las imagenes de diseño
        PictureBox214.Image = My.Resources.CargasBC7i
        PictureBox221.Image = My.Resources.CargasGB7i
        PictureBox225.Image = My.Resources.CargasGC7i

        'cambio en la posición de los labels

        Label384.Location = New System.Drawing.Point(137, 46)
        Label385.Location = New System.Drawing.Point(227, 91)
        Label419.Location = New System.Drawing.Point(118, 65)
        Label418.Location = New System.Drawing.Point(187, 119)
        Label439.Location = New System.Drawing.Point(51, 146)
        Label438.Location = New System.Drawing.Point(71, 144)
        Label437.Location = New System.Drawing.Point(158, 144)
        Label436.Location = New System.Drawing.Point(201, 185)

        Tipo = 11

        If TabControl1N.TabPages.Contains(TabPage9) = True And TabControl1N.TabPages.Contains(TabPage15) = True Then
            TabControl1N.TabPages.Remove(TabPage15)
        ElseIf TabControl1N.TabPages.Contains(TabPage15) = True And TabControl1N.TabPages.Contains(TabPage9) = False Then
            TabControl1N.TabPages.Remove(TabPage15)
            TabControl1N.TabPages.Insert(1, TabPage9)
        ElseIf TabControl1N.TabPages.Contains(TabPage15) = False And TabControl1N.TabPages.Contains(TabPage9) = False Then
            TabControl1N.TabPages.Insert(1, TabPage9)
        End If

    End Sub

    Private Sub Button29N_Click(sender As Object, e As EventArgs) Handles Button29N.Click
        labelStatusBar1.Text = "Secciones de patín ancho y redondos, sistema imperial"
        BrSecc.ShowDialog()
        If TextBox209.Text <> String.Empty Then
            LongInclArriostres(TextBox211N, TextBox212N, TextBox213N)
        End If
    End Sub

    Private Sub Button14_Click(sender As Object, e As EventArgs) Handles Button14.Click
        labelStatusBar1.Text = "Aceros según la designación ASTM"
        AceroBr.ShowDialog()
    End Sub

    Private Sub TextBox204_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox204.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloNumeros(TextBox204, e)
        If Asc(e.KeyChar) = 13 Then
Line0:
            Piv = 1
            TextBox205.Text = ""
            TextBox206.Text = ""
            TextBox337.Text = ""
            If Tipo = 10 Or Tipo = 11 Or Tipo = 15 Or Tipo = 16 Then
                Inferior = True
            End If
            GeometríaGusset4()
            TextBox207.Focus()
        End If
    End Sub
    'LA
    Private Sub TextBox205_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox205.KeyPress
        If OpenMode Then
            GoTo line0
        End If
        SoloNumFrac(TextBox205, e)
        If Asc(e.KeyChar) = 13 And TextBox205.Text <> String.Empty Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox205.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox205.Text = Frac2Num(TextBox205.Text)
            End If
line0:
            If Tipo = 10 Or Tipo = 11 Or Tipo = 15 Or Tipo = 16 Then
                Inferior = True
            End If
            GeometríaGusset4()
            TextBox206.Focus()
        End If

    End Sub
    'LB
    Private Sub TextBox206_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox206.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox206.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox206.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox206.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox206.Text = Frac2Num(TextBox206.Text)
            End If
Line0:
            If Tipo = 10 Or Tipo = 11 Or Tipo = 15 Or Tipo = 16 Then
                Inferior = True
            End If
            GeometríaGusset4()
            TextBox337.Focus()

        End If
    End Sub
    '2t
    Private Sub TextBox207_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox207.KeyPress

        If OpenMode = True Then
            GoTo Line0
        End If
        soloNumeros(TextBox207, e)
        If Asc(e.KeyChar) = 13 And TextBox207.Text <> String.Empty Then
Line0:
            Piv2 = 1
            TextBox205.Text = ""
            TextBox206.Text = ""
            TextBox337.Text = ""
            If Tipo = 10 Or Tipo = 11 Or Tipo = 15 Or Tipo = 16 Then
                Inferior = True
            End If

            GeometríaGusset4()

            If Sistema = "SCBF" Then
                TextBox219.Focus()
            Else
                TextBox205.Focus()
            End If

        End If

    End Sub
    'L
    Private Sub TextBox219_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox219.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox219.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox219.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 And TextBox219.Text <> String.Empty Then
            exTexto = Strings.InStr(TextBox219.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox219.Text = Frac2Num(TextBox219.Text)
            End If
Line0:
            TextBox205.Text = ""
            TextBox206.Text = ""
            TextBox337.Text = ""
            If Tipo = 10 Or Tipo = 11 Or Tipo = 15 Or Tipo = 16 Then
                Inferior = True
            End If
            GeometríaGusset4()
            TextBox205.Focus()
        End If
    End Sub

    Private Sub CargasResistencias()

        'Determinación de cargas y resistencias

        If Tipo = 8 Then

            'Distribución de las cargas y soldadura necesaria

            'Viga-Columna
            DistribCargas(TextBox360, TextBox350, 1, Label547, Label546, Label511, Label533, Label537, "BC", Label630, Label660, Label663, False)
            Resistencias("Column", Label530, Label528, Label509, Label507, TextBox345, TextBox360, TextBox350, "BC", Label532, False)
            PhiRnStub(Label541, Label543, textbox361)
            Comparación(Label530, Label528, Label547, Label546, Label509, Label507, Label511, Label533)

            'Gusset-Viga Superior
            DistribCargas(TextBox360, TextBox350, 1, Label527, Label526, Label511, Label519, Label522, "GB", Label630, Label663, Label660, False)
            Resistencias("Beam", Label514, Label512, Label509, Label507, TextBox345, TextBox360, TextBox350, "GB", Label516, False)
            Comparación(Label514, Label512, Label527, Label526, Label509, Label507, Label511, Label519)

            'Gusset-Viga Inferior
            DistribCargas(TextBox374, TextBox364, 1, Label505, Label506, Label494, Label498, Label501, "GB", Label633, Label666, Label669, True)
            Resistencias("Beam", Label492, Label490, Label488, Label486, TextBox377, TextBox374, TextBox364, "GB", Label495, True)
            Comparación(Label492, Label490, Label505, Label506, Label488, Label486, Label494, Label498)

            'Gusset-Columna Superior
            DistribCargas(TextBox360, TextBox350, 1, Label608, Label607, Label592, Label600, Label603, "GC", Label636, Label672, Label675, False)
            Resistencias("Column", Label595, Label593, Label590, Label588, TextBox377, TextBox360, TextBox350, "GC", Label597, False)
            Comparación(Label595, Label593, Label608, Label607, Label590, Label588, Label592, Label600)

            'Gusset-Columna Inferior
            DistribCargas(TextBox374, TextBox364, 1, Label629, Label628, Label617, Label621, Label624, "GC", Label639, Label678, Label681, True)
            Resistencias("Column", Label615, Label613, Label611, Label609, TextBox377, TextBox374, TextBox364, "GC", Label618, True)
            Comparación(Label615, Label613, Label629, Label628, Label611, Label609, Label617, Label621)

            If CortanteViga > VnBM Then
                MsgBox("El cortante requerido sobre la porción de la viga sobrepasa a la resistencia disponible. Por favor, cambiar el perfil de la porción de la viga o la geometría de la placa gusset.", MsgBoxStyle.Critical, "Falla por cortante.")
            End If

            RevMode = True

            If TextBox240.Text <> "" Then
                TextBox240_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If

            If TextBox239.Text <> "" Then
                TextBox239_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If

            If TextBox238.Text <> "" Then
                TextBox238_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If

            If TextBox255.Text <> "" Then
                TextBox255_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If

            If TextBox256.Text <> "" Then
                TextBox256_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If

            RevMode = False

        ElseIf Tipo = 7 Or Tipo = 13 Then

            DistribCargas(TextBox206, TextBox337, 1, Label384, Label385, Label419, Label400, Label394, "BC", Label642, Label651, Label648, False)
            Resistencias("Column", Label396, Label398, Label333, Label333, TextBox218N, TextBox206, TextBox337, "BC", Label450, False)
            PhiRnStub(Label389, Label388, TextBox205)
            Comparación(Label396, Label398, Label385, Label384, Label433, Label415, Label439, Label400)
            DistribCargas(TextBox206, TextBox337, 1, Label419, Label418, Label439, Label406, Label409, "GB", Label642, Label651, Label648, False)
            Resistencias("Beam", Label404, Label402, Label433, Label415, TextBox218N, TextBox206, TextBox337, "GB", Label447, False)
            Comparación(Label404, Label402, Label418, Label419, Label433, Label415, Label439, Label406)
            DistribCargas(TextBox206, TextBox337, 1, Label437, Label436, Label438, Label424, Label427, "GC", Label645, Label654, Label657, False)
            Resistencias("Column", Label422, Label420, Label442, Label440, TextBox218N, TextBox206, TextBox337, "GC", Label444, False)
            Comparación(Label422, Label420, Label437, Label436, Label442, Label440, Label438, Label424)

            If CortanteViga > VnBM Then
                MsgBox("El cortante requerido sobre la porción de la viga sobrepasa a la resistencia disponible. Por favor, cambiar el perfil de la porción de la viga o la geometría de la placa gusset.", MsgBoxStyle.Critical, "Falla por cortante.")
            End If

            RevMode = True

            If TextBox221.Text <> "" Then
                TextBox221_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If

            If TextBox222.Text <> "" Then
                TextBox222_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If

            If TextBox223.Text <> "" Then
                TextBox223_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If

            RevMode = False

        ElseIf Tipo = 11 Or Tipo = 16 Then

            DistribCargas(TextBox206, TextBox337, 1, Label384, Label385, Label419, Label400, Label394, "BC", Label642, Label651, Label648, True)
            Resistencias("Column", Label396, Label398, Label333, Label333, TextBox218N, TextBox205, TextBox206, "BC", Label450, True)
            PhiRnStub(Label389, Label388, TextBox205)
            Comparación(Label396, Label398, Label385, Label384, Label433, Label415, Label438, Label400)
            DistribCargas(TextBox206, TextBox337, 1, Label419, Label418, Label439, Label406, Label409, "GB", Label642, Label651, Label648, True)
            Resistencias("Beam", Label404, Label402, Label433, Label415, TextBox218N, TextBox205, TextBox206, "GB", Label447, True)
            Comparación(Label404, Label402, Label418, Label419, Label433, Label415, Label439, Label406)
            DistribCargas(TextBox206, TextBox337, 1, Label437, Label436, Label438, Label424, Label427, "GC", Label645, Label654, Label657, True)
            Resistencias("Column", Label422, Label420, Label442, Label440, TextBox218N, TextBox205, TextBox206, "GC", Label444, True)
            Comparación(Label422, Label420, Label437, Label436, Label442, Label440, Label438, Label424)

            If CortanteViga > VnBM Then
                MsgBox("El cortante requerido sobre la porción de la viga sobrepasa a la resistencia disponible. Por favor, cambiar el perfil de la porción de la viga o la geometría de la placa gusset.", MsgBoxStyle.Critical, "Falla por cortante.")
            End If

            RevMode = True

            If TextBox221.Text <> "" Then
                TextBox221_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If

            If TextBox222.Text <> "" Then
                TextBox222_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If

            If TextBox223.Text <> "" Then
                TextBox223_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If

            RevMode = False

        End If

    End Sub

    Private Sub PandeoGusset(lb As TextBox, tpgusset As Double, AWhitmore As Double, tgusset As TextBox, Rnpandeo As Label, Parriostre As Double, Pcompresión As Label, LGusset As TextBox)

        'Resistencia disponible
        'lb     textbox220
        'radiogiro  rbr
        'AWhitmore  textbox217N
        'tgusset    textbox218N
        'Rnpandeo   label381
        'Pcompresión    label383
        'PandeoGusset(textbox220, rbr, textbox217N, textbox218N, label381, label383)

        If lb.Text = "" Then
        Else
            Dim Klr, Fe, Fcr, Rn As Double

            Klr = Math.Round(0.6 * Val(lb.Text) / (tpgusset / Math.Sqrt(12)), 2)
            Fe = Math.Round((Math.PI ^ 2) * 29000 / Klr ^ 2, 2)

            If Klr <= 4.71 * Math.Sqrt(29000 / Fybr) Then
                Fcr = Math.Round(0.658 ^ (Fyp / Fe) * Fyp, 2)
            Else
                Fcr = Math.Round(0.877 * Fe, 2)
            End If

            Dim Prequerido As Double

            If Sistema = "SCBF" Then
                Prequerido = Math.Round(1.1 * Parriostre, 2)
            Else
                Prequerido = Parriostre
            End If

            Pcompresión.Text = Prequerido.ToString + " kips"

            Rn = Math.Round(1.14 * Fcr * AWhitmore * Val(tgusset.Text), 2)
            Rnpandeo.Text = Rn.ToString + " kips"

            If Rn >= Prequerido Then
                Rnpandeo.Text = Rn.ToString + " kips >= " + Prequerido.ToString + " kips"
                Pcompresión.ForeColor = Color.White
            Else
                Pcompresión.Text = Rn.ToString + " kips < " + Prequerido.ToString + " kips"
                Pcompresión.ForeColor = Color.Red
            End If

            Dim LongArr As Double

            LongArr = Math.Round(Math.Sqrt(SHF ^ 2 + (0.5 * LBM) ^ 2) - Val(LGusset.Text) / 6, 2)

            If (LongArr < 0.9 * Lbr Or LongArr > 1.1 * Lbr) And Sistema = "SCBF" Then
                CargasSCBF(LGusset, TextBox368)
            End If

        End If

    End Sub

    Private Sub DistribCargas(L_A As TextBox, L_B As TextBox, S As Double, Vlabel As Label, Hlabel As Label, MLabel As Label, Rulabel As Label, Dlabel As Label, Cnx As String, Normal As Label, Normal2 As Label, Cortante As Label, Inferior As Boolean)

        Dim Braxial As Double
        Dim ánguloBr As Double
        Dim alfa, beta As Double
        Dim Huc, Hub, Vuc, Vub, Muc, Mub As Double
        Dim eb, ec As Double
        Dim cuenta As Double

        eb = db / 2
        ec = dc / 2

        cuenta = 0

        If Sistema = "SCBF" Then
            If Inferior = True Then
                Braxial = Tu2
                ánguloBr = theta2
            Else
                Braxial = Tu
                ánguloBr = theta
            End If
        ElseIf Sistema = "EBF" Then
            Braxial = Tu
            Tu2 = Tu
            Pu2 = Pu
            ánguloBr = theta
        ElseIf Sistema = "BRBF" Then
            If Inferior = True Then
                Braxial = Tu2
                ánguloBr = theta2
                tinf = Val(TextBox389.Text)
            Else
                Braxial = Tu
                ánguloBr = theta
                If Tipo = 17 Then
                    t = Val(TextBox244.Text)
                Else
                    t = Val(TextBox340.Text)
                End If
            End If
        End If

Line0:

        alfab = Math.Round((Val(L_A.Text) - 1) / 2 + 1, 2)
        betab = Math.Round((Val(L_B.Text) - 1) / 2 + 1, 2)

        If OpcionesDiseño.MomInd = 0 Then
            beta = betab
            alfa = Math.Round(beta * Math.Tan(ánguloBr) + eb * Math.Tan(ánguloBr) - ec, 2)
            If alfa > alfab Then
                alfa = alfab
                beta = Math.Round((alfa - eb * Math.Tan(ánguloBr) + ec) / Math.Tan(ánguloBr), 2)
                If beta > betab Then
                    GoTo Line01
                End If
            End If
        Else
            'elección de beta y alfa (diferencia minimizada)
Line01:
            Dim Kp, k, D As Double

            D = Math.Round((Math.Tan(ánguloBr)) ^ 2 + (alfab / betab) ^ 2, 2)
            Kp = Math.Round(alfab * (Math.Tan(ánguloBr) + alfab / betab), 2)
            k = Math.Round(eb * Math.Tan(ánguloBr) - ec, 2)

            alfa = Math.Round((Kp * Math.Tan(ánguloBr) + k * (alfab / betab) ^ 2) / D, 2)
            beta = Math.Round((Kp - k * Math.Tan(ánguloBr)) / D, 2)
        End If



        'Distribución de las cargas

        Dim r As Double

        r = Math.Round(Math.Sqrt((alfa + ec) ^ 2 + (beta + eb) ^ 2), 2)

        Huc = Math.Round(ec / r * Braxial, 2)
        Hub = Math.Round(alfa / r * Braxial, 2)
        Vuc = Math.Round(beta / r * Braxial, 2)
        Vub = Math.Round(eb / r * Braxial, 2)
        Muc = Math.Round(Huc * Math.Abs(betab - beta), 2)
        Mub = Math.Round(Vub * Math.Abs(alfa - alfab), 2)

        Dim HcSuperior1, Nt, Nc, Mt, Mc, Sht, Shc, HcInferior1, VbSuperior1, VbInferior1, HcSuperior2, HcInferior2, VbSuperior2, VbInferior2, Rutensión, Rucompresión, Ht, Hc, Vt, Vc, FactorIncl, CortanteVigaGST, CortanteVigaGIT, CortanteVigaGSC, CortanteColumnaGST, CortanteColumnaGSC, CortanteColumnaGIT, CortanteVigaGIC, CortanteColumnaGIC As Double

        If Braxial = Tu And Inferior = False And cuenta = 0 Then

            alfabGS = alfab
            betabGS = betab

            Huc = -Huc
            Vuc = -Vuc
            Hub = -Hub
            Vub = -Vub

            HcSuperior1 = -Huc
            VbSuperior1 = Vub

            If Sistema = "EBF" Then
                RuBM = -Vubm
            End If

            If alfab > alfa Then
                Mub = -Math.Abs(Mub)
                CortanteVigaGST = Math.Round(Math.Max(Math.Abs(Vub / 2) - Math.Abs(Mub / (alfab - S)), Math.Abs(Vub)), 2)
            Else
                Mub = Math.Abs(Mub)
                CortanteVigaGST = Math.Round(Math.Max(Math.Abs(Vub / 2) + Math.Abs(Mub / (alfab - S)), Math.Abs(Vub)), 2)
            End If

            If betab > beta Then
                Muc = Math.Abs(Muc)
                CortanteColumnaGST = Math.Round(Math.Max(Math.Abs(Huc / 2) - Math.Abs(Muc / (betab - S)), Math.Abs(Huc)), 2)
            Else
                Muc = -Math.Abs(Muc)
                CortanteColumnaGST = Math.Round(Math.Max(Math.Abs(Huc / 2) + Math.Abs(Muc / (betab - S)), Math.Abs(Huc)), 2)
            End If

            If Cnx = "BC" Then
                Ht = HcSuperior1 + Ast1a
                Vt = VbSuperior1 + -RuBM
                Rutensión = Math.Round(Math.Sqrt(Ht ^ 2 + Vt ^ 2), 2)
                Nt = Ht
                Sht = Vt
            ElseIf Cnx = "GB" Then
                Ht = Hub
                Vt = Vub
                Mt = Mub
                Rutensión = Math.Round(Math.Sqrt(Ht ^ 2 + Vt ^ 2), 2)
                Nt = Math.Abs(Math.Round(Vub + 4 * (Math.Abs(Mub) / (2 * (alfab - S))), 2))
                Sht = Ht
            ElseIf Cnx = "GC" Then
                Ht = Huc
                Vt = Vuc
                Mt = Muc
                Nt = Math.Round(Math.Abs(Ht) + 4 * (Math.Abs(Muc) / (2 * (betab - 1))), 2)
                Rutensión = Math.Round(Math.Sqrt(Nt ^ 2 + Vt ^ 2), 2)
                Sht = Vt
            End If

            cuenta = cuenta + 1
            Braxial = Pu
            GoTo Line0

        ElseIf Braxial = Pu And Inferior = False And cuenta = 1 Then

            Huc = Math.Abs(Huc)
            Hub = Math.Abs(Hub)
            Vuc = Math.Abs(Vuc)
            Vub = Math.Abs(Vub)

            If alfab > alfa Then
                Mub = Math.Abs(Mub)
                CortanteVigaGSC = Math.Round(Math.Max(Math.Abs(Vub / 2) - Math.Abs(Mub / (alfab - S)), Math.Abs(Vub)), 2)
            Else
                Mub = -Math.Abs(Mub)
                CortanteVigaGSC = Math.Round(Math.Max(Math.Abs(Vub / 2) + Math.Abs(Mub / (alfab - S)), Math.Abs(Vub)), 2)
            End If

            If betab > beta Then
                Muc = -Math.Abs(Muc)
                CortanteColumnaGSC = Math.Round(Math.Max(Math.Abs(Huc / 2) - Math.Abs(Muc / (betab - S)), Math.Abs(Huc)), 2)
            Else
                Muc = Math.Abs(Muc)
                CortanteColumnaGSC = Math.Round(Math.Max(Math.Abs(Huc / 2) + Math.Abs(Muc / (betab - S)), Math.Abs(Huc)), 2)
            End If

            HcSuperior2 = -Huc
            VbSuperior2 = Vub

            If Sistema = "EBF" Then
                RuBM = -Vubm2
                Ast2a = -Ast2a
            End If

            If Cnx = "BC" Then

                Hc = HcSuperior2 + -Ast2a
                Vc = VbSuperior2 + -RuBM
                Rucompresión = Math.Round(Math.Sqrt(Hc ^ 2 + Vc ^ 2), 2)
                Nc = Hc
                Shc = Vc

            ElseIf Cnx = "GB" Then

                Hc = Hub
                Vc = Vub
                Mc = Mub
                Rucompresión = Math.Round(Math.Sqrt(Hc ^ 2 + Vc ^ 2), 2)
                Nc = Math.Round(Vub + 4 * (Math.Abs(Mub) / (2 * (alfab - S))), 2)
                Shc = Hc

            ElseIf Cnx = "GC" Then

                Hc = Huc
                Vc = Vuc
                Mc = Muc
                Nc = Math.Round(Math.Abs(Hc) + 4 * (Math.Abs(Muc) / (2 * (betab - 1))), 2)
                Rucompresión = Math.Round(Math.Sqrt(Nc ^ 2 + Vc ^ 2), 2)

                Shc = Vc

            End If

            If Rutensión > Rucompresión Then

                Rulabel.Text = Rutensión.ToString

                If Math.Abs(Nt) > Math.Abs(Nc) Then
                    N = Nt
                Else
                    N = Nc
                End If

                If Math.Abs(Sht) > Math.Abs(Shc) Then
                    Sh = Sht
                Else
                    Sh = Shc
                End If

                If Cnx = "BC" Then

                    Hlabel.Text = Ht.ToString
                    Vlabel.Text = Vt.ToString
                    Normal.Text = Math.Abs(N).ToString + " kips"
                    Normal2.Text = Math.Abs(N).ToString + " kips"
                    Cortante.Text = Math.Abs(Sh).ToString + " kips"

                    FactorIncl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Ht) / Math.Abs(Vt)))) ^ 1.5
                    MinWeldSize(tbw, tcf)
                    DreqBC = Math.Max(Math.Round((Rutensión / (2 * (1.392) * (db - 2 * kbdes) * FactorIncl)), 2), Dmínreq)
                    Dlabel.Text = "in >= " + DreqBC.ToString + "/16 in"

                ElseIf Cnx = "GB" Then

                    Hlabel.Text = Ht.ToString
                    Vlabel.Text = Vt.ToString
                    Normal.Text = Math.Abs(N).ToString + " kips"
                    Normal2.Text = Math.Abs(N).ToString + " kips"
                    Cortante.Text = Math.Abs(Sh).ToString + " kips"

                    FactorIncl = 1 + 0.5 * (Math.Sin(Math.Atan(Vt / Ht))) ^ 1.5
                    MinWeldSize(t, tbf)
                    MLabel.Text = Mt.ToString
                    DreqGB = Math.Max(Math.Round((1.25 * Rutensión / (2 * (1.392) * (Val(L_A.Text) - S) * FactorIncl)), 2), Dmínreq)
                    Dlabel.Text = "in >= " + DreqGB.ToString + "/16 in"

                ElseIf Cnx = "GC" Then

                    Hlabel.Text = Ht.ToString
                    Vlabel.Text = Vt.ToString
                    Normal.Text = Math.Abs(N).ToString + " kips"
                    Normal2.Text = Math.Abs(N).ToString + " kips"
                    Cortante.Text = Math.Abs(Sh).ToString + " kips"

                    FactorIncl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Ht / Vt)))) ^ 1.5
                    MinWeldSize(t, tcf)
                    MLabel.Text = Mt.ToString
                    DreqGC = Math.Max(Math.Round((1.25 * Rutensión / (2 * (1.392) * (Val(L_B.Text) - 1) * FactorIncl)), 2), Dmínreq)
                    Dlabel.Text = "in >= " + DreqGC.ToString + "/16 in"

                End If

            Else

                Rulabel.Text = Rucompresión.ToString

                If Math.Abs(Nt) > Math.Abs(Nc) Then
                    N = Nt
                Else
                    N = Nc
                End If

                If Math.Abs(Sht) > Math.Abs(Shc) Then
                    Sh = Sht
                Else
                    Sh = Shc
                End If

                If Cnx = "BC" Then

                    Hlabel.Text = Hc.ToString
                    Vlabel.Text = Vc.ToString
                    Normal.Text = Math.Abs(N).ToString + " kips"
                    Normal2.Text = Math.Abs(N).ToString + " kips"
                    Cortante.Text = Math.Abs(Sh).ToString + " kips"

                    FactorIncl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Hc / Vc)))) ^ 1.5
                    MinWeldSize(tbw, tcf)
                    DreqBC = Math.Max(Math.Round((Rucompresión / (2 * (1.392) * (db - 2 * kbdes) * FactorIncl)), 2), Dmínreq)
                    Dlabel.Text = "in >= " + DreqBC.ToString + "/16 in"

                ElseIf Cnx = "GB" Then

                    Hlabel.Text = Hc.ToString
                    Vlabel.Text = Vc.ToString
                    Normal.Text = Math.Abs(N).ToString + " kips"
                    Normal2.Text = Math.Abs(N).ToString + " kips"
                    Cortante.Text = Math.Abs(Sh).ToString + " kips"

                    FactorIncl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Vc / Hc)))) ^ 1.5
                    MinWeldSize(t, tbf)
                    MLabel.Text = Mc.ToString
                    DreqGB = Math.Max(Math.Round((1.25 * Rucompresión / (2 * (1.392) * (Val(L_A.Text) - S) * FactorIncl)), 2), Dmínreq)
                    Dlabel.Text = "in >= " + DreqGB.ToString + "/16 in"

                ElseIf Cnx = "GC" Then

                    Hlabel.Text = Hc.ToString
                    Vlabel.Text = Vc.ToString
                    Normal.Text = Math.Abs(N).ToString + " kips"
                    Normal2.Text = Math.Abs(N).ToString + " kips"
                    Cortante.Text = Math.Abs(Sh).ToString + " kips"

                    FactorIncl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Hc / Vc)))) ^ 1.5
                    MinWeldSize(t, tcf)
                    MLabel.Text = Mc.ToString
                    DreqGC = Math.Max(Math.Round((1.25 * Rucompresión / (2 * (1.392) * (Val(L_B.Text) - S) * FactorIncl)), 2), Dmínreq)
                    Dlabel.Text = "in >= " + DreqGC.ToString + "/16 in"

                End If

            End If

            cuenta = 0

            CortanteViga = Math.Max(CortanteVigaGST + RuBM, -CortanteVigaGSC + RuBM)

            If Tipo = 8 And Cnx = "BC" Then

                Inferior = True
                Braxial = Tu2
                ánguloBr = theta2
                L_A = TextBox374
                L_B = TextBox364
                GoTo Line0

            ElseIf Tipo = 18 And Cnx = "BC" Then

                Inferior = True
                Braxial = Tu2
                ánguloBr = theta2
                L_A = TextBox391
                L_B = TextBox390
                GoTo Line0
            End If

        ElseIf Braxial = Tu2 And Inferior = True And cuenta = 0 Then

            alfabGI = alfab
            betabGI = betab

            Hub = -Hub
            Huc = -Huc

            If alfab > alfa Then
                Mub = Math.Abs(Mub)
                CortanteVigaGIT = Math.Round(Math.Max(Math.Abs(Vub / 2) - Math.Abs(Mub / (alfab - S)), Math.Abs(Vub)), 2)
            Else
                Mub = -Math.Abs(Mub)
                CortanteVigaGIT = Math.Round(Math.Max(Math.Abs(Vub / 2) + Math.Abs(Mub / (alfab - S)), Math.Abs(Vub)), 2)
            End If

            If betab > beta Then
                Muc = -Math.Abs(Muc)
                CortanteColumnaGIT = Math.Round(Math.Max(Math.Abs(Huc / 2) - Math.Abs(Muc / (betab - S)), Math.Abs(Huc)), 2)
            Else
                Muc = Math.Abs(Muc)
                CortanteColumnaGIT = Math.Round(Math.Max(Math.Abs(Huc / 2) + Math.Abs(Muc / (betab - S)), Math.Abs(Huc)), 2)
            End If

            HcInferior2 = -Huc
            VbInferior2 = Vub

            If Sistema = "EBF" Then
                RuBM = -Vubm
                Ast1a = -Ast1a
            End If

            If Cnx = "BC" Then
                If Tipo = 8 Then
                    Ht = Math.Abs(HcSuperior2 + HcInferior2 + Ast1a)
                    Vt = Math.Abs(VbSuperior2 + VbInferior2 + -RuBM)
                    Nt = Ht
                    Sht = Vt
                Else
                    Ht = Math.Abs(Hc2 + -Ast1a)
                    Vt = Math.Abs(Vb2 + -RuBM)
                    Nt = Ht
                    Sht = Vt
                End If

                Rutensión = Math.Round(Math.Sqrt(Ht ^ 2 + Vt ^ 2), 2)

            ElseIf Cnx = "GB" Then

                Ht = Hub
                Vt = Vub
                Mt = Mub
                Rutensión = Math.Round(Math.Sqrt(Ht ^ 2 + Vt ^ 2), 2)
                Nt = Math.Round(Vub + 4 * (Math.Abs(Mub) / (2 * (alfab - S))), 2)
                Sht = Ht

            ElseIf Cnx = "GC" Then

                Ht = Huc
                Vt = Vuc
                Mt = Muc
                Rutensión = Math.Round(Math.Sqrt(Ht ^ 2 + Vt ^ 2), 2)
                Nt = Math.Round(Huc + 4 * (Math.Abs(Muc) / (2 * (betab - S))), 2)
                Sht = Vt

            End If

            cuenta = cuenta + 1
            Braxial = Pu2
            GoTo line0

        ElseIf Braxial = Pu2 And Inferior = True And cuenta = 1 Then

            Huc = Math.Abs(Huc)
            Hub = Math.Abs(Hub)
            Vuc = -Math.Abs(Vuc)
            Vub = -Math.Abs(Vub)
            Muc = Math.Abs(Muc)
            Mub = Math.Abs(Mub)

            If alfab > alfa Then
                Mub = -Math.Abs(Mub)
                CortanteVigaGIC = Math.Round(Math.Max(Math.Abs(Vub / 2) - Math.Abs(Mub / (alfab - S)), Math.Abs(Vub)), 2)
            Else
                Mub = Math.Abs(Mub)
                CortanteVigaGIC = Math.Round(Math.Max(Math.Abs(Vub / 2) + Math.Abs(Mub / (alfab - S)), Math.Abs(Vub)), 2)
            End If

            If betab > beta Then
                Muc = Math.Abs(Muc)
                CortanteColumnaGIC = Math.Round(Math.Max(Math.Abs(Huc / 2) - Math.Abs(Muc / (betab - S)), Math.Abs(Huc)), 2)
            Else
                Muc = -Math.Abs(Muc)
                CortanteColumnaGIC = Math.Round(Math.Max(Math.Abs(Huc / 2) + Math.Abs(Muc / (betab - S)), Math.Abs(Huc)), 2)
            End If

            HcInferior1 = -Huc
            VbInferior1 = Vub

            If Sistema = "EBF" Then
                RuBM = Vubm
                Ast2a = -Ast2a
            End If

            If Cnx = "BC" Then

                If Tipo = 8 Then
                    Hc = HcSuperior1 + HcInferior1 + -Ast2a
                    Vc = VbSuperior1 + VbInferior1 + -RuBM
                    Nc = Hc
                    Shc = Vc
                Else
                    Hc = HcInferior1 + -Ast2a
                    Vc = VbInferior1 + RuBM
                    Nc = Hc
                    Shc = Vc
                End If

                Rucompresión = Math.Round(Math.Sqrt(Hc ^ 2 + Vc ^ 2), 2)

            ElseIf Cnx = "GB" Then

                Hc = Hub
                Vc = Vub
                Mc = Mub
                Rucompresión = Math.Round(Math.Sqrt(Hc ^ 2 + Vc ^ 2), 2)
                Nc = Math.Round(Vub + 4 * (Math.Abs(Mub) / (2 * (alfab - S))), 2)
                Shc = Hc

            ElseIf Cnx = "GC" Then

                Hc = Huc
                Vc = Vuc
                Mc = Muc
                Rucompresión = Math.Round(Math.Sqrt(Hc ^ 2 + Vc ^ 2), 2)
                Nc = Math.Round(Huc + 4 * (Math.Abs(Muc) / (2 * (betab - S))), 2)
                Shc = Vc

            End If

            If Rutensión > Rucompresión Then

                Rulabel.Text = Rutensión.ToString

                If Math.Abs(Nt) > Math.Abs(Nc) Then
                    N = Nt
                Else
                    N = Nc
                End If

                If Math.Abs(Sht) > Math.Abs(Shc) Then
                    Sh = Sht
                Else
                    Sh = Shc
                End If


                If Cnx = "BC" Then

                    Hlabel.Text = Ht.ToString
                    Vlabel.Text = Vt.ToString
                    Normal.Text = Math.Abs(N).ToString + " kips"
                    Normal2.Text = Math.Abs(N).ToString + " kips"
                    Cortante.Text = Math.Abs(Sh).ToString + " kips"

                    FactorIncl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Ht / Vt)))) ^ 1.5
                    MinWeldSize(tbw, tcf)
                    DreqBC = Math.Max(Math.Round(Rutensión / (2 * (1.392) * Tb * FactorIncl), 2), Dmínreq)
                    Dlabel.Text = "in >= " + DreqBC.ToString + "/16 in"

                ElseIf Cnx = "GB" Then

                    Hlabel.Text = Ht.ToString
                    Vlabel.Text = Vt.ToString
                    Normal.Text = Math.Abs(N).ToString + " kips"
                    Normal2.Text = Math.Abs(N).ToString + " kips"
                    Cortante.Text = Math.Abs(Sh).ToString + " kips"

                    FactorIncl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Vt / Ht)))) ^ 1.5
                    MinWeldSize(tinf, tbf)
                    MLabel.Text = Mt.ToString
                    DreqGB2 = Math.Max(Math.Round(1.25 * Rutensión / (2 * (1.392) * (Val(L_A.Text) - S) * FactorIncl), 2), Dmínreq)
                    Dlabel.Text = "in >= " + DreqGB2.ToString + "/16 in"

                ElseIf Cnx = "GC" Then

                    Hlabel.Text = Ht.ToString
                    Vlabel.Text = Vt.ToString
                    Normal.Text = Math.Abs(N).ToString + " kips"
                    Normal2.Text = Math.Abs(N).ToString + " kips"
                    Cortante.Text = Math.Abs(Sh).ToString + " kips"

                    FactorIncl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Ht / Vt)))) ^ 1.5
                    MinWeldSize(tinf, tcf)
                    MLabel.Text = Mt.ToString
                    DreqGC2 = Math.Max(Math.Round(1.25 * Rutensión / (2 * (1.392) * (Val(L_B.Text) - S) * FactorIncl), 2), Dmínreq)
                    Dlabel.Text = "in >= " + DreqGC2.ToString + "/16 in"

                End If
            Else

                Rulabel.Text = Rucompresión.ToString

                If Math.Abs(Nt) > Math.Abs(Nc) Then
                    N = Nt
                Else
                    N = Nc
                End If

                If Math.Abs(Sht) > Math.Abs(Shc) Then
                    Sh = Sht
                Else
                    Sh = Shc
                End If

                If Cnx = "BC" Then

                    Hlabel.Text = Hc.ToString
                    Vlabel.Text = Vc.ToString
                    Normal.Text = Math.Abs(N).ToString + " kips"
                    Normal2.Text = Math.Abs(N).ToString + " kips"
                    Cortante.Text = Math.Abs(Sh).ToString + " kips"
                    FactorIncl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Hc) / Math.Abs(Vc)))) ^ 1.5
                    MinWeldSize(tbw, tcf)
                    DreqBC = Math.Max(Math.Round(Rucompresión / (2 * (1.392) * (db - 2 * kbdes) * FactorIncl), 2), Dmínreq)
                    Dlabel.Text = "in >= " + DreqBC.ToString + "/16 in"

                ElseIf Cnx = "GB" Then

                    Hlabel.Text = Hc.ToString + " kips"
                    Vlabel.Text = Vc.ToString + " kips"
                    Normal.Text = Math.Abs(N).ToString + " kips"
                    Normal2.Text = Math.Abs(N).ToString + " kips"
                    Cortante.Text = Math.Abs(Sh).ToString.ToString + " kips"

                    FactorIncl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Vc) / Math.Abs(Hc)))) ^ 1.5
                    MinWeldSize(tinf, tbf)
                    MLabel.Text = Mc.ToString
                    DreqGB2 = Math.Max(Math.Round(1.25 * Rucompresión / (2 * (1.392) * (Val(L_A.Text) - S) * FactorIncl), 2), Dmínreq)
                    Dlabel.Text = "in >= " + DreqGB2.ToString + "/16 in"

                ElseIf Cnx = "GC" Then

                    Hlabel.Text = Hc.ToString
                    Vlabel.Text = Vc.ToString
                    Normal.Text = Math.Abs(N).ToString + " kips"
                    Normal2.Text = Math.Abs(N).ToString + " kips"
                    Cortante.Text = Math.Abs(Sh).ToString.ToString + " kips"

                    FactorIncl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Hc) / Math.Abs(Vc)))) ^ 1.5
                    MinWeldSize(tinf, tcf)
                    MLabel.Text = Mc.ToString
                    DreqGC2 = Math.Max(Math.Round(1.25 * Rucompresión / (2 * (1.392) * (Val(L_B.Text) - S) * FactorIncl), 2), Dmínreq)
                    Dlabel.Text = "in >= " + DreqGC2.ToString + "/16 in"

                End If

            End If

            If Sistema = "SCBF" Then
                If Tipo = 8 Then
                    CortanteViga = Math.Max(CortanteVigaGST + CortanteVigaGIC + RuBM, -CortanteVigaGSC + -CortanteVigaGIT + RuBM)
                ElseIf Tipo = 10 Or Tipo = 11 Then
                    CortanteViga = Math.Max(-CortanteVigaGIT + RuBM, CortanteVigaGIC + RuBM)
                ElseIf Tipo = 6 Or Tipo = 7 Then
                    CortanteViga = Math.Max(-CortanteVigaGST + RuBM, CortanteVigaGSC + RuBM)
                End If
            ElseIf Sistema = "EBF" Then
                If Tipo = 12 Or Tipo = 13 Then
                    CortanteViga = Math.Max(-CortanteVigaGST + RuBM, CortanteVigaGSC + RuBM)
                Else
                    CortanteViga = Math.Max(-CortanteVigaGIT + RuBM, CortanteVigaGIC + RuBM)
                End If
            ElseIf Sistema = "BRBF" Then
                If Tipo = 18 Then
                    CortanteViga = Math.Max(CortanteVigaGST + CortanteVigaGIC + RuBM, -CortanteVigaGSC + -CortanteVigaGIT + RuBM)
                ElseIf Tipo = 17 Then
                    CortanteViga = Math.Max(-CortanteVigaGST + RuBM, CortanteVigaGSC + RuBM)
                End If
            End If

        End If

    End Sub

    Private Sub Resistencias(Member As String, phiRnLabelyl As Label, phiRnlabelCr As Label, phiRnGSh As Label, PhiRnGT As Label, tgusset As TextBox, L_Alabel As TextBox, L_Blabel As TextBox, Cnx As String, Lweld As Label, inferior As Boolean)

        Dim Rn As Double
        Dim phiRn As Double

        If Sistema = "SCBF" Or Sistema = "EBF" Then
            If inferior = True Then
                alfab = alfabGI
                betab = betabGI
            Else
                alfab = alfabGS
                betab = betabGS
            End If
        ElseIf Sistema = "BRBF" Then
            alfab = (Val(L_Alabel.Text) - 1) / 2
            betab = (Val(L_Blabel.Text) - 1) / 2
        End If
        

        If Member = "Beam" Then

            If alfab > db Then
                Rn = Math.Round(Fyb * tbw * (5 * kbdes + (Val(L_Alabel.Text) - 1)), 2)
            Else
                Rn = Math.Round(Fyb * tbw * (2.5 * kbdes + (Val(L_Alabel.Text) - 1)), 2)
            End If

            phiRnLabelyl.Text = Rn.ToString

            If alfab > db / 2 Then
                Rn = Math.Round(0.8 * tbw ^ 2 * (1 + 3 * (Val(L_Alabel.Text) - 1) / db * (tbw / tbf) ^ 1.5) * Math.Sqrt(29000 * Fyb * tbf / tbw), 2)
            Else
                If (Val(L_Blabel.Text) - 1) / db > 0.2 Then
                    Rn = Math.Round(0.4 * tbw ^ 2 * (1 + 3 * (Val(L_Alabel.Text) - 1) / db * (tbw / tbf) ^ 1.5) * Math.Sqrt(29000 * Fyb * tbf / tbw), 2)
                Else
                    Rn = Math.Round(0.4 * tbw ^ 2 * (1 + (4 * (Val(L_Alabel.Text) - 1) / db - 0.2) * (tbw / tbf) ^ 1.5) * Math.Sqrt(29000 * Fyb * tbf / tbw), 2)
                End If
            End If

            phiRn = Math.Round(0.75 * Rn, 2)
            phiRnlabelCr.Text = phiRn.ToString

        ElseIf Member = "Column" Then

            If Cnx = "BC" And ((Tipo <> 10 And Tipo <> 11) Or ((Tipo = 10 Or Tipo = 11) And db / 2 > dc)) Then
                phiRn = Math.Round(1 * Fyc * tcw * (5 * kcdes + Tb), 2)
            ElseIf Cnx = "BC" Then
                phiRn = Math.Round(1 * Fyc * tcw * (2.5 * kcdes + Tb), 2)
            End If

            If Cnx = "GC" And ((Tipo <> 10 And Tipo <> 11) Or ((Tipo = 10 Or Tipo = 11) And Val(L_Blabel.Text) / 2 > dc)) Then
                phiRn = Math.Round(1 * Fyc * tcw * (5 * kcdes + (Val(L_Blabel.Text) - 1)), 2)
            ElseIf Cnx = "GC" Then
                phiRn = Math.Round(1 * Fyc * tcw * (2.5 * kcdes + (Val(L_Blabel.Text) - 1)), 2)
            End If

            phiRnLabelyl.Text = phiRn.ToString

            If Cnx = "BC" And ((Tipo <> 10 And Tipo <> 11) Or ((Tipo = 10 Or Tipo = 11) And db / 2 > dc)) Then
                Rn = Math.Round(0.8 * tcw ^ 2 * (1 + 3 * Tb / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
            ElseIf Cnx = "BC" Then
                If (db - 2 * kbdes) / dc > 0.2 Then
                    Rn = Math.Round(1 * 0.4 * tcw ^ 2 * (1 + 3 * Tb / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                Else
                    Rn = Math.Round(1 * 0.4 * tcw ^ 2 * (1 + (4 * Tb / dc - 0.2) * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                End If
            End If

            If Cnx = "GC" And ((Tipo <> 10 And Tipo <> 11) Or ((Tipo = 10 Or Tipo = 11) And Val(L_Blabel.Text) / 2 > dc)) Then
                Rn = Math.Round(0.8 * tcw ^ 2 * (1 + 3 * (Val(L_Blabel.Text) - 1) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
            ElseIf Cnx = "GC" Then
                If (Val(L_Alabel.Text) - 1) / dc > 0.2 Then
                    Rn = Math.Round(1 * 0.4 * tcw ^ 2 * (1 + 3 * (Val(L_Blabel.Text) - 1) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                Else
                    Rn = Math.Round(1 * 0.4 * tcw ^ 2 * (1 + (4 * (Val(L_Blabel.Text) - 1) / dc - 0.2) * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                End If
            End If

            phiRn = Math.Round(0.75 * Rn, 2)

            phiRnlabelCr.Text = phiRn.ToString

        End If

        If Cnx = "GB" Then
            phiRn = Math.Round(1 * 0.6 * Fyp * (Val(L_Alabel.Text) - 1) * Val(tgusset.Text), 2)
            phiRnGSh.Text = phiRn.ToString
            phiRn = Math.Round(0.9 * Fyp * (Val(L_Alabel.Text) - 1) * Val(tgusset.Text), 2)
            PhiRnGT.Text = phiRn.ToString
            LwLA = (Val(L_Alabel.Text)) - 1
            Lweld.Text = LwLA.ToString + " in"
        ElseIf Cnx = "GC" Then
            phiRn = Math.Round(1 * 0.6 * Fyp * (Val(L_Blabel.Text) - 1) * Val(tgusset.Text), 2)
            phiRnGSh.Text = phiRn.ToString
            phiRn = Math.Round(0.9 * Fyp * (Val(L_Blabel.Text) - 1) * Val(tgusset.Text), 2)
            PhiRnGT.Text = phiRn.ToString
            LwLB = Val(L_Blabel.Text) - 1
            Lweld.Text = LwLB.ToString + " in"
        ElseIf Cnx = "BC" Then
            LwBW = Tb
            Lweld.Text = LwBW.ToString + " in"
        End If

    End Sub

    Private Sub Comparación(PhiRnYlabel As Label, PhiRnCrlabel As Label, RuShGusset As Label, RuTGusset As Label, PhiRnShGusset As Label, PhiRnTGusset As Label, MuGusset As Label, RuGusset As Label)

        Dim PhiRnyl, PhiRncr, PhiRnGSh, PhiRnGT As Double
        PhiRnyl = Val(PhiRnYlabel.Text)
        PhiRncr = Val(PhiRnCrlabel.Text)
        PhiRnGSh = Val(PhiRnShGusset.Text)
        PhiRnGT = Val(PhiRnTGusset.Text)

        If N > PhiRnyl Then
            PhiRnYlabel.ForeColor = Color.Red
        Else
            PhiRnYlabel.ForeColor = Color.White
        End If

        If N > PhiRncr Then
            PhiRnCrlabel.ForeColor = Color.Red
        Else
            PhiRnCrlabel.ForeColor = Color.White
        End If

        PhiRnYlabel.Text = PhiRnyl.ToString + " kips"
        PhiRnCrlabel.Text = PhiRncr.ToString + " kips"

        If Sh > PhiRnGSh Then
            PhiRnShGusset.ForeColor = Color.Red
        Else
            PhiRnShGusset.ForeColor = Color.White
        End If

        If N > PhiRnGT Then
            PhiRnTGusset.ForeColor = Color.Red
        Else
            PhiRnTGusset.ForeColor = Color.White
        End If

        Dim RuShG, RuTG, MuG, RuG As Double
        RuShG = Val(RuShGusset.Text)
        RuTG = Val(RuTGusset.Text)
        MuG = Val(MuGusset.Text)
        RuG = Val(RuGusset.Text)

        PhiRnShGusset.Text = PhiRnGSh.ToString + " kips"
        PhiRnTGusset.Text = PhiRnGT.ToString + " kips"
        RuShGusset.Text = RuShG.ToString + " kips"
        RuTGusset.Text = RuTG.ToString + " kips"
        MuGusset.Text = MuG.ToString + " kips-in"
        RuGusset.Text = RuG.ToString + " kips"

    End Sub
    Private Sub CompD(Dtext As TextBox, Dlabel As Label, Dmín As Double, Dnext As TextBox)
        If Dtext.Text <> "" Then
            If Val(Dtext.Text) * 16 < Dmín Then
                Dlabel.ForeColor = Color.Red
                Dlabel.Text = "in < " + Dmín.ToString + "/16 in"
                Dtext.BackColor = Color.Red
            Else
                Dlabel.ForeColor = Color.White
                Dlabel.Text = "in >= " + Dmín.ToString + "/16 in"
                Dtext.BackColor = Color.White
                Dnext.Focus()
            End If
        End If
    End Sub
    Private Sub TextBox221_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox221.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox221.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox221.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox221.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox221.Text = Frac2Num(TextBox221.Text)
            End If
Line0:
            If TextBox216N.Text = "" Or TextBox215N.Text = "" Or TextBox204.Text = "" Or TextBox205.Text = "" Or TextBox219.Text = "" Or TextBox221.Text = "" Then
            Else
                CompD(TextBox221, Label394, DreqBC, TextBox222)
            End If
        End If
    End Sub
    Private Sub TextBox222_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox222.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox222.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox222.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer

        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox222.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox222.Text = Frac2Num(TextBox222.Text)
            End If
Line0:
            If TextBox216N.Text = "" Or TextBox215N.Text = "" Or TextBox204.Text = "" Or TextBox205.Text = "" Or TextBox219.Text = "" Or TextBox222.Text = "" Then
            Else

                If Tipo = 10 Or Tipo = 11 Or Tipo = 16 Then
                    CompD(TextBox222, Label409, DreqGB2, TextBox223)
                Else
                    CompD(TextBox222, Label409, DreqGB, TextBox223)
                End If

            End If
        End If
    End Sub
    Private Sub TextBox223_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox223.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If

        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox223.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox223.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox223.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox223.Text = Frac2Num(TextBox223.Text)
            End If
Line0:
            If TextBox216N.Text = "" Or TextBox215N.Text = "" Or TextBox204.Text = "" Or TextBox205.Text = "" Or TextBox219.Text = "" Or TextBox223.Text = "" Then
            Else
                If Tipo = 10 Or Tipo = 11 Or Tipo = 16 Then
                    CompD(TextBox223, Label427, DreqGC2, TextBox223)
                Else
                    CompD(TextBox223, Label427, DreqGC, TextBox223)
                End If
            End If
        End If
    End Sub

    Private Sub PhiRnStub(Shear As Label, Compression As Label, LA As TextBox)

        Shear.Text = VnBM.ToString + " kips"

        If VnBM < V Then
            Shear.ForeColor = Color.Red
        Else
            Shear.ForeColor = Color.White
        End If

        Dim LAg, L, Pn, Fcr, Fe As Double
        LAg = Val(LA.Text)
        L = Math.Round(LAg + 2)
        If 1 * L / rb < 25 Then
            Pn = Fyb * Ab
        Else

            Fe = Math.PI ^ 2 * 29000 / (1 * L / rb) ^ 2

            If L / rb <= 4.71 * Math.Sqrt(29000 / Fyb) Then
                Fcr = 0.877 * Fe
            Else
                Fcr = (0.658 ^ (Fyb / Fe)) * Fyb
            End If

            Pn = Fcr * Ab
        End If

        Dim PhiPn As Double

        PhiPn = 0.9 * Pn

        Compression.Text = PhiPn.ToString + " kips"

        If PhiPn < N Then
            Compression.ForeColor = Color.Red
        Else
            Compression.ForeColor = Color.White
        End If

    End Sub

    Private Sub textbox348_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox348.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox348.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox348.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox348.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox348.Text = Frac2Num(TextBox348.Text)
            End If
Line0:
            If TextBox348.Text = "" Then
            Else

                SoldaduraArriostre(TextBox348, Label558, TextBox347, Label554, Label483, Tu, Label460, Label562, False)
                TextBox347.Focus()

            End If
        End If
    End Sub

    Private Sub textbox347_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox347.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox347.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox347.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox347.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox347.Text = Frac2Num(TextBox347.Text)
            End If
Line0:
            If TextBox348.Text = "" Or TextBox347.Text = "" Then
            Else

                SoldaduraArriostre(TextBox348, Label558, TextBox347, Label554, Label483, Tu, Label460, Label562, False)
                TextBox361.Text = ""
                TextBox360.Text = ""
                TextBox350.Text = ""
                GeometríaGusset4()

                TextBox346.Focus()

            End If
        End If
    End Sub

    Private Sub textbox346_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox346.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox346.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox346.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox346.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox346.Text = Frac2Num(TextBox346.Text)
            End If
            If TextBox348.Text = "" Or TextBox347.Text = "" Or TextBox346.Text = "" Then
Line0:
            Else
                TextBox361.Text = ""
                TextBox360.Text = ""
                TextBox350.Text = ""
                GeometríaGusset4()

                TextBox345.Focus()

            End If
        End If
    End Sub

    Private Sub textbox345_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox345.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox345.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox345.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox345.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox345.Text = Frac2Num(TextBox345.Text)
            End If

Line0:

            If TextBox348.Text = "" Or TextBox347.Text = "" Or TextBox346.Text = "" Or TextBox345.Text = "" Then

            Else
                TextBox361.Text = ""
                TextBox360.Text = ""
                TextBox350.Text = ""
                GeometríaGusset4()
                TextBox362.Focus()

            End If
        End If
    End Sub

    Private Sub textbox362_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox362.KeyPress
        If OpenMode = True Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not textbox362.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not textbox362.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox362.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox362.Text = Frac2Num(textbox362.Text)
            End If
line0:
            If TextBox348.Text = "" Or TextBox347.Text = "" Then
            Else
                Piv = 1
                TextBox361.Text = ""
                TextBox360.Text = ""
                TextBox350.Text = ""
                GeometríaGusset4()
                TextBox359.Focus()
            End If
        End If
    End Sub

    Private Sub textbox359_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox359.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not textbox359.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not textbox359.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox359.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox359.Text = Frac2Num(textbox359.Text)
            End If
Line0:
            If TextBox348.Text = "" Or TextBox347.Text = "" Then
            Else
                Piv2 = 1
                TextBox361.Text = ""
                TextBox360.Text = ""
                TextBox350.Text = ""
                GeometríaGusset4()
                TextBox354.Focus()

            End If
        End If
    End Sub

    Private Sub textbox354_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox354.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not textbox354.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not textbox354.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox354.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox354.Text = Frac2Num(textbox354.Text)
            End If
Line0:
            If textbox348.Text = "" Or textbox347.Text = "" Or textbox346.Text = "" Or textbox345.Text = "" Or textbox362.Text = "" Or textbox359.Text = "" Or textbox354.Text = "" Then
            Else
                TextBox361.Text = ""
                TextBox360.Text = ""
                TextBox350.Text = ""
                GeometríaGusset4()
                textbox361.Focus()
            End If
        End If
    End Sub

    Private Sub textbox361_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox361.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not textbox361.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not textbox361.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox361.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox361.Text = Frac2Num(textbox361.Text)
            End If
Line0:
            If TextBox348.Text = "" Or TextBox347.Text = "" Or TextBox346.Text = "" Or TextBox345.Text = "" Or TextBox362.Text = "" Or TextBox359.Text = "" Or TextBox354.Text = "" Then
            Else
                GeometríaGusset4()
                TextBox360.Focus()
            End If
        End If
    End Sub

    Private Sub textbox360_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox360.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not textbox360.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not textbox360.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox360.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox360.Text = Frac2Num(textbox360.Text)
            End If
Line0:
            If TextBox348.Text = "" Or TextBox347.Text = "" Or TextBox346.Text = "" Or TextBox345.Text = "" Or TextBox362.Text = "" Or TextBox359.Text = "" Or TextBox354.Text = "" Or TextBox361.Text = "" Then
            Else
                GeometríaGusset4()
                TextBox350.Focus()
            End If
        End If
    End Sub

    Private Sub textbox380_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox380.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox380.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox380.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox380.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox380.Text = Frac2Num(TextBox380.Text)
            End If
Line0:
            If TextBox380.Text = "" Then
            Else

                SoldaduraArriostre(TextBox380, Label1152, TextBox379, Label1150, Label1148, Tu2, Label1139, Label1154, True)
                TextBox379.Focus()

            End If
        End If
    End Sub


    Private Sub textbox379_KeyPress(sender As Object, e As KeyPressEventArgs) Handles textbox379.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not textbox379.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not textbox379.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox379.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox360.Text = Frac2Num(textbox379.Text)
            End If
Line0:
            If textbox380.Text = "" Or textbox379.Text = "" Then
            Else
                TextBox375.Text = ""
                TextBox374.Text = ""
                TextBox364.Text = ""
                Inferior = True
                GeometríaGusset4()
                TextBox378.Focus()
            End If
        End If

    End Sub

    Private Sub textbox378_KeyPress(sender As Object, e As KeyPressEventArgs) Handles textbox378.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not textbox378.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not textbox378.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox378.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox378.Text = Frac2Num(textbox378.Text)
            End If

Line0:
            If TextBox380.Text = "" Or TextBox379.Text = "" Or TextBox378.Text = "" Then
                TextBox375.Text = ""
                TextBox374.Text = ""
                TextBox364.Text = ""
                Inferior = True
                GeometríaGusset4()
                TextBox377.Focus()
            End If
        End If
    End Sub

    Private Sub textbox377_KeyPress(sender As Object, e As KeyPressEventArgs) Handles textbox377.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not textbox377.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not textbox377.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox377.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox377.Text = Frac2Num(textbox377.Text)
            End If
Line0:
            If textbox380.Text = "" Or textbox379.Text = "" Or textbox378.Text = "" Or textbox377.Text = "" Then
            Else
                TextBox375.Text = ""
                TextBox374.Text = ""
                TextBox364.Text = ""
                Inferior = True
                GeometríaGusset4()
                TextBox376.Focus()
            End If
        End If
    End Sub

    Private Sub textbox376_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox376.KeyPress
        If OpenMode = True Or RevMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not textbox376.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not textbox376.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox376.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox376.Text = Frac2Num(textbox376.Text)
            End If
Line0:
            If TextBox380.Text <> "" Or TextBox379.Text <> "" Then
                TextBox375.Text = ""
                TextBox374.Text = ""
                TextBox364.Text = ""
                Piv = 1
                Inferior = True
                GeometríaGusset4()
                TextBox373.Focus()
            End If
        End If
    End Sub

    Private Sub textbox373_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox373.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not textbox373.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not textbox373.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox373.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox373.Text = Frac2Num(textbox373.Text)
            End If

Line0:
            If TextBox380.Text <> "" Or TextBox379.Text <> "" Then
                TextBox375.Text = ""
                TextBox374.Text = ""
                TextBox364.Text = ""
                Piv2 = 1
                Inferior = True
                GeometríaGusset4()
                TextBox368.Focus()
            End If
        End If
    End Sub

    Private Sub textbox368_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox368.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If

        SoloNumFrac(textbox368, e)

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox368.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox368.Text = Frac2Num(textbox368.Text)
            End If
Line0:
            If textbox373.Text = "" Or textbox376.Text = "" Or textbox368.Text = "" Or textbox375.Text = "" Or textbox374.Text = "" Then
            Else
                TextBox375.Text = ""
                TextBox374.Text = ""
                TextBox364.Text = ""
                Inferior = True
                GeometríaGusset4()
                TextBox375.Focus()
            End If
        End If
    End Sub

    Private Sub textbox375_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox375.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not textbox375.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not textbox375.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox375.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox375.Text = Frac2Num(textbox375.Text)
            End If

Line0:
            If TextBox373.Text = "" Or TextBox376.Text = "" Or TextBox368.Text = "" Or TextBox374.Text = "" Then
            Else
                Inferior = True
                GeometríaGusset4()
                TextBox374.Focus()
            End If
        End If
    End Sub

    Private Sub textbox374_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox374.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not textbox374.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not textbox374.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(textbox374.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox374.Text = Frac2Num(textbox374.Text)
            End If
Line0:
            If TextBox373.Text = "" Or TextBox376.Text = "" Or TextBox368.Text = "" Or TextBox375.Text = "" Then
            Else
                Inferior = True
                GeometríaGusset4()
                TextBox364.Focus()
            End If
        End If
    End Sub

    Private Sub TextBox240_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox240.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox240.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox240.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox240.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox240.Text = Frac2Num(TextBox240.Text)
            End If
Line0:
            If TextBox240.Text = "" Then
            Else
                CompD(TextBox240, Label537, DreqBC, TextBox239)
            End If
        End If
    End Sub

    Private Sub TextBox239_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox239.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox239.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox239.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox239.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox239.Text = Frac2Num(TextBox239.Text)
            End If
Line0:
            If TextBox239.Text = "" Then
            Else
                CompD(TextBox239, Label522, DreqGB, TextBox238)
            End If
        End If
    End Sub

    Private Sub TextBox256_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox256.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox256.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox256.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox256.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox256.Text = Frac2Num(TextBox256.Text)
            End If
Line0:
            If TextBox256.Text = "" Then
            Else
                CompD(TextBox256, Label624, DreqGC2, TextBox256)
            End If
        End If
    End Sub

    Private Sub TextBox238_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox238.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox238.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox238.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox238.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox238.Text = Frac2Num(TextBox238.Text)
            End If
Line0:
            If TextBox238.Text = "" Then
            Else
                CompD(TextBox238, Label501, DreqGB2, TextBox255)
            End If
        End If
    End Sub

    Private Sub TextBox255_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox255.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox255.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox255.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If

        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox255.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox255.Text = Frac2Num(TextBox255.Text)
            End If
Line0:
            If TextBox255.Text = "" Then
            Else
                CompD(TextBox255, Label603, DreqGC, TextBox256)
            End If
        End If
    End Sub

    Private Sub TextBox220_TextChanged(sender As Object, e As EventArgs) Handles TextBox220.TextChanged
        'If Sistema = "SCBF" Then
        '    If Tipo = 10 Or Tipo = 11 Then
        '        PandeoGusset(TextBox220, rbr2, egW, TextBox218N, Label381, Pu2, Label383, TextBox219)
        '    Else
        '        PandeoGusset(TextBox220, rbr, egW, TextBox218N, Label381, Pu, Label383, TextBox219)
        '    End If
        'Else
        '    PandeoGusset(TextBox220, rbr, egW, TextBox218N, Label381, Pu, Label383, TextBox219)
        'End If

    End Sub


    Private Sub TextBox260_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox260.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox260.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox260.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox260.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox260.Text = Frac2Num(TextBox260.Text)
            End If
Line0:
            If TextBox260.Text = "" Then
            Else
                SoldaduraArriostre(TextBox260, Label699, TextBox259, Label697, Label695, Tu, Label685, Label701, False)
                TextBox259.Focus()
            End If
        End If
    End Sub

    Private Sub TextBox259_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox259.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox259.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox259.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox259.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox259.Text = Frac2Num(TextBox259.Text)
            End If
Line0:
            If TextBox259.Text = "" Or TextBox260.Text = "" Then
            Else

                SoldaduraArriostre(TextBox260, Label699, TextBox259, Label697, Label695, Tu, Label685, Label701, False)

                GeometríaGusset4()

                TextBox258.Focus()

            End If

        End If
    End Sub

    Private Sub TextBox258_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox258.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox258.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox258.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer

        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox258.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox258.Text = Frac2Num(TextBox258.Text)
            End If
Line0:
            If TextBox259.Text = "" Or TextBox260.Text = "" Then
            Else

                GeometríaGusset4()

                TextBox257.Focus()

            End If

        End If
    End Sub
    'Conexión tipo = 9 textbox para t
    Private Sub TextBox257_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox257.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox257.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox257.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox257.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox257.Text = Frac2Num(TextBox257.Text)
            End If
Line0:
            If TextBox257.Text = "" Or TextBox258.Text = "" Or TextBox259.Text = "" Or TextBox260.Text = "" Then
            Else

                GeometríaGusset4()

                TextBox267.Focus()

            End If
        End If
    End Sub

    Private Sub TextBox274_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox274.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox274.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox274.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox274.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox274.Text = Frac2Num(TextBox274.Text)
            End If
Line0:
            If TextBox274.Text = "" Then
            Else
                SoldaduraArriostre(TextBox274, Label739, TextBox273, Label737, Label735, Tu2, Label725, Label741, True)
                TextBox273.Focus()
            End If
        End If
    End Sub

    Private Sub TextBox273_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox273.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox273.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox273.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox273.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox273.Text = Frac2Num(TextBox273.Text)
            End If
Line0:
            If TextBox273.Text = "" Or TextBox274.Text = "" Then
            Else

                SoldaduraArriostre(TextBox274, Label739, TextBox273, Label737, Label735, Tu2, Label725, Label741, True)

                Inferior = True
                GeometríaGusset4()

                TextBox272.Focus()

            End If
        End If
    End Sub

    Private Sub TextBox272_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox272.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox272.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox272.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox272.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox272.Text = Frac2Num(TextBox272.Text)
            End If
Line0:
            If TextBox274.Text = "" Or TextBox273.Text = "" Then
            Else

                Inferior = True
                GeometríaGusset4()

                TextBox271.Focus()

            End If
        End If
    End Sub

    Private Sub TextBox271_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox271.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox271.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox271.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox271.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox271.Text = Frac2Num(TextBox271.Text)
            End If
Line0:
            If TextBox274.Text = "" Or TextBox273.Text = "" Or TextBox272.Text = "" Or TextBox271.Text = "" Then

            Else

                Inferior = True
                GeometríaGusset4()

                TextBox281.Focus()

            End If
        End If
    End Sub
    'Phi tipo = 9 
    Private Sub TextBox270_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox270.KeyPress

        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox270.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox270.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox270.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox270.Text = Frac2Num(TextBox270.Text)
            End If
Line0:
            If TextBox260.Text = "" Or TextBox259.Text = "" Then
            Else

                Piv = 1
                GeometríaGusset4()

                TextBox267.Focus()

            End If
        End If
    End Sub

    Private Sub TextBox284_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox284.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox284.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox284.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox284.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox284.Text = Frac2Num(TextBox284.Text)
            End If
Line0:
            If TextBox274.Text = "" Or TextBox273.Text = "" Then
            Else

                Piv = 1
                Inferior = True
                GeometríaGusset4()

                TextBox281.Focus()

            End If
        End If
    End Sub
    '2t tipo = 9
    Private Sub TextBox267_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox267.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox267.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox267.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox267.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox267.Text = Frac2Num(TextBox267.Text)
            End If
Line0:

            GeometríaGusset4()
            TextBox263.Focus()

        End If
    End Sub
    '2t inferior tipo = 9
    Private Sub TextBox281_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox281.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox281.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox281.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox281.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox281.Text = Frac2Num(TextBox281.Text)
            End If

Line0:
            Inferior = True
            GeometríaGusset4()

            TextBox277.Focus()

        End If
    End Sub
    'a tipo = 9
    Private Sub TextBox263_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox263.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox263.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox263.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox263.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox263.Text = Frac2Num(TextBox263.Text)
            End If

Line0:

            GeometríaGusset4()

            TextBox268.Focus()

        End If
    End Sub
    'Lpatín tipo = 9
    Private Sub TextBox268_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox268.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox268.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox268.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox268.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox268.Text = Frac2Num(TextBox268.Text)
            End If

Line0:

            GeometríaGusset4()

            TextBox261.Focus()

        End If
    End Sub
    Private Sub GeometriaGusset3(tgusset As TextBox, gphi As TextBox, dostegsst As TextBox, Lgusset As TextBox, LAgusset As TextBox, LBgusset As TextBox, lpandeogusset As TextBox, dgusset As TextBox, ebgusset As TextBox, ecgusset As TextBox, agusset As TextBox, Lweldbox As TextBox, inferior As Boolean)

        If tgusset.Text = "" Then
        Else
            Dim a, eb, ec, d, doste, phi, phia, Lwbra, ángulo, L, L_A, L_B, lb, Lweld As Double

            phi = Math.Round(Val(gphi.Text) * Math.PI / 180, 4)

            eb = db / 2
            ec = dc / 2

            If inferior = True Then
                d = Math.Round(2 + Darr2, 2)
                ángulo = theta2
            Else
                d = Math.Round(2 + Darr, 2)
                ángulo = theta
            End If

            If inferior = False Then
                phia = gsphi
                Lwbra = Lwbr
            Else
                phia = giphi
                Lwbra = Lwbr2
            End If

            doste = Val(tgusset.Text) * 2

            Lweld = Val(Lweldbox.Text)

            If inferior = False And ((dostegsst.Text = "" And Lgusset.Text = "" And LAgusset.Text = "" And LBgusset.Text = "") Or (Val(dostegsst.Text) <> gdoste) Or (Math.Round(phi, 2) <> Math.Round(phia, 2)) Or Lwbra <> Val(Lweldbox.Text)) Then

                If dostegsst.Text = "" Then
                    dostegsst.Text = doste.ToString
                    gdoste = doste
                Else
                    gdoste = Val(dostegsst.Text)
                End If

                If gdoste < doste Then
                    dostegsst.BackColor = Color.Red
                Else
                    dostegsst.BackColor = Color.White
                End If

                a = Math.Round(d / 2 + (Lweld + gdoste) * Math.Tan(phi), 2)
                L = Math.Round(Math.Sqrt((eb * Math.Tan(ángulo) + a * Math.Sin(ángulo) * Math.Tan(ángulo)) ^ 2 + (eb + a * Math.Sin(ángulo)) ^ 2), 2)
                lb = Math.Round(a * Math.Tan(ángulo) + gdoste, 2)
                L_A = Math.Round(a / Math.Cos(ángulo) + eb * Math.Tan(ángulo) - ec, 2)
                L_B = Math.Round((L + Lweld + gdoste) * Math.Cos(ángulo) + d / 2 * Math.Sin(ángulo) - eb - ((L + Lweld + gdoste) * Math.Sin(ángulo) - d / 2 * Math.Cos(ángulo) - ec) * Math.Tan(Math.PI / 2 - ángulo - phi), 2)

                ga = a
                gLgusset = L
                gLAgusset = L_A
                gLBgusset = L_B

                agusset.Text = ga.ToString
                Lgusset.Text = gLgusset.ToString
                LAgusset.Text = gLAgusset.ToString
                LBgusset.Text = gLBgusset.ToString
                dgusset.Text = d.ToString
                lpandeogusset.Text = lb.ToString
                ebgusset.Text = eb.ToString
                ecgusset.Text = ec.ToString

            ElseIf Val(dostegsst.Text) = gdoste And inferior = False Then

                If Val(agusset.Text) <> ga Then

                    ga = Val(agusset.Text)

                    gLgusset = Math.Round(Math.Sqrt((eb * Math.Tan(ángulo) + ga * Math.Sin(ángulo) * Math.Tan(ángulo)) ^ 2 + (eb + ga * Math.Sin(ángulo)) ^ 2), 2)
                    lb = Math.Round(ga * Math.Tan(ángulo) + gdoste, 2)
                    gLAgusset = Math.Round(ga / Math.Cos(ángulo) + eb * Math.Tan(ángulo) - ec, 2)

                    Lgusset.Text = gLgusset.ToString
                    LAgusset.Text = gLAgusset.ToString
                    lpandeogusset.Text = lb.ToString

                ElseIf gLgusset <> Val(Lgusset.Text) Then

                    gLgusset = Val(Lgusset.Text)

                    L_B = Math.Round((gLgusset + Lweld + gdoste) * Math.Cos(ángulo) + d / 2 * Math.Sin(ángulo) - eb - ((gLgusset + Lweld + gdoste) * Math.Sin(ángulo) - d / 2 * Math.Cos(ángulo) - ec) * Math.Tan(Math.PI / 2 - ángulo - phi), 2)

                    LBgusset.Text = L_B

                ElseIf gLAgusset <> Val(LAgusset.Text) Then

                    gLAgusset = Val(LAgusset.Text)

                ElseIf gLBgusset <> Val(LBgusset.Text) Then

                    gLBgusset = Val(LBgusset.Text)

                End If

            End If

            If inferior And ((dostegsst.Text = "" And Lgusset.Text = "" And LAgusset.Text = "" And LBgusset.Text = "") Or (Val(dostegsst.Text) <> gidoste) Or (Math.Round(phi, 2) <> Math.Round(phia, 2)) Or Lwbra <> Val(Lweldbox.Text)) Then

                If dostegsst.Text = "" Then
                    dostegsst.Text = doste.ToString
                    gidoste = doste
                Else
                    gidoste = Val(dostegsst.Text)
                End If

                If gidoste < doste Then
                    dostegsst.BackColor = Color.Red
                Else
                    dostegsst.BackColor = Color.White
                End If

                a = Math.Round(d / 2 + (Lweld + gidoste) * Math.Tan(phi), 2)
                L = Math.Round(Math.Sqrt((eb * Math.Tan(ángulo) + a * Math.Sin(ángulo) * Math.Tan(ángulo)) ^ 2 + (eb + a * Math.Sin(ángulo)) ^ 2), 2)
                lb = Math.Round(a * Math.Tan(ángulo) + gidoste, 2)
                L_A = Math.Round(a / Math.Cos(ángulo) + eb * Math.Tan(ángulo) - ec, 2)
                L_B = Math.Round((L + Lweld + gidoste) * Math.Cos(ángulo) + d / 2 * Math.Sin(ángulo) - eb - ((L + Lweld + gidoste) * Math.Sin(ángulo) - d / 2 * Math.Cos(ángulo) - ec) * Math.Tan(Math.PI / 2 - ángulo - phi), 2)

                gia = a
                giLgusset = L
                giLAgusset = L_A
                giLBgusset = L_B

                agusset.Text = gia.ToString
                Lgusset.Text = giLgusset.ToString
                LAgusset.Text = giLAgusset.ToString
                LBgusset.Text = giLBgusset.ToString
                dgusset.Text = d.ToString
                lpandeogusset.Text = lb.ToString
                ebgusset.Text = eb.ToString
                ecgusset.Text = ec.ToString

            ElseIf Val(dostegsst.Text) = gidoste Then

                If Val(agusset.Text) <> gia Then

                    gia = Val(agusset.Text)

                    giLgusset = Math.Round(Math.Sqrt((eb * Math.Tan(ángulo) + gia * Math.Sin(ángulo) * Math.Tan(ángulo)) ^ 2 + (eb + gia * Math.Sin(ángulo)) ^ 2), 2)
                    lb = Math.Round(gia * Math.Tan(ángulo) + gdoste, 2)
                    giLAgusset = Math.Round(gia / Math.Cos(ángulo) + eb * Math.Tan(ángulo) - ec, 2)

                    Lgusset.Text = giLgusset.ToString
                    LAgusset.Text = giLAgusset.ToString
                    lpandeogusset.Text = lb.ToString

                ElseIf giLgusset <> Val(Lgusset.Text) Then

                    giLgusset = Val(Lgusset.Text)

                    L_B = Math.Round((giLgusset + Lweld + gdoste) * Math.Cos(ángulo) + d / 2 * Math.Sin(ángulo) - eb - ((giLgusset + Lweld + gidoste) * Math.Sin(ángulo) - d / 2 * Math.Cos(ángulo) - ec) * Math.Tan(Math.PI / 2 - ángulo - phi), 2)

                    LBgusset.Text = L_B

                ElseIf giLAgusset <> Val(LAgusset.Text) Then

                    giLAgusset = Val(LAgusset.Text)

                ElseIf giLBgusset <> Val(LBgusset.Text) Then

                    giLBgusset = Val(LBgusset.Text)

                End If

            End If

            If Sistema = "SCBF" Then
                If Tipo <> 8 And Tipo <> 9 And Tipo <> 6 And Tipo <> 10 Then
                    CargasResistencias()
                ElseIf Tipo = 8 And textbox359.Text <> "" And textbox373.Text <> "" Then
                    CargasResistencias()
                End If
            Else
                If Tipo = 13 Or Tipo = 16 Then
                    CargasResistencias()
                End If
            End If

            If ComboBox19.SelectedIndex <> 0 Then
                Dim index As Integer
                index = ComboBox19.SelectedIndex
                ComboBox19.SelectedIndex = 0
                ComboBox19.SelectedIndex = index
            End If

        End If

    End Sub

    Private Sub GeometriaGusset2(tgusset As TextBox, gphi As TextBox, dostegsst As TextBox, LGusset As TextBox, LAGusset As TextBox, Lpatín As TextBox, lpandeogusset As TextBox, dgusset As TextBox, agusset As TextBox, Inferior As Boolean)

        If tgusset.Text = "" Then
        Else

            Dim a, eb, d, doste, phi, phia, ángulo, L, L_A, lb, Lweld, Lflange As Double

            'cálculo del phi

            phi = Math.Round(Val(gphi.Text) * Math.PI / 180, 4)

            'almacenamiento del phi

            If Inferior = False Then
                phia = gsphi
            Else
                phia = giphi
            End If

            eb = db / 2

            'cálculo del d

            If Inferior = True Then
                d = Math.Round(2 + Darr2, 2)
                ángulo = theta2
            Else
                d = Math.Round(2 + Darr, 2)
                ángulo = theta
            End If

            'cálculo de 2 * t

            doste = Val(tgusset.Text) * 2

            'selección de la longitud de soldadura

            If Inferior = False Then
                Lweld = Val(TextBox259.Text)
            Else
                Lweld = Val(TextBox273.Text)
            End If

            'Para el caso en que dostegsst y los demás estén vacíos

            If Inferior = False And ((dostegsst.Text = "" And agusset.Text = "" And Lpatín.Text = "" And LAGusset.Text = "") Or (Val(dostegsst.Text) <> 0 And Val(dostegsst.Text) <> gdoste) Or (phi <> phia) Or (RevMode = True)) Then

                If dostegsst.Text = "" Then
                    dostegsst.Text = doste.ToString
                    gdoste = doste
                Else
                    gdoste = Val(dostegsst.Text)
                End If

                If gdoste < doste Then
                    dostegsst.BackColor = Color.Red
                Else
                    dostegsst.BackColor = Color.White
                End If

                a = Math.Round(d / 2 + (Lweld + gdoste) * Math.Tan(phi), 2)
                L = Math.Round(Math.Sqrt((eb * Math.Tan(ángulo) + a * Math.Sin(ángulo) * Math.Tan(ángulo)) ^ 2 + (eb + a * Math.Sin(ángulo)) ^ 2), 2)
                lb = Math.Round(a * Math.Tan(ángulo) + gdoste, 2)
                Lflange = Math.Round(2 * a * Math.Cos(phi) / Math.Sin(Math.PI / 2 - ángulo - phi), 2)
                L_A = Math.Round(a / Math.Cos(ángulo) + eb * Math.Tan(ángulo), 2)

                ga = a
                gLgusset = L
                gLpatín = Lflange
                gLAgusset = L_A

                agusset.Text = a.ToString
                Lpatín.Text = Lflange.ToString
                LGusset.Text = L.ToString
                LAGusset.Text = L_A.ToString
                dgusset.Text = d.ToString
                lpandeogusset.Text = lb.ToString

            ElseIf Inferior = False And Val(dostegsst.Text) = gdoste Then

                If Val(agusset.Text) <> ga Then

                    ga = Val(agusset.Text)
                    Lflange = Math.Round(2 * ga * Math.Cos(phi) / Math.Sin(Math.PI / 2 - ángulo - phi), 2)
                    L = Math.Round(Math.Sqrt((eb * Math.Tan(ángulo) + ga * Math.Sin(ángulo) * Math.Tan(ángulo)) ^ 2 + (eb + ga * Math.Sin(ángulo)) ^ 2), 2)
                    Lflange = Math.Round(2 * ga * Math.Cos(phi) / Math.Sin(Math.PI / 2 - ángulo - phi), 2)
                    L_A = Math.Round(ga / Math.Cos(ángulo) + eb * Math.Tan(ángulo), 2)
                    lb = ga * Math.Tan(ángulo) + gdoste

                    agusset.Text = ga.ToString
                    Lpatín.Text = Lflange.ToString
                    LGusset.Text = L.ToString
                    LAGusset.Text = L_A.ToString
                    dgusset.Text = d.ToString
                    lpandeogusset.Text = lb.ToString

                    gLpatín = Lflange
                    gLAgusset = L_A
                    gLgusset = L

                ElseIf Val(agusset.Text) = ga Then

                    If Val(Lpatín.Text) <> gLpatín Then
                        gLpatín = Val(Lpatín.Text)
                    End If

                    If Val(LGusset.Text) <> gLgusset Then
                        gLgusset = Val(LGusset.Text)
                    End If

                    If Val(LAGusset.Text) <> gLAgusset Then
                        gLAgusset = Val(LAGusset.Text)
                    End If

                End If

            End If

            If Inferior And ((dostegsst.Text = "" And agusset.Text = "" And Lpatín.Text = "" And LAGusset.Text = "") Or (Val(dostegsst.Text) <> 0 And Val(dostegsst.Text) <> gidoste) Or (phi <> phia) Or (RevMode = True)) Then

                If dostegsst.Text = "" Then
                    dostegsst.Text = doste.ToString
                    gidoste = doste
                Else
                    gidoste = Val(dostegsst.Text)
                End If

                If gidoste < doste Then
                    dostegsst.BackColor = Color.Red
                Else
                    dostegsst.BackColor = Color.White
                End If

                a = Math.Round(d / 2 + (Lweld + gidoste) * Math.Tan(phi), 2)
                L = Math.Round(Math.Sqrt((eb * Math.Tan(ángulo) + a * Math.Sin(ángulo) * Math.Tan(ángulo)) ^ 2 + (eb + a * Math.Sin(ángulo)) ^ 2), 2)
                lb = Math.Round(a * Math.Tan(ángulo) + gidoste, 2)
                Lflange = Math.Round(2 * a * Math.Cos(phi) / Math.Sin(Math.PI / 2 - ángulo - phi), 2)
                L_A = Math.Round(a / Math.Cos(ángulo) + eb * Math.Tan(ángulo), 2)

                gia = a
                giLgusset = L
                giLpatín = Lflange
                giLAgusset = L_A

                agusset.Text = a.ToString
                Lpatín.Text = Lflange.ToString
                LGusset.Text = L.ToString
                LAGusset.Text = L_A.ToString
                dgusset.Text = d.ToString
                lpandeogusset.Text = lb.ToString

            ElseIf Inferior And Val(dostegsst.Text) = gidoste Then

                If Val(agusset.Text) <> gia Then

                    gia = Val(agusset.Text)
                    Lflange = Math.Round(2 * gia * Math.Cos(phi) / Math.Sin(Math.PI / 2 - ángulo - phi), 2)
                    L = Math.Round(Math.Sqrt((eb * Math.Tan(ángulo) + gia * Math.Sin(ángulo) * Math.Tan(ángulo)) ^ 2 + (eb + gia * Math.Sin(ángulo)) ^ 2), 2)
                    Lflange = Math.Round(2 * gia * Math.Cos(phi) / Math.Sin(Math.PI / 2 - ángulo - phi), 2)
                    L_A = Math.Round(gia / Math.Cos(ángulo) + eb * Math.Tan(ángulo), 2)
                    lb = gia * Math.Tan(ángulo) + gdoste

                    agusset.Text = gia.ToString
                    Lpatín.Text = Lflange.ToString
                    LGusset.Text = L.ToString
                    LAGusset.Text = L_A.ToString
                    dgusset.Text = d.ToString
                    lpandeogusset.Text = lb.ToString

                    gLpatín = Lflange
                    gLAgusset = L_A
                    gLgusset = L

                ElseIf Val(agusset.Text) = gia Then

                    If Val(Lpatín.Text) <> giLpatín Then
                        giLpatín = Val(Lpatín.Text)
                    End If

                    If Val(LGusset.Text) <> giLgusset Then
                        giLgusset = Val(LGusset.Text)
                    End If

                    If Val(LAGusset.Text) <> giLAgusset Then
                        giLAgusset = Val(LAGusset.Text)
                    End If

                End If

            End If

        End If

        If Inferior = False Then
            CargasGussetX(TextBox269, TextBox270, TextBox267, TextBox259, TextBox266, Label793, Label774, Label792, Label757, Label761, Label835, Label756, Label754, Label716, Label775, Label764, Label767, Label832, Label785, False)
            ResistenciasX(Label770, Label772, TextBox268, Label780, Label778, False)
            ComparaciónX2(Label835, Label832, Label767, Label764, Label775, Label754, Label716, Label772, Label770, Label780, Label778)
            If TextBox280.Text <> "" Then
                CargasGussetX(TextBox283, TextBox284, TextBox281, TextBox273, TextBox280, Label823, Label822, Label804, Label831, Label829, Label841, Label830, Label827, Label825, Label805, Label794, Label797, Label838, Label815, True)
                ResistenciasX(Label800, Label802, TextBox264, Label810, Label808, True)
                ComparaciónX2(Label841, Label838, Label797, Label794, Label805, Label827, Label825, Label802, Label800, Label810, Label808)
            End If
        Else
            CargasGussetX(TextBox283, TextBox284, TextBox281, TextBox273, TextBox280, Label823, Label822, Label804, Label831, Label829, Label841, Label830, Label827, Label825, Label805, Label794, Label797, Label838, Label815, True)
            ResistenciasX(Label800, Label802, TextBox264, Label810, Label808, True)
            ComparaciónX2(Label841, Label838, Label797, Label794, Label805, Label827, Label825, Label802, Label800, Label810, Label808)
            If TextBox266.Text <> "" Then
                CargasGussetX(TextBox269, TextBox270, TextBox267, TextBox259, TextBox266, Label793, Label774, Label792, Label757, Label761, Label835, Label756, Label754, Label716, Label775, Label764, Label767, Label832, Label785, False)
                ResistenciasX(Label770, Label772, TextBox268, Label780, Label778, False)
                ComparaciónX2(Label835, Label832, Label767, Label764, Label775, Label754, Label716, Label772, Label770, Label780, Label778)
            End If
        End If
        
        'If Inferior = False And (CheckBox1.Checked Or (Val(LAGusset.Text) <= Val(Lpatín.Text))) Then
        '    CheckBox1.CheckState = CheckState.Checked
        '    If (Val(LAGusset.Text) <= Val(Lpatín.Text)) Then
        '        CheckBox1.Enabled = False
        '        CheckBox2.Enabled = False
        '    Else
        '        CheckBox1.Enabled = True
        '        CheckBox2.Enabled = True
        '    End If
        '    CargasGussetX(TextBox269, TextBox270, TextBox267, TextBox259, TextBox266, Label793, Label774, Label792, Label757, Label761, Label835, Label756, Label754, Label716, Label775, Label764, Label767, Label832, Label785, False)
        '    ResistenciasX(Label770, Label772, TextBox268, Label780, Label778, False)
        '    ComparaciónX2(Label835, Label832, Label767, Label764, Label775, Label754, Label716, Label772, Label770, Label780, Label778)
        '    If TextBox280.Text <> "" Then
        '        CargasGussetX(TextBox283, TextBox284, TextBox281, TextBox273, TextBox280, Label823, Label822, Label804, Label831, Label829, Label841, Label830, Label827, Label825, Label805, Label794, Label797, Label838, Label815, True)
        '        ResistenciasX(Label800, Label802, TextBox264, Label810, Label808, True)
        '        ComparaciónX2(Label841, Label838, Label797, Label794, Label805, Label827, Label825, Label802, Label800, Label810, Label808)
        '    End If
        'ElseIf Inferior And ((CheckBox2.Checked) Or (Val(LAGusset.Text) <= Val(Lpatín.Text))) Then
        '    CheckBox1.CheckState = CheckState.Checked
        '    If (Val(LAGusset.Text) <= Val(Lpatín.Text)) Then
        '        CheckBox2.Enabled = False
        '        CheckBox1.Enabled = False
        '    Else
        '        CheckBox2.Enabled = True
        '        CheckBox1.Enabled = True
        '    End If
        '    CargasGussetX(TextBox283, TextBox284, TextBox281, TextBox273, TextBox280, Label823, Label822, Label804, Label831, Label829, Label841, Label830, Label827, Label825, Label805, Label794, Label797, Label838, Label815, True)
        '    ResistenciasX(Label800, Label802, TextBox264, Label810, Label808, True)
        '    ComparaciónX2(Label841, Label838, Label797, Label794, Label805, Label827, Label825, Label802, Label800, Label810, Label808)
        '    If TextBox266.Text <> "" Then
        '        CargasGussetX(TextBox269, TextBox270, TextBox267, TextBox259, TextBox266, Label793, Label774, Label792, Label757, Label761, Label835, Label756, Label754, Label716, Label775, Label764, Label767, Label832, Label785, False)
        '        ResistenciasX(Label770, Label772, TextBox268, Label780, Label778, False)
        '        ComparaciónX2(Label835, Label832, Label767, Label764, Label775, Label754, Label716, Label772, Label770, Label780, Label778)
        '    End If
        'Else

        'CheckBox1.Enabled = True
        'CheckBox2.Enabled = True
        'CheckBox1.CheckState = CheckState.Unchecked
        'CheckBox2.CheckState = CheckState.Unchecked

        If TextBox280.Text <> "" Then
            CargasResistenciasX()
        End If

        'End If

    End Sub

    Private Sub TextBox261_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox261.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox261.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox261.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox261.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox261.Text = Frac2Num(TextBox261.Text)
            End If

Line0:

            GeometríaGusset4()

            TextBox269.Focus()

        End If
    End Sub

    Private Sub TextBox269_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox269.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox269.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox269.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox269.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox269.Text = Frac2Num(TextBox269.Text)
            End If

Line0:

            GeometríaGusset4()

        End If
    End Sub

    Private Sub TextBox277_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox277.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox277.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox277.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox277.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox277.Text = Frac2Num(TextBox277.Text)
            End If

Line0:
            Inferior = True
            GeometríaGusset4()

            TextBox264.Focus()

        End If
    End Sub

    Private Sub TextBox264_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox264.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox264.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox264.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox264.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox264.Text = Frac2Num(TextBox264.Text)
            End If

Line0:
            Inferior = True
            GeometríaGusset4()

            TextBox275.Focus()

        End If
    End Sub

    Private Sub TextBox275_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox275.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox275.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox275.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox275.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox275.Text = Frac2Num(TextBox275.Text)
            End If

Line0:

            Inferior = True
            GeometríaGusset4()

            TextBox283.Focus()

        End If
    End Sub

    Private Sub TextBox283_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox283.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox283.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox283.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox283.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox283.Text = Frac2Num(TextBox283.Text)
            End If

Line0:
            Inferior = True
            GeometríaGusset4()

        End If
    End Sub

    Private Sub TextBox262_TextChanged(sender As Object, e As EventArgs) Handles TextBox262.TextChanged
        'PandeoGusset(TextBox262, rbr, egW, TextBox257, Label705, Pu, Label703, TextBox261)
    End Sub

    Private Sub TextBox276_TextChanged(sender As Object, e As EventArgs) Handles TextBox276.TextChanged
        'PandeoGusset(TextBox276, rbr2, egW, TextBox271, Label745, Pu2, Label743, TextBox275)
    End Sub

    Private Sub DistribCargasX(LAgusset As TextBox, dostegusset As TextBox, Lpatín As TextBox, agusset As TextBox, lbgusset As TextBox, ShGusset As Label, NGusset As Label, Mgusset As Label, Shulabel As Label, Nulabel As Label, Rulabel As Label, DminLabel As Label, LwldLabel As Label, RuLfl As Label, Inferior As Boolean)

        Dim Cortante, Normal, Momento, a, lb, exc, doste, Nueq, lfl, fua, fuv, gtp As Double
        If Sistema = "SCBF" Then
            doste = Val(dostegusset.Text)
            a = Val(agusset.Text)
            lb = Val(lbgusset.Text)
            lfl = Val(Lpatín.Text)
            exc = Math.Round(Math.Abs(Math.Sqrt(a ^ 2 + (lb - doste) ^ 2) - lfl / 2), 2)
        End If
        

        If Inferior = False Then
            Cortante = Math.Round(Math.Max(Tu, Pu) * Math.Cos(theta), 2)
            Normal = Math.Round(Math.Max(Tu, Pu) * Math.Sin(theta), 2)
            gtp = t
        Else
            Cortante = Math.Round(Math.Max(Tu2, Pu2) * Math.Cos(theta2), 2)
            Normal = Math.Round(Math.Max(Tu2, Pu2) * Math.Sin(theta2), 2)
            gtp = tinf
        End If

        Momento = Math.Round(Normal * exc, 2)

        Nueq = Math.Round(Normal + 4 * Momento / lfl, 2)

        fua = Math.Round(Nueq / gtp / lfl, 2)

        fuv = Math.Round(Cortante / gtp / lfl, 2)

        'ángulo de carga

        Dim ángulo As Double

        ángulo = Math.Atan(Nueq / Cortante)

        'Tamaño mínimo de soldadura

        Dim Ru, Dmin As Double

        Ru = Math.Round(Math.Sqrt(Nueq ^ 2 + Cortante ^ 2), 2)

        Dmin = Math.Round(1.25 * Ru / (2 * 1.392 * (1 + 0.5 * Math.Sin(ángulo) ^ 1.5) * lfl), 2)

        If Inferior = True Then
            DreqGB2 = Dmin
        Else
            DreqGB = Dmin
        End If

        LwldLabel.Text = Lpatín.Text + " in"
        Rulabel.Text = Ru.ToString
        DminLabel.Text = "in >= " + Dmin.ToString + "/16 in"
        ShGusset.Text = Cortante.ToString + " kips"
        NGusset.Text = Normal.ToString + " kips"
        Mgusset.Text = Momento.ToString + " kips-in"
        Shulabel.Text = fuv.ToString
        Nulabel.Text = fua.ToString
        RuLfl.Text = Nueq.ToString

    End Sub

    Private Sub ResistenciasX(PhiRnYl As Label, PhiRnSh As Label, Lpatín As TextBox, PhiRnLWY As Label, PhiRnLWCr As Label, Inferior As Boolean)

        Dim PhiRn, Lfl As Double

        If Sistema = "SCBF" Then
            If Inferior = False Then
                Lfl = Val(TextBox268.Text)
            Else
                Lfl = Val(TextBox264.Text)
            End If
        Else
            If Tipo = 19 Then
                Lfl = Val(TextBox232.Text)
                t = Val(TextBox244.Text)
            ElseIf Tipo = 20 And Inferior = False Then
                Lfl = Val(TextBox385.Text)
                t = Val(TextBox340.Text)
            ElseIf Tipo = 20 And Inferior Then
                Lfl = Val(TextBox397.Text)
                t = Val(TextBox389.Text)
            End If
        End If
        

        'placa gusset

        'resistencia a la fluencia por tensión

        PhiRn = Math.Round(0.9 * Fyp * Lfl * t, 2)

        PhiRnYl.Text = PhiRn.ToString

        'resistencia a la fluencia por cortante
        
        PhiRn = Math.Round(1 * 0.6 * Fyp * Lfl * t, 2)

        PhiRnSh.Text = PhiRn.ToString

        'viga

        'resistencia  a la fluencia local del alma

        PhiRn = Math.Round(1 * Fyb * tbw * (5 * kbdes + Lfl), 2)

        PhiRnLWY.Text = PhiRn.ToString

        'resistencia al aplastamiento local del alma

        PhiRn = Math.Round(0.75 * 0.8 * tbw ^ 2 * (1 + 3 * (Lfl / db) * (tbw / tbf) ^ 1.5) * Math.Sqrt(29000 * Fyb * tbf / tbw), 2)

        PhiRnLWCr.Text = PhiRn.ToString

    End Sub

    Private Sub ComparaciónX(NueqLabel As Label, NueqLabel2 As Label, ShuLabel As Label, RuLabel As Label, PhiRnYlgsst As Label, PhiRnShgsst As Label, PhiRnYlb As Label, PhiRnCrb As Label)

        If Val(NueqLabel.Text) > Val(PhiRnYlgsst.Text) Then
            PhiRnYlgsst.ForeColor = Color.Red
        Else
            PhiRnYlgsst.ForeColor = Color.White
        End If

        If Val(ShuLabel.Text) > Val(PhiRnShgsst.Text) Then
            PhiRnShgsst.ForeColor = Color.Red
        Else
            PhiRnShgsst.ForeColor = Color.White
        End If

        If Val(NueqLabel2.Text) > Val(PhiRnYlb.Text) Then
            PhiRnYlb.ForeColor = Color.Red
        Else
            PhiRnYlb.ForeColor = Color.White
        End If

        If Val(NueqLabel2.Text) > Val(PhiRnCrb.Text) Then
            PhiRnCrb.ForeColor = Color.Red
        Else
            PhiRnCrb.ForeColor = Color.White
        End If

        NueqLabel.Text = NueqLabel.Text + " kips"
        ShuLabel.Text = ShuLabel.Text + " ksi"
        PhiRnYlgsst.Text = PhiRnYlgsst.Text + " ksi"
        PhiRnShgsst.Text = PhiRnShgsst.Text + " ksi"

        NueqLabel2.Text = NueqLabel2.Text + " kips"
        PhiRnYlb.Text = PhiRnYlb.Text + " kips"
        PhiRnCrb.Text = PhiRnCrb.Text + " kips"

        RuLabel.Text = RuLabel.Text + " kips"

    End Sub

    Private Sub CargasResistenciasX()

        DistribCargasX(TextBox269, TextBox267, TextBox268, TextBox263, TextBox262, Label774, Label793, Label792, Label767, Label764, Label785, Label788, Label782, Label775, False)
        ResistenciasX(Label770, Label772, TextBox268, Label780, Label778, False)
        ComparaciónX(Label764, Label775, Label767, Label785, Label770, Label772, Label780, Label778)

        DistribCargasX(TextBox283, TextBox281, TextBox264, TextBox277, TextBox276, Label822, Label823, Label804, Label797, Label794, Label805, Label818, Label812, Label815, True)
        ResistenciasX(Label800, Label802, TextBox264, Label810, Label808, True)
        ComparaciónX(Label794, Label805, Label802, Label815, Label800, Label802, Label810, Label808)

    End Sub

    Private Sub TextBox285_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox285.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox285.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox285.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox285.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox285.Text = Frac2Num(TextBox285.Text)
            End If

Line0:
            If TextBox285.Text = "" Then
            Else

                CompD(TextBox285, Label788, DreqGB, TextBox286)

            End If

        End If
    End Sub

    Private Sub TextBox286_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox286.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox286.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox286.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox286.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox286.Text = Frac2Num(TextBox286.Text)
            End If
Line0:
            If TextBox286.Text = "" Then
            Else

                CompD(TextBox286, Label818, DreqGB2, TextBox286)

            End If

        End If
    End Sub

    Private Sub CargasGussetX(L_A As TextBox, phi As TextBox, dostegsst As TextBox, Lweld As TextBox, dgusset As TextBox, NormalLabel As Label, CortanteLabel As Label, MomentoLabel As Label, NormalpLabel As Label, CortantepLabel As Label, CortantepLabel2 As Label, MomentopLabel As Label, PhiRnSh As Label, PhiRnT As Label, NueqLabel As Label, Nueq2Label As Label, ShuLabel As Label, NueqpLabel As Label, RuLabel As Label, inferior As Boolean)

        Dim AxialT, AxialC, ángulo As Double
        Dim P1, H1, V1, P2, H2, V2 As Double
        Dim M1, M2, M1p, M2p As Double
        Dim Cortante, Normal, Momento, Cortantep, Normalp, Momentop As Double
        Dim e, h, L, ánguloPhi, Lwldbr, doste, d As Double

        e = db / 2
        If Sistema = "BRBF" Then
            L = 2 * Val(L_A.Text)
        ElseIf Tipo = 9 And inferior = False Then
            L = Val(TextBox268.Text)
        ElseIf Tipo = 9 And inferior Then
            L = Val(TextBox264.Text)
        End If

        If Sistema = "SCBF" Then
            ánguloPhi = Val(phi.Text) * Math.PI / 180
            Lwldbr = Val(Lweld.Text)
            doste = Val(dostegsst.Text)
        End If
        
        d = Val(dgusset.Text)

        If inferior = True Then
            AxialT = Tu2
            AxialC = Pu2
            ángulo = theta2
        Else
            AxialT = Tu
            AxialC = Pu
            ángulo = theta
        End If

        If Sistema = "SCBF" Then
            If inferior = False Then
                h = Val(TextBox269.Text)
            Else
                h = Val(TextBox283.Text)
            End If
            t = Val(TextBox257.Text)
            tinf = Val(TextBox271.Text)
        Else
            If Tipo = 19 Then
                h = Val(TextBox241.Text)
                tinf = Val(TextBox244.Text)
            ElseIf Tipo = 20 And inferior = False Then
                h = Val(TextBox341.Text)
                t = Val(TextBox340.Text)
            ElseIf Tipo = 20 And inferior Then
                h = Val(TextBox390.Text)
                tinf = Val(TextBox389.Text)
            End If
        End If


        'Se considera un movimiento de izquierda a derecha

        P1 = -AxialC
        H1 = Math.Round(P1 * Math.Sin(ángulo), 2)
        V1 = Math.Round(P1 * Math.Cos(ángulo), 2)
        P2 = AxialT
        H2 = Math.Round(P2 * Math.Sin(ángulo), 2)
        V2 = Math.Round(P2 * Math.Cos(ángulo), 2)

        M1 = H1 * e
        M2 = H2 * e
        M1p = 1 / 8 * L * V1 - 1 / 4 * h * H1 - 1 / 2 * M1
        M2p = 1 / 8 * L * V2 - 1 / 4 * h * H2 - 1 / 2 * M2

        'Cargas en el área de contacto con el patín

        Normal = Math.Round(V1 + V2, 2)
        Cortante = Math.Round(H1 - H2, 2)
        Momento = Math.Round(M1 - M2, 2)

        'Cargas en la sección transversal vertical de la placa

        Normalp = Math.Round(1 / 2 * (H1 + H2), 2)
        Cortantep = Math.Round(1 / 2 * (V1 - V2) - 2 / L * (Momento), 2)
        Momentop = Math.Round(M1p + M2p, 2)

        'Almacenamiento de las cargas en labels

        NormalLabel.Text = Normal.ToString + " kips"
        CortanteLabel.Text = Cortante.ToString + " kips"
        MomentoLabel.Text = Momento.ToString + " kips-in"
        ShuLabel.Text = Math.Abs(Cortante).ToString
        NormalpLabel.Text = Normalp.ToString + " kips"
        CortantepLabel.Text = Cortantep.ToString + " kips"
        MomentopLabel.Text = Momentop.ToString + " kips-in"

        'Carga requerida a cortante:

        Dim Nueq, Nueqp, RuGusset As Double

        Nueq = Math.Round(Math.Abs(Normal) + Math.Abs(4 * Momento / L), 2)
        Nueqp = Math.Round(Math.Abs(Normalp) + Math.Abs(4 * Momentop / h), 2)

        NueqLabel.Text = Math.Abs(Nueq).ToString
        Nueq2Label.Text = Math.Abs(Nueq).ToString
        NueqpLabel.Text = Nueqp.ToString
        CortantepLabel2.Text = Math.Abs(Cortantep).ToString

        RuGusset = Math.Round(Math.Sqrt(Nueq ^ 2 + Cortante ^ 2), 2)

        Dim thetaLoad As Double

        thetaLoad = Math.Round(Math.Atan(Nueq / Cortante), 2)

        RuLabel.Text = RuGusset.ToString + " kips"

        If Sistema = "SCBF" Then
            If inferior = False Then
                MinWeldSize(t, tbf)
                DreqGB = Math.Max(Math.Round(1.25 * RuGusset / (2 * 1.392 * (1 + 0.5 * Math.Sin(thetaLoad) ^ 2) * L), 2), Dmínreq)
                Label788.Text = "in >=" + DreqGB.ToString + "/16 in"
                Label782.Text = L.ToString + " in"
            Else
                MinWeldSize(tinf, tbf)
                DreqGB2 = Math.Max(Math.Round(1.25 * RuGusset / (2 * 1.392 * (1 + 0.5 * Math.Sin(thetaLoad) ^ 2) * L), 2), Dmínreq)
                Label818.Text = "in >=" + DreqGB2.ToString + "/16 in"
                Label812.Text = L.ToString + " in"
            End If
        Else
            If inferior = False Or Tipo = 19 Then
                If Tipo = 19 Then
                    MinWeldSize(tinf, tbf)
                    DreqGB2 = Math.Max(Math.Round(1.25 * RuGusset / (2 * 1.392 * (1 + 0.5 * Math.Sin(thetaLoad) ^ 2) * L), 2), Dmínreq)
                    Label1466.Text = "in >=" + DreqGB2.ToString + "/16 in"
                    Label1460.Text = L.ToString + " in"
                Else
                    MinWeldSize(t, tbf)
                    DreqGB = Math.Max(Math.Round(1.25 * RuGusset / (2 * 1.392 * (1 + 0.5 * Math.Sin(thetaLoad) ^ 2) * L), 2), Dmínreq)
                    Label1466.Text = "in >=" + DreqGB.ToString + "/16 in"
                    Label1460.Text = L.ToString + " in"
                End If
            Else
                MinWeldSize(tinf, tbf)
                DreqGB2 = Math.Max(Math.Round(1.25 * RuGusset / (2 * 1.392 * (1 + 0.5 * Math.Sin(thetaLoad) ^ 2) * L), 2), Dmínreq)
                Label1507.Text = "in >=" + DreqGB2.ToString + "/16 in"
                Label1501.Text = L.ToString + " in"
            End If
        End If

        'Resistencias disponibles de la placa gusset

        Dim PhiRn As Double

        If inferior = False Then
            PhiRn = 1 * 0.6 * Fyp * t * h
        Else
            PhiRn = 1 * 0.6 * Fyp * tinf * h
        End If

        PhiRnSh.Text = PhiRn.ToString

        If inferior = False Then
            PhiRn = 0.9 * Fyp * t * h
        Else
            PhiRn = 0.9 * Fyp * tinf * h
        End If

        PhiRnT.Text = PhiRn.ToString

    End Sub

    'Private Sub CheckBox1_CheckStateChanged(sender As Object, e As EventArgs) Handles CheckBox1.CheckStateChanged

    '    If CheckBox1.CheckState = CheckState.Checked Then

    '        CheckBox2.CheckState = CheckState.Checked

    '        GroupBox156.Visible = True
    '        PictureBox308.Visible = True
    '        Label756.Visible = True
    '        Label757.Visible = True
    '        Label761.Visible = True

    '        GroupBox157.Visible = True
    '        PictureBox309.Visible = True
    '        Label829.Visible = True
    '        Label830.Visible = True
    '        Label831.Visible = True

    '        'GroupBox145.Size = New System.Drawing.Size(750, 575)
    '        'GroupBox138.Size = New System.Drawing.Size(750, 575)

    '        If TextBox280.Text <> "" And TextBox266.Text <> "" Then
    '            CargasGussetX(TextBox269, TextBox270, TextBox267, TextBox259, TextBox266, Label793, Label774, Label792, Label757, Label761, Label835, Label756, Label754, Label716, Label775, Label764, Label767, Label832, Label785, False)
    '            ResistenciasX(Label770, Label772, TextBox268, Label780, Label778, False)
    '            ComparaciónX2(Label835, Label832, Label767, Label764, Label775, Label754, Label716, Label772, Label770, Label780, Label778)
    '            CargasGussetX(TextBox283, TextBox284, TextBox281, TextBox273, TextBox280, Label823, Label822, Label804, Label831, Label829, Label841, Label830, Label827, Label825, Label805, Label794, Label797, Label838, Label815, True)
    '            ResistenciasX(Label800, Label802, TextBox264, Label810, Label808, True)
    '            ComparaciónX2(Label841, Label838, Label797, Label794, Label805, Label827, Label825, Label802, Label800, Label810, Label808)
    '        End If

    '    Else

    '        CheckBox2.CheckState = CheckState.Unchecked

    '        GroupBox156.Visible = False
    '        PictureBox308.Visible = False
    '        Label756.Visible = False
    '        Label757.Visible = False
    '        Label761.Visible = False

    '        GroupBox157.Visible = False
    '        PictureBox309.Visible = False
    '        Label829.Visible = False
    '        Label830.Visible = False
    '        Label831.Visible = False

    '        'GroupBox145.Size = New System.Drawing.Size(750, 425)
    '        'GroupBox138.Size = New System.Drawing.Size(750, 575)

    '        If TextBox280.Text <> "" And TextBox266.Text <> "" Then
    '            CargasResistenciasX()
    '        End If
    '    End If

    'End Sub

    Private Sub ComparaciónX2(ShTrGusset As Label, TtrGusset As Label, ShGusset As Label, Tgusset As Label, Ngusset As Label, PhiRnShTrGsst As Label, PhiRnTtrgsst As Label, PhiRnShGsst As Label, PhiRnTGsst As Label, PhiRnWLyl As Label, PhiRnWLcr As Label)

        If Val(ShTrGusset.Text) < Val(PhiRnShTrGsst.Text) Then
            PhiRnShTrGsst.ForeColor = Color.White
        Else
            PhiRnShTrGsst.ForeColor = Color.Red
        End If

        If Val(TtrGusset.Text) < Val(PhiRnTtrgsst.Text) Then
            PhiRnTtrgsst.ForeColor = Color.White
        Else
            PhiRnTtrgsst.ForeColor = Color.Red
        End If

        If Val(ShGusset.Text) < Val(PhiRnShGsst.Text) Then
            PhiRnShGsst.ForeColor = Color.White
        Else
            PhiRnShGsst.ForeColor = Color.Red
        End If

        If Val(Tgusset.Text) < Val(PhiRnTGsst.Text) Then
            PhiRnTGsst.ForeColor = Color.White
        Else
            PhiRnTGsst.ForeColor = Color.Red
        End If

        If Val(Ngusset.Text) < Val(PhiRnWLyl.Text) Then
            PhiRnWLyl.ForeColor = Color.White
        Else
            PhiRnWLyl.ForeColor = Color.Red
        End If

        If Val(Ngusset.Text) < Val(PhiRnWLcr.Text) Then
            PhiRnWLcr.ForeColor = Color.White
        Else
            PhiRnWLcr.ForeColor = Color.Red
        End If

        ShTrGusset.Text = ShTrGusset.Text + " kips"
        TtrGusset.Text = TtrGusset.Text + " kips"
        ShGusset.Text = ShGusset.Text + " kips"
        Tgusset.Text = Tgusset.Text + " kips"
        Ngusset.Text = Ngusset.Text + " kips"
        PhiRnShTrGsst.Text = PhiRnShTrGsst.Text + " kips"
        PhiRnTtrgsst.Text = PhiRnTtrgsst.Text + " kips"
        PhiRnShGsst.Text = PhiRnShGsst.Text + " kips"
        PhiRnTGsst.Text = PhiRnTGsst.Text + " kips"
        PhiRnWLyl.Text = PhiRnWLyl.Text + " kips"
        PhiRnWLcr.Text = PhiRnWLcr.Text + " kips"

    End Sub

    Private Sub MiembroDúctilBr()

        Dim b As Double

        If Tipo = 11 Or Tipo = 10 Then
            If TextBox209.Text.Contains(".") Or TextBox209.Text.Contains("Pipe") Then
                If Darr2 / tbrdes2 < 0.038 * 29000 / Fybr2 Then
                    HDBR2 = True
                Else
                    HDBR2 = False
                End If
            Else

                b = Darr2 - 2 * tbrnom2

                If b / tbrdes2 < 0.55 * Math.Sqrt(29000 / Fybr2) Then
                    HDBR2 = True
                Else
                    HDBR2 = False
                End If

            End If

        Else

            If TextBox201N.Text.Contains(".") Or TextBox201N.Text.Contains("Pipe") Then
                If (Darr / tbrdes) < (0.038 * 29000 / Fybr) Then
                    HDBR = True
                Else
                    HDBR = False
                End If
            Else

                b = Darr - 2 * tbrnom

                If b / tbrdes < 0.55 * Math.Sqrt(29000 / Fybr) Then
                    HDBR = True
                Else
                    HDBR = False
                End If

            End If

            If TextBox202N.Text.Contains(".") Or TextBox202N.Text.Contains("Pipe") Then

                If (Darr2 / tbrdes2) < (0.038 * 29000 / Fybr2) Then
                    HDBR2 = True
                Else
                    HDBR2 = False
                End If

            Else

                b = Darr2 - 2 * tbrnom2

                If b / tbrdes2 < 0.55 * Math.Sqrt(29000 / Fybr2) Then
                    HDBR2 = True
                Else
                    HDBR2 = False
                End If

            End If

        End If

        '   Columna

        b = bcf / 2

        If b / tcf < 0.3 * Math.Sqrt(29000 / Fyc) Then
            HDCL = True
        Else
            HDCL = False
        End If

        'Revisión si la viga cumple el requerimiento de sección moderadamente dúctil

        b = bbf / 2

        If b / tbf < 0.38 * Math.Sqrt(29000 / Fyb) Then
            MDBM = True
        Else
            MDBM = False
        End If

    End Sub

    Private Sub DistribCargasPS(LAText As TextBox, LBText As TextBox, Cnx As String, Hlabel As Label, Vlabel As Label, Rulabel1 As Label, Rulabel2 As Label, Rulabel3 As Label)

        Dim BrTu, BrPu, BrAxial, ánguloBr, alfa, beta, r, Huc, Hub, Vuc, Vub, Muc, Mub, eb, ec, exc, factorincl, Muc1, Muc2, Mub1, Mub2, PhiRn, Lweld As Double

        eb = db / 2
        ec = dc / 2

        If Sistema = "SCBF" Then
            If Tipo = 6 Then
                ánguloBr = theta
                BrTu = Tu
                BrPu = Pu
            Else
                ánguloBr = theta2
                BrTu = Tu2
                BrPu = Pu2
            End If
        Else
            ánguloBr = theta
            BrTu = Tu
            BrPu = Pu

        End If


        bPS = Val(ListBox1.Text)
        exc = bPS / 4

        'Selección de alfa y beta

        alfab = (Val(LAText.Text) - bPS - 0.5) / 2 + bPS + 0.5
        betab = Val(LBText.Text) / 2

        Dim dif1, dif2, dif3 As Double
        dif1 = Math.Round(alfab - betab * Math.Tan(ánguloBr), 2)
        dif2 = Math.Round(eb * Math.Tan(ánguloBr) - ec, 2)
        dif3 = dif1 - dif2

        If OpcionesDiseño.MomInd = 0 Then

            beta = betab
            alfa = Math.Round(beta * Math.Tan(ánguloBr) + eb * Math.Tan(ánguloBr) - ec, 2)

            If alfa > alfab Then
                alfa = alfab
                beta = Math.Round((alfa - eb * Math.Tan(ánguloBr) + ec) / Math.Tan(ánguloBr), 2)
            End If

        Else

            Dim Kp, k, D As Double

            D = Math.Round((Math.Tan(ánguloBr)) ^ 2 + (alfab / betab) ^ 2, 2)
            Kp = Math.Round(alfab * (Math.Tan(ánguloBr) + alfab / betab), 2)
            k = Math.Round(eb * Math.Tan(ánguloBr) - ec, 2)

            alfa = Math.Round((Kp * Math.Tan(ánguloBr) + k * (alfab / betab) ^ 2) / D, 2)
            beta = Math.Round((Kp - k * Math.Tan(ánguloBr)) / D, 2)

        End If


        Dim Ht, Hc, Vt, Vc, Nt, Nc, Hexc, Hmmt, Rui_d, Rud_i As Double
        Dim Hgc, Vgc, Rgc, Hbc, Vbc, VPS, Rbc As Double
        Dim Hgc2, Vgc2, Rgc2, Hbc2, Vbc2, VPS2, Rbc2 As Double

        'Movimiento de izquierda a derecha

        'Distribución de las cargas

        r = Math.Round(Math.Sqrt((alfa + ec) ^ 2 + (beta + eb) ^ 2), 2)

        If Tipo = 6 Or Tipo = 12 Then
            BrAxial = BrTu
        Else
            BrAxial = BrPu
        End If

        Huc = Math.Round(ec / r * BrAxial, 2)
        Hub = Math.Round(alfa / r * BrAxial, 2)
        Vuc = Math.Round(beta / r * BrAxial, 2)
        Vub = Math.Round(eb / r * BrAxial, 2)
        Muc = Math.Round(Huc * Math.Abs(betab - beta), 2)
        Mub = Math.Round(Vub * Math.Abs(alfa - alfab), 2)

        If Tipo = 6 Or Tipo = 12 Then

            Huc = -Huc
            Vuc = -Vuc
            Hub = -Hub
            Vub = -Vub

            If betab > beta Then
                Muc = -Muc
            End If

            If alfab < alfa Then
                Mub = -Mub
            End If

        Else

            Huc = Huc
            Vuc = -Vuc
            Hub = Hub
            Vub = -Vub

            If betab > beta Then
                Muc = -Muc
            End If

            If alfab < alfa Then
                Mub = -Mub
            End If

        End If

        'Dirección de los momentos

        Muc1 = Muc
        Mub1 = Mub

        'Carga por Momento debido a la excentricidad de la placa simple

        Hexc = Math.Abs(Math.Round((Vuc + Vub + RuBM) * exc / (beta + (db - kbdes) / 2), 2))

        If Tipo = 10 Or Tipo = 15 Then
            Hexc = -Hexc
        End If

        'Carga por Momento de la conexión

        Hmmt = Math.Abs(Math.Round(Muc / ((Val(LAText.Text) - 2 * LePS) / 2), 2))

        'Huc y Vub se suman a las cargas requeridas de la conexión alma - placa simple

        If alfa > alfab Then
            VBM = Math.Max(Math.Abs(Vub / 2) + Math.Abs(Mub / (alfab - bPS - 0.5)), Math.Abs(Vub)) + RuBM
        Else
            VBM = Math.Max(Math.Abs(Vub / 2) - Math.Abs(Mub / (alfab - bPS - 0.5)), Math.Abs(Vub)) + RuBM
        End If

        If Cnx = "BPS" Then

            Ht = -Huc + Ast1a + Hexc

            'Cortante total en la viga (si hay momento)

            Vt = VBM

            Rui_d = Math.Round(Math.Sqrt(Ht ^ 2 + Vt ^ 2), 2)

        ElseIf Cnx = "GPS" Then

            Ht = Math.Max(Huc + -Hexc + Hmmt, Huc + -Hexc + -Hmmt) 'Aquí se consideran las dos direcciones en que puede sumarse la fuerza y toma el caso más crítico
            Vt = Vuc
            Rui_d = Math.Round(Math.Sqrt(Ht ^ 2 + Vt ^ 2), 2)

        ElseIf Cnx = "GB" Then

            Ht = Hub
            Vt = Vub
            Nt = Math.Abs(Math.Round(Math.Abs(Vub) + 4 * (Math.Abs(Mub) / (2 * (alfab - bPS - 0.5))), 2))
            Rui_d = Math.Round(Math.Sqrt(Nt ^ 2 + Vt ^ 2), 2)
            factorincl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Nt) / Math.Abs(Ht)))) ^ 1.5
            Lweld = Val(LAText.Text) - bPS - 0.5
            If Tipo = 6 Then
                MinWeldSize(t, tbf)
            Else
                MinWeldSize(tinf, tbf)
            End If
            DreqGB = Math.Max(Math.Round((1.25 * Rui_d / (2 * (1.392) * Lweld) * factorincl), 2), Dmínreq)

        ElseIf Cnx = "PSC" Then

            Hgc = Math.Max(Huc + -Hexc + Hmmt, Huc + -Hexc + -Hmmt)
            Vgc = VBM
            Rgc = Math.Round(Math.Sqrt(Hgc ^ 2 + Vgc ^ 2), 2)

            Hbc = -Huc + Ast1a + Hexc
            Vbc = Vub + RuBM
            Rbc = Math.Round(Math.Sqrt(Hbc ^ 2 + Vbc ^ 2), 2)

            VPS = Vub + Vuc + RuBM

            Rui_d = Math.Max(Rgc, Rbc)

        End If

        'Movimiento de derecha a izquierda

        If Tipo = 6 Or Tipo = 12 Then
            BrAxial = BrPu
        Else
            BrAxial = BrTu
        End If

        Huc = Math.Round(ec / r * BrAxial, 2)
        Hub = Math.Round(alfa / r * BrAxial, 2)
        Vuc = Math.Round(beta / r * BrAxial, 2)
        Vub = Math.Round(eb / r * BrAxial, 2)
        Muc = Math.Round(Huc * Math.Abs(betab - beta), 2)
        Mub = Math.Round(Vub * Math.Abs(alfa - alfab), 2)

        If Tipo = 6 Or Tipo = 12 Then

            If betab < beta Then
                Muc = -Muc
            End If

            If alfab < alfa Then
                Mub = -Mub
            End If

        Else

            Huc = -Huc
            Hub = -Hub
            Vuc = Vuc
            Vub = Vub

            If betab < beta Then
                Muc = -Muc
            End If

            If alfab > alfa Then
                Mub = -Mub
            End If

        End If

        Muc2 = Muc
        Mub2 = Mub

        'Carga por Momento debido a la excentricidad de la placa simple

        Hexc = Math.Abs(Math.Round((Vuc + Vub) * exc / ((Val(LAText.Text) + (db - kbdes)) / 2), 2))

        If Tipo = 10 Or Tipo = 15 Then
            Hexc = -Hexc
        End If

        'Carga por Momento de la conexión

        Hmmt = Math.Abs(Math.Round(Muc / ((Val(LAText.Text) - 2 * LePS) / 2), 2))

        'Huc y Vub se suman a las cargas requeridas de la conexión alma - placa simple

        If alfa > alfab Then
            VBM2 = -Math.Max(Math.Abs(Vub / 2) + Math.Abs(Mub / (alfab - bPS - 0.5)), Math.Abs(Vub)) + RuBM
        Else
            VBM2 = -Math.Max(Math.Abs(Vub / 2) - Math.Abs(Mub / (alfab - bPS - 0.5)), Math.Abs(Vub)) + RuBM
        End If

        If Cnx = "BPS" Then

            Hc = -Huc + Ast1b + -Hexc

            Vc = VBM2

            Rud_i = Math.Round(Math.Sqrt(Hc ^ 2 + Vc ^ 2), 2)

        ElseIf Cnx = "GPS" Then

            Hc = Math.Max(Huc + Hexc + Hmmt, Huc + Hexc + -Hmmt) 'Aquí se consideran las dos direcciones en que puede sumarse la fuerza y toma el caso más crítico
            Vc = Vuc
            Rud_i = Math.Round(Math.Sqrt(Hc ^ 2 + Vc ^ 2), 2)

        ElseIf Cnx = "GB" Then

            Hc = Hub
            Vc = Vub
            Nc = Math.Abs(Math.Round(Math.Abs(Vub) + 4 * (Math.Abs(Mub) / (2 * (alfab - bPS - 0.5))), 2))
            Rud_i = Math.Round(Math.Sqrt(Nc ^ 2 + Vc ^ 2), 2)
            Lweld = Val(LAText.Text) - bPS - 0.5
            factorincl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Nc) / Math.Abs(Hc)))) ^ 1.5
            If Tipo = 6 Then
                MinWeldSize(t, tbf)
            Else
                MinWeldSize(tinf, tbf)
            End If
            DreqGB = Math.Max(Math.Round((1.25 * Rud_i / (2 * (1.392) * Lweld * factorincl)), 2), Dmínreq)

        ElseIf Cnx = "PSC" Then

            Hgc2 = Math.Max(Huc + Hexc + Hmmt, Huc + Hexc + -Hmmt)
            Vgc2 = Vuc
            Rgc2 = Math.Round(Math.Sqrt(Hgc2 ^ 2 + Vgc2 ^ 2), 2)

            Hbc2 = -Huc + Ast1b + -Hexc
            Vbc2 = VBM2
            Rbc2 = Math.Round(Math.Sqrt(Hbc2 ^ 2 + Vbc2 ^ 2), 2)

            VPS2 = Vub + Vuc + RuBM

            Rud_i = Math.Max(Rgc2, Rbc2)

        End If

        If Rui_d > Rud_i Then

            If Cnx = "BPS" Then

                Hlabel.Text = Ht.ToString + " kips"
                Vlabel.Text = Vt.ToString + " kips"
                Rulabel1.Text = Rui_d.ToString + " kips"
                Rulabel2.Text = Math.Abs(Ht).ToString
                Rulabel3.Text = Math.Abs(Ht).ToString
                Label1094.Text = Math.Abs(Vt).ToString
                Label1092.Text = Rui_d.ToString
                Label878.Text = Math.Abs(Ht).ToString
                Label1097.Text = Math.Abs(Vt).ToString
                Label873.Text = Rui_d.ToString

                RuBPS = Rui_d

            ElseIf Cnx = "GPS" Then

                Hlabel.Text = Ht.ToString + " kips"
                Vlabel.Text = Vt.ToString + " kips"
                Rulabel1.Text = Rui_d.ToString + " kips"
                Rulabel2.Text = Math.Abs(Ht).ToString
                Rulabel3.Text = Math.Abs(Ht).ToString
                Label939.Text = Muc1.ToString + " kips-in"
                Label1031.Text = Math.Abs(Vt).ToString
                Label1081.Text = Rui_d.ToString
                Label869.Text = Math.Abs(Vt).ToString
                Label866.Text = Rui_d.ToString
                Label856.Text = Math.Abs(Ht).ToString

                RuGPS = Rui_d

            ElseIf Cnx = "GB" Then

                Hlabel.Text = Ht.ToString + " kips"
                Vlabel.Text = Vt.ToString + " kips"
                Rulabel1.Text = Rui_d.ToString + " kips"
                Rulabel2.Text = Math.Abs(Nt).ToString
                Rulabel3.Text = Math.Abs(Nt).ToString
                Label881.Text = Math.Abs(Ht).ToString
                Label941.Text = Mub1.ToString + " kips-in"

                factorincl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Nt) / Math.Abs(Ht)))) ^ 1.5
                Lweld = Val(LAText.Text) - bPS - 0.5
                If Tipo = 6 Then
                    MinWeldSize(t, tbf)
                Else
                    MinWeldSize(tinf, tbf)
                End If
                DreqGB = Math.Max(Math.Round((1.25 * Rui_d / (2 * (1.392) * Lweld * factorincl)), 2), Dmínreq)
                Label907.Text = "in >= " + DreqGB.ToString + "/16 in"
                Label902.Text = Lweld.ToString + " in"

            ElseIf Cnx = "PSC" Then

                If Rgc > Rbc Then

                    Hlabel.Text = Hgc.ToString
                    Vlabel.Text = Vgc.ToString
                    Rulabel1.Text = Rgc.ToString + " kips"
                    Rulabel3.Text = Math.Abs(Hgc).ToString

                    factorincl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Vgc / Hgc)))) ^ 1.5
                    Lweld = Val(LBText.Text)

                    If Tipo = 6 Then
                        MinWeldSize(tPS, tcf)
                    Else
                        MinWeldSize(tPS, tcf)
                    End If

                    DreqGC = Math.Max(Math.Round(1.25 * Rgc / (2 * (1.392) * Lweld * factorincl), 2), Dmínreq)

                    Label927.Text = "in >= " + DreqGC.ToString + "/16 in"
                    Lweld = Val(LBText.Text) + db - kbdes
                    Label922.Text = Lweld.ToString + " in"

                    If Tipo = 10 Or Tipo = 15 Then

                        If db + alfa > dc Then
                            PhiRn = Math.Round(1 * Fyc * tcw * (5 * kcdes + (Val(TextBox206.Text))), 2)
                        Else
                            PhiRn = Math.Round(1 * Fyc * tcw * (2.5 * kcdes + (Val(TextBox206.Text))), 2)
                        End If

                        Label920.Text = PhiRn.ToString

                        If (betab + db > dc / 2) Then
                            PhiRn = Math.Round(0.8 * tcw ^ 2 * (1 + 3 * (Val(TextBox206.Text)) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                        Else
                            If (Val(TextBox205.Text)) / dc > 0.2 Then
                                PhiRn = Math.Round(1 * 0.4 * tcw ^ 2 * (1 + 3 * (Val(TextBox206.Text)) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                            Else
                                PhiRn = Math.Round(1 * 0.4 * tcw ^ 2 * (1 + (4 * (Val(TextBox206.Text)) / dc - 0.2) * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                            End If
                        End If

                        Label918.Text = PhiRn.ToString

                    Else

                        'Resistencia del alma de la columna a la fluencia local

                        PhiRn = Math.Round(1 * Fyc * tcw * (5 * kbdes + (Val(TextBox205.Text))), 2)

                        Label920.Text = PhiRn.ToString

                        'Resistencia del alma de la columna al aplastamiento local

                        PhiRn = Math.Round(0.8 * tcw ^ 2 * (1 + 3 * (Val(TextBox206.Text)) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)

                        Label918.Text = PhiRn.ToString

                    End If

                Else

                    Hlabel.Text = Hbc.ToString
                    Vlabel.Text = Vbc.ToString
                    Rulabel1.Text = Rbc.ToString + " kips"
                    Rulabel3.Text = Math.Abs(Hbc).ToString

                    factorincl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Vbc / Hbc)))) ^ 1.5
                    Lweld = Tb
                    If Tipo = 6 Then
                        MinWeldSize(tPS, tcf)
                    Else
                        MinWeldSize(tPS, tcf)
                    End If

                    DreqGC = Math.Max(Math.Round((1.25 * Rbc / (2 * (1.392) * Lweld * factorincl)), 2), Dmínreq)

                    Label927.Text = "in >= " + DreqGC.ToString + "/16 in"
                    Lweld = Val(LBText.Text) + db - kbdes
                    Label922.Text = Lweld.ToString + " in"

                    If Tipo = 10 Or Tipo = 15 Then

                        If db / 2 > dc Then
                            PhiRn = Math.Round(1 * Fyc * tcw * (5 * kcdes + (Val(TextBox206.Text))), 2)
                        Else
                            PhiRn = Math.Round(1 * Fyc * tcw * (2.5 * kcdes + (Val(TextBox206.Text))), 2)
                        End If

                        Label920.Text = PhiRn.ToString

                        If (db / 2 > dc / 2) Then
                            PhiRn = Math.Round(0.8 * tcw ^ 2 * (1 + 3 * (Val(TextBox206.Text)) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                        Else
                            If (db - kbdes) / dc > 0.2 Then
                                PhiRn = Math.Round(1 * 0.4 * tcw ^ 2 * (1 + 3 * (Val(TextBox206.Text)) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                            Else
                                PhiRn = Math.Round(1 * 0.4 * tcw ^ 2 * (1 + (4 * (Val(TextBox206.Text)) / dc - 0.2) * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                            End If
                        End If

                        Label918.Text = PhiRn.ToString

                    Else

                        'Resistencia del alma de la columna a la fluencia local

                        PhiRn = Math.Round(1 * Fyc * tcw * (5 * kbdes + (Val(TextBox205.Text))), 2)

                        Label920.Text = PhiRn.ToString

                        'Resistencia del alma de la columna al aplastamiento local

                        PhiRn = Math.Round(0.8 * tcw ^ 2 * (1 + 3 * (Val(TextBox206.Text)) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)

                        Label918.Text = PhiRn.ToString

                    End If

                End If

                RuPS = Math.Max(Math.Abs(VPS), Math.Abs(VPS2))
                Rulabel2.Text = RuPS.ToString + " kips"

            End If

        Else

            If Cnx = "BPS" Then

                Hlabel.Text = Hc.ToString + " kips"
                Vlabel.Text = Vc.ToString + " kips"
                Rulabel1.Text = Rud_i.ToString + " kips"
                Rulabel2.Text = Math.Abs(Hc).ToString
                Rulabel3.Text = Math.Abs(Hc).ToString
                Label1094.Text = Math.Abs(Vc).ToString
                Label1092.Text = Rud_i.ToString
                Label878.Text = Math.Abs(Hc).ToString
                Label1097.Text = Math.Abs(Vc).ToString
                Label873.Text = Rud_i.ToString

                RuBPS = Rud_i

            ElseIf Cnx = "GPS" Then

                Hlabel.Text = Hc.ToString + " kips"
                Vlabel.Text = Vc.ToString + " kips"
                Rulabel1.Text = Rud_i.ToString + " kips"

                Rulabel2.Text = Math.Abs(Hc).ToString
                Rulabel3.Text = Math.Abs(Hc).ToString
                Label939.Text = Muc1.ToString + " kips-in"
                Label1031.Text = Math.Abs(Vc).ToString
                Label1081.Text = Rud_i.ToString
                Label869.Text = Math.Abs(Vc).ToString
                Label866.Text = Rud_i.ToString
                Label856.Text = Math.Abs(Hc).ToString

                RuGPS = Rud_i

            ElseIf Cnx = "GB" Then

                Hlabel.Text = Hc.ToString + " kips"
                Vlabel.Text = Vc.ToString + " kips"
                Rulabel1.Text = Rud_i.ToString + " kips"
                Rulabel2.Text = Math.Abs(Nc).ToString
                Rulabel3.Text = Math.Abs(Nc).ToString
                Label881.Text = Math.Abs(Hc).ToString
                Label941.Text = Mub2.ToString + " kips-in"

                factorincl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Nc) / Math.Abs(Hc)))) ^ 1.5
                Lweld = Val(LAText.Text) - bPS - 0.5
                If Tipo = 6 Then
                    MinWeldSize(t, tbf)
                Else
                    MinWeldSize(tinf, tbf)
                End If
                DreqGB = Math.Max(Math.Round((1.25 * Rud_i / (2 * (1.392) * Lweld * factorincl)), 2), Dmínreq)

                Label907.Text = "in >= " + DreqGB.ToString + "/16 in"
                Label902.Text = Lweld.ToString + " in"

            ElseIf Cnx = "PSC" Then

                If Rgc2 > Rbc2 Then

                    Hlabel.Text = Hgc2.ToString
                    Vlabel.Text = Vgc2.ToString
                    Rulabel1.Text = Math.Abs(Rgc2).ToString + " kips"
                    'Rulabel2.Text = Math.Abs(Vgc2).ToString
                    Rulabel3.Text = Math.Abs(Hgc2).ToString

                    factorincl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Vgc2 / Hgc2)))) ^ 1.5
                    Lweld = Val(LBText.Text)
                    If Tipo = 6 Then
                        MinWeldSize(tcf, tPS)
                    Else
                        MinWeldSize(tcf, tPS)
                    End If
                    DreqGC = Math.Max(Math.Round((1.25 * Rgc2 / (2 * (1.392) * Lweld * factorincl)), 2), Dmínreq)

                    Label927.Text = "in >= " + DreqGC.ToString + "/16 in"
                    Lweld = Val(LBText.Text) + db - kbdes
                    Label922.Text = Lweld.ToString + " in"

                    If Tipo = 10 Or Tipo = 15 Then

                        If db + alfa > dc Then
                            PhiRn = Math.Round(1 * Fyc * tcw * (5 * kcdes + (Val(TextBox206.Text))), 2)
                        Else
                            PhiRn = Math.Round(1 * Fyc * tcw * (2.5 * kcdes + (Val(TextBox206.Text))), 2)
                        End If

                        Label920.Text = PhiRn.ToString

                        If (betab + db > dc / 2) Then
                            PhiRn = Math.Round(0.8 * tcw ^ 2 * (1 + 3 * (Val(TextBox206.Text)) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                        Else
                            If (Val(TextBox205.Text)) / dc > 0.2 Then
                                PhiRn = Math.Round(1 * 0.4 * tcw ^ 2 * (1 + 3 * (Val(TextBox206.Text)) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                            Else
                                PhiRn = Math.Round(1 * 0.4 * tcw ^ 2 * (1 + (4 * (Val(TextBox206.Text)) / dc - 0.2) * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                            End If
                        End If

                        Label918.Text = PhiRn.ToString

                    Else

                        'Resistencia del alma de la columna a la fluencia local

                        PhiRn = Math.Round(1 * Fyc * tcw * (5 * kbdes + (Val(TextBox205.Text))), 2)

                        Label920.Text = PhiRn.ToString

                        'Resistencia del alma de la columna al aplastamiento local

                        PhiRn = Math.Round(0.8 * tcw ^ 2 * (1 + 3 * (Val(TextBox206.Text)) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)

                        Label918.Text = PhiRn.ToString

                    End If

                Else

                    Hlabel.Text = Hbc2.ToString
                    Vlabel.Text = Vbc2.ToString
                    Rulabel1.Text = Math.Abs(Rbc2).ToString + " kips"
                    Rulabel3.Text = Math.Abs(Hbc2).ToString

                    factorincl = 1 + 0.5 * (Math.Sin(Math.Atan(Math.Abs(Vbc2) / Math.Abs(Hbc2)))) ^ 1.5
                    Lweld = Tb
                    If Tipo = 6 Or Tipo = 12 Then
                        MinWeldSize(tPS, tcf)
                    Else
                        MinWeldSize(tPS, tcf)
                    End If

                    DreqGC = Math.Max(Math.Round((1.25 * Rbc2 / (2 * (1.392) * Lweld * factorincl)), 2), Dmínreq)

                    Label927.Text = "in >= " + DreqGC.ToString + "/16 in"
                    Lweld = Val(LBText.Text) + db - kbdes
                    Label922.Text = Lweld.ToString + " in"

                    If Tipo = 10 Or Tipo = 15 Then

                        If db / 2 > dc Then
                            PhiRn = Math.Round(1 * Fyc * tcw * (5 * kcdes + (Val(TextBox206.Text))), 2)
                        Else
                            PhiRn = Math.Round(1 * Fyc * tcw * (2.5 * kcdes + (Val(TextBox206.Text))), 2)
                        End If

                        Label920.Text = PhiRn.ToString

                        If (db / 2 > dc / 2) Then
                            PhiRn = Math.Round(0.8 * tcw ^ 2 * (1 + 3 * (Val(TextBox206.Text)) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                        Else
                            If (db - kbdes) / dc > 0.2 Then
                                PhiRn = Math.Round(1 * 0.4 * tcw ^ 2 * (1 + 3 * (Val(TextBox206.Text)) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                            Else
                                PhiRn = Math.Round(1 * 0.4 * tcw ^ 2 * (1 + (4 * (Val(TextBox206.Text)) / dc - 0.2) * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)
                            End If
                        End If

                        Label918.Text = PhiRn.ToString

                    Else

                        'Resistencia del alma de la columna a la fluencia local

                        PhiRn = Math.Round(1 * Fyc * tcw * (5 * kbdes + (Val(TextBox205.Text))), 2)

                        Label920.Text = PhiRn.ToString

                        'Resistencia del alma de la columna al aplastamiento local

                        PhiRn = Math.Round(0.8 * tcw ^ 2 * (1 + 3 * (Val(TextBox206.Text)) / dc * (tcw / tcf) ^ 1.5) * Math.Sqrt(29000 * Fyc * tcf / tcw), 2)

                        Label918.Text = PhiRn.ToString

                    End If

                End If

                RuPS = Math.Max(Math.Abs(VPS), Math.Abs(VPS2))
                Rulabel2.Text = RuPS.ToString + " kips"

            End If

        End If

    End Sub

    Private Sub PernosPS(CantidadLabel As Label, CantidadText As TextBox, LBText As TextBox, EspMaxLabel As Label, EspText As TextBox, LPS As Label, LevPS As Label, LehPS As Label, spcPS As Label, GPYlabel As Label, GPBLabel As Label, GPShRLabel As Label, PSBLabel As Label, PSShRlabel As Label, Miembro As String)

        Dim PhiRnBolts As Double
        Dim CntBoltsmín As Double
        Dim EspMax As Double
        Dim Lci, Lco, Leh, Lev, SpcBlt, CntBlt As Double
        Dim tgusset As Double
        Dim PhiRn, PhiRno As Double
        Dim LPlS As Double
        Dim Anv, Ant, Agv, Agt As Double

        'Resistencia de los pernos

        PhiRnBolts = Math.Round(0.75 * fnv * (Val(ListBox5.Text) ^ 2 * Math.PI / 4), 2)

        'Cantidad necesaria

        If Miembro = "GPS" Then
            CntBoltsmín = Math.Max(Math.Round(RuGPS / PhiRnBolts, 2), 2)
        Else
            CntBoltsmín = Math.Max(Math.Round(RuBPS / PhiRnBolts, 2), 2)
        End If

        CantidadLabel.Text = "> " + CntBoltsmín.ToString

        If CantidadText.Text <> "" And Miembro = "GPS" Then

            If Val(CantidadText.Text) < CntBoltsmín Then
                CantidadLabel.Text = "< " + CntBoltsmín.ToString
                CantidadLabel.ForeColor = Color.Red
                CantidadText.BackColor = Color.Red
            Else
                CantidadLabel.Text = "> " + CntBoltsmín.ToString
                CantidadLabel.ForeColor = Color.White
                CantidadText.BackColor = Color.White
            End If

            EspMax = Math.Round((Val(LBText.Text) - 2 * Val(ListBox4.Text)) / (Val(CantidadText.Text) - 1), 2)

            EspMaxLabel.Text = "in < " + EspMax.ToString + " in"

            If EspText.Text <> "" Then

                If Val(EspText.Text) > EspMax Then
                    EspMaxLabel.Text = "in > " + EspMax.ToString + " in"
                    EspMaxLabel.ForeColor = Color.Red
                    EspText.BackColor = Color.Red
                Else
                    EspMaxLabel.Text = "in < " + EspMax.ToString + " in"
                    EspMaxLabel.ForeColor = Color.White
                    EspText.BackColor = Color.White
                End If

                'ahora se procede a calcular los valores geométricos de la placa simple
                'para luego calcular sus resistencias

                SpcBlt = Val(EspText.Text)
                CntBlt = Val(CantidadText.Text)

                Lci = Math.Round(SpcBlt - (dbolt + 1 / 16), 2)
                Leh = bPS / 2
                Lev = Math.Round((Val(LBText.Text) - SpcBlt * (CntBlt - 1)) / 2, 2)
                Lco = Math.Round(Lev - (dbolt + 1 / 16) / 2, 2)

                LevPS.Text = Lev.ToString + " in"
                LehPS.Text = Leh.ToString + " in"
                spcPS.Text = SpcBlt.ToString + " in"
                LPS.Text = LBText.Text + " in"

                'Resistencias de las placas

                '   Placa Gusset

                tgusset = Val(TextBox218N.Text)

                '       Resistencia a la fluencia por cortante

                PhiRn = 1 * 0.6 * Fyp * Val(LBText.Text) * tgusset

                Label1079.Text = PhiRn.ToString

                '       Resistencia a la fluencia por tension

                PhiRn = 1 * 0.9 * Fyp * Val(LBText.Text) * tgusset

                Label853.Text = PhiRn.ToString

                '       Resistencia al aplastamiento de los pernos

                PhiRn = Math.Round(Math.Min(1.2 * Lci * tgusset * Fup, 2.4 * dbolt * tgusset * Fup), 2)
                PhiRno = Math.Round(Math.Min(1.2 * Lco * tgusset * Fup, 2.4 * dbolt * tgusset * Fup), 2)
                PhiRn = PhiRn * (CntBlt - 1) + PhiRno

                GPBLabel.Text = PhiRn.ToString

                '       Resistencia a la ruptura por bloque de cortante

                '           carga vertical

                Agv = (Lev + SpcBlt * (CntBlt - 1)) * tgusset
                Anv = Agv - (CntBlt - 0.5) * (dbolt + 1 / 8) * tgusset
                Agt = bPS / 2 * tgusset
                Ant = Agt - 0.5 * (dbolt + 1 / 8) * tgusset
                PhiRn = Math.Round(0.75 * Math.Min(0.6 * Fup * Anv + 1 * Fup * Ant, 0.6 * Fyp * Agv + 1 * Fup * Ant), 2)

                Label1077.Text = PhiRn.ToString

                '         carga horizontal

                Agv = bPS / 2 * tgusset
                Anv = Agv - 0.5 * (dbolt + 1 / 8) * tgusset
                Agt = (Lev + SpcBlt * (CntBlt - 1)) * tgusset
                Ant = Agt - (CntBlt - 0.5) * (dbolt + 1 / 8) * tgusset
                PhiRn = Math.Round(0.75 * Math.Min(0.6 * Fup * Anv + 1 * Fup * Ant, 0.6 * Fyp * Agv + 1 * Fup * Ant), 2)

                Label855.Text = PhiRn.ToString

                '   Placa Simple

                '       Resistencia al aplastamiento de los pernos

                PhiRn = Math.Round(Math.Min(1.2 * Lci * tPS * Fup, 2.4 * dbolt * tPS * Fup), 2)
                PhiRno = Math.Round(Math.Min(1.2 * Lco * tPS * Fup, 2.4 * dbolt * tPS * Fup), 2)
                PhiRn = PhiRn * (CntBlt - 1) + PhiRno

                PSBLabel.Text = PhiRn.ToString

                '       Resistencia a la ruptura por bloque de cortante

                '           Carga vertical

                Agv = (Lev + SpcBlt * (CntBlt - 1)) * tPS
                Anv = Agv - (CntBlt - 0.5) * (dbolt + 1 / 8) * tPS
                Agt = bPS / 2 * tPS
                Ant = Agt - 0.5 * (dbolt + 1 / 8) * tPS

                PhiRn = Math.Round(0.75 * Math.Min(0.6 * Fup * Anv + 1 * Fup * Ant, 0.6 * Fyp * Agv + 1 * Fup * Ant), 2)

                Label1084.Text = PhiRn.ToString

                '           Carga horizontal

                Agv = bPS / 2 * tPS
                Anv = Agv - 0.5 * (dbolt + 1 / 8) * tPS
                Agt = (Lev + SpcBlt * (CntBlt - 1)) * tPS
                Ant = Agt - (CntBlt - 0.5) * (dbolt + 1 / 8) * tPS

                PhiRn = Math.Round(0.75 * Math.Min(0.6 * Fup * Anv + 1 * Fup * Ant, 0.6 * Fyp * Agv + 1 * Fup * Ant), 2)

                Label859.Text = PhiRn.ToString

            End If

        ElseIf CantidadText.Text <> "" And Miembro = "BPS" Then

            If Val(CantidadText.Text) < CntBoltsmín Then
                CantidadLabel.Text = "< " + CntBoltsmín.ToString
                CantidadLabel.ForeColor = Color.Red
                CantidadText.BackColor = Color.Red
            Else
                CantidadLabel.Text = "> " + CntBoltsmín.ToString
                CantidadLabel.ForeColor = Color.White
                CantidadText.BackColor = Color.White
            End If

            EspMax = Math.Round(((db - kbdes) - 2 * Val(ListBox4.Text)) / (Val(CantidadText.Text) - 1), 2)

            EspMaxLabel.Text = "in < " + EspMax.ToString + " in"

            If EspText.Text <> "" Then

                If Val(EspText.Text) > EspMax Then
                    EspMaxLabel.Text = "in > " + EspMax.ToString + " in"
                    EspMaxLabel.ForeColor = Color.Red
                    EspText.BackColor = Color.Red
                Else
                    EspMaxLabel.Text = "in < " + EspMax.ToString + " in"
                    EspMaxLabel.ForeColor = Color.White
                    EspText.BackColor = Color.White
                End If

                'ahora se procede a calcular los valores geométricos de la placa simple
                'para luego calcular sus resistencias

                SpcBlt = Val(EspText.Text)
                CntBlt = Val(CantidadText.Text)

                Lci = Math.Round(SpcBlt - (dbolt + 1 / 16), 2)
                Leh = bPS / 2
                Lev = Math.Round(((db - kbdes) - SpcBlt * (CntBlt - 1)) / 2, 2)
                Lco = Math.Round(Lev - (dbolt + 1 / 16) / 2, 2)

                LevPS.Text = Lev.ToString + " in"
                LehPS.Text = Leh.ToString + " in"
                spcPS.Text = SpcBlt.ToString + " in"
                LPS.Text = LBText.Text + " in"

                'Resistencias de los miembros

                '   Alma de la viga

                '       Resistencia a la fluencia por cortante

                PhiRn = 1 * 0.6 * Fyb * (db - kbdes) * tbw

                Label1091.Text = PhiRn.ToString

                '       Resistencia al aplastamiento de los pernos

                PhiRn = Math.Round(Math.Min(1.2 * Lci * tbw * Fub, 2.4 * dbolt * tbw * Fub), 2)
                PhiRno = Math.Round(Math.Min(1.2 * Lco * tbw * Fub, 2.4 * dbolt * tbw * Fub), 2)
                PhiRn = PhiRn * (CntBlt - 1) + PhiRno

                Label887.Text = PhiRn.ToString

                '       Resistencia a la ruptura por bloque de cortante (V)

                Agv = (Lev + SpcBlt * (CntBlt - 1)) * tbw
                Anv = Agv - (CntBlt - 0.5) * (dbolt + 1 / 8) * tbw
                Agt = bPS / 2 * tbw
                Ant = Agt - 0.5 * (dbolt + 1 / 8) * tbw

                PhiRn = Math.Round(0.75 * Math.Min(0.6 * Fup * Anv + 1 * Fup * Ant, 0.6 * Fyp * Agv + 1 * Fup * Ant), 2)

                Label1087.Text = PhiRn.ToString

                '       Resistencia a la ruptura por bloque de cortante (H)

                Agv = bPS / 2 * tbw
                Anv = Agv - 0.5 * (dbolt + 1 / 8) * tbw
                Agt = (Lev + SpcBlt * (CntBlt - 1)) * tbw
                Ant = Agt - (CntBlt - 0.5) * (dbolt + 1 / 8) * tbw

                PhiRn = Math.Round(0.75 * Math.Min(0.6 * Fup * Anv + 1 * Fup * Ant, 0.6 * Fyp * Agv + 1 * Fup * Ant), 2)

                Label885.Text = PhiRn.ToString

                '   Placa Simple

                '       Resistencia al aplastamiento de los pernos

                PhiRn = Math.Round(Math.Min(1.2 * Lci * tPS * Fup, 2.4 * dbolt * tPS * Fup), 2)
                PhiRno = Math.Round(Math.Min(1.2 * Lco * tPS * Fup, 2.4 * dbolt * tPS * Fup), 2)
                PhiRn = Math.Round(PhiRn * (CntBlt - 1) + PhiRno, 2)

                Label874.Text = PhiRn.ToString

                '       Resistencia a la ruptura por bloque de cortante (V)


                Agv = (Lev + SpcBlt * (CntBlt - 1)) * tPS
                Anv = Agv - (CntBlt - 0.5) * (dbolt + 1 / 8) * tPS
                Agt = bPS / 2 * tPS
                Ant = Agt - 0.5 * (dbolt + 1 / 8) * tPS

                PhiRn = Math.Round(0.75 * Math.Min(0.6 * Fup * Anv + 1 * Fup * Ant, 0.6 * Fyp * Agv + 1 * Fup * Ant), 2)

                Label880.Text = PhiRn.ToString

                '       Resistencia a la ruptura por bloque de cortante (H)

                Agv = bPS / 2 * tPS
                Anv = Agv - 0.5 * (dbolt + 1 / 8) * tPS
                Agt = (Lev + SpcBlt * (CntBlt - 1)) * tPS
                Ant = Agt - (CntBlt - 0.5) * (dbolt + 1 / 8) * tPS

                PhiRn = Math.Round(0.75 * Math.Min(0.6 * Fup * Anv + 1 * Fup * Ant, 0.6 * Fyp * Agv + 1 * Fup * Ant), 2)

                Label1101.Text = PhiRn.ToString

                'Resistencia de la placa simple a las cargas totales

                LPlS = Val(LBText.Text) + db - kbdes

                '   Resistencia a la fluencia por cortante

                PhiRn = 1 * 0.6 * Fyp * LPlS * tPS

                Label931.Text = PhiRn.ToString

                '   Resistencia a la ruptura por cortante

                Dim An As Double

                An = (LPlS - (Val(TextBox265.Text) + Val(TextBox289.Text)) * (dbolt + 1 / 8)) * tPS

                PhiRn = Math.Round(0.75 * 0.6 * Fup * An, 2)

                Label933.Text = PhiRn.ToString

            End If

        End If

    End Sub

    Private Sub PernosPS2()



    End Sub

    Private Sub ComboBox15_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox15.SelectedIndexChanged

        Label857.Text = ComboBox15.Text
        ListBox2.SelectedIndex = ComboBox15.SelectedIndex
        fnv = Val(ListBox2.Text)

        If ComboBox15.Text <> "" And ComboBox16.Text <> "" Then

            PernosPS(Label851, TextBox265, TextBox337, Label964, TextBox288, Label844, Label846, Label847, Label845, Label853, Label854, Label855, Label858, Label859, "GPS")
            PernosPS(Label944, TextBox289, TextBox337, Label890, TextBox278, Label897, Label895, Label894, Label896, Label887, Label887, Label885, Label874, Label880, "BPS")

            If TextBox265.Text <> "" And TextBox288.Text <> "" Then
                ComparaciónPS("GPS")
            End If

        End If

    End Sub

    Private Sub ComboBox19_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox19.SelectedIndexChanged

        If ComboBox19.SelectedIndex <> -1 Then
            ListBox1.SelectedIndex = ComboBox19.SelectedIndex
            bPS = Val(ListBox1.Text)
            DistribCargasPS(TextBox206, TextBox337, "GPS", Label949, Label948, Label943, Label852, Label856)
        End If

        If ComboBox15.Text <> "" And ComboBox16.Text <> "" Then

            PernosPS(Label851, TextBox265, TextBox337, Label964, TextBox288, Label844, Label846, Label847, Label845, Label853, Label854, Label855, Label858, Label859, "GPS")
            ComparaciónPS("GPS")
            PernosPS(Label944, TextBox289, TextBox337, Label890, TextBox278, Label897, Label895, Label894, Label896, Label887, Label887, Label885, Label874, Label880, "BPS")

            If TextBox289.Text <> "" And TextBox278.Text <> "" Then
                ComparaciónPS("BPS")
            End If

        End If

        If ComboBox19.SelectedIndex <> -1 Then
            DistribCargasPS(TextBox206, TextBox337, "GB", Label917, Label916, Label903, Label950, Label953)
            ResistenciasPS()
            ComparaciónPS("GB")
        End If

        If TextBox289.Text <> "" And TextBox278.Text <> "" Then
            DistribCargasPS(TextBox206, TextBox337, "PSC", Label937, Label936, Label923, Label956, Label959)
            ComparaciónPS("PSC")
        End If

    End Sub
    'Diámetro de los pernos
    Private Sub ComboBox16_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox16.SelectedIndexChanged
        Label863.Text = ComboBox16.Text
        ListBox4.SelectedIndex = ComboBox16.SelectedIndex
        ListBox5.SelectedIndex = ComboBox16.SelectedIndex
        dbolt = Val(ListBox5.Text)
        lcmín = Val(ListBox4.Text)

        If ComboBox15.Text <> "" Then

            PernosPS(Label851, TextBox265, TextBox337, Label964, TextBox288, Label844, Label846, Label847, Label845, Label853, Label854, Label855, Label858, Label859, "GPS")
            PernosPS(Label944, TextBox289, TextBox337, Label890, TextBox278, Label897, Label895, Label894, Label896, Label887, Label887, Label885, Label874, Label880, "BPS")

            DistribCargasPS(TextBox206, TextBox337, "BPS", Label947, Label946, Label892, Label889, Label878)

        End If

        If ComboBox15.Text <> "" And ComboBox16.Text <> "" And TextBox265.Text <> "" And TextBox288.Text <> "" Then
            ComparaciónPS("GPS")
        End If

        If ComboBox15.Text <> "" And ComboBox16.Text <> "" And TextBox289.Text <> "" And TextBox278.Text <> "" Then
            ComparaciónPS("BPS")
            ComparaciónPS("PSC")
        End If

    End Sub

    Private Sub TextBox265_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox265.KeyPress

        If OpenMode Or RevMode Then
            GoTo Line0
        End If

        soloNumeros(TextBox265, e)

        If Asc(e.KeyChar) = 13 Then

Line0:

            If TextBox265.Text = "" Or ComboBox16.Text = "" Then
            ElseIf Val(TextBox265.Text) = 1 Then
                TextBox265.Text = 2
            Else

                If ComboBox15.Text <> "" Then
                    PernosPS(Label851, TextBox265, TextBox337, Label964, TextBox288, Label844, Label846, Label847, Label845, Label853, Label854, Label855, Label858, Label859, "GPS")
                    PernosPS(Label944, TextBox289, TextBox337, Label890, TextBox278, Label897, Label895, Label894, Label896, Label887, Label887, Label885, Label874, Label880, "BPS")
                End If

                If ComboBox15.Text <> "" And ComboBox16.Text <> "" And TextBox265.Text <> "" And TextBox288.Text <> "" Then
                    ComparaciónPS("GPS")
                    If TextBox289.Text <> "" And TextBox278.Text <> "" Then
                        ComparaciónPS("BPS")
                        DistribCargasPS(TextBox206, TextBox337, "PSC", Label937, Label936, Label923, Label956, Label959)
                        ComparaciónPS("PSC")
                    End If
                End If

                TextBox288.Focus()

            End If

        End If
    End Sub

    Private Sub TextBox288_BackColorChanged(sender As Object, e As EventArgs)
        TextBox288.BackColor.ToString()
    End Sub

    Private Sub TextBox288_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox288.KeyPress

        If OpenMode Or RevMode Then
            GoTo Line0
        End If

        SoloNumFrac(TextBox288, e)

        If Asc(e.KeyChar) = 13 Then

            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox282.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox282.Text = Frac2Num(TextBox282.Text)
            End If

Line0:
            If TextBox288.Text = "" Or TextBox265.Text = "" Then
            Else

                If ComboBox15.Text <> "" Then
                    PernosPS(Label851, TextBox265, TextBox337, Label964, TextBox288, Label844, Label846, Label847, Label845, Label853, Label854, Label855, Label858, Label859, "GPS")
                    PernosPS(Label944, TextBox289, TextBox337, Label890, TextBox278, Label897, Label895, Label894, Label896, Label887, Label887, Label885, Label874, Label880, "BPS")
                End If

                If ComboBox15.Text <> "" And ComboBox16.Text <> "" And TextBox265.Text <> "" And TextBox288.Text <> "" Then
                    ComparaciónPS("GPS")
                    If TextBox289.Text <> "" And TextBox278.Text <> "" Then
                        ComparaciónPS("BPS")
                        DistribCargasPS(TextBox206, TextBox337, "PSC", Label937, Label936, Label923, Label956, Label959)
                        ComparaciónPS("PSC")
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub TextBox289_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox289.KeyPress

        If OpenMode Or RevMode Then
            GoTo Line0
        End If

        soloNumeros(TextBox289, e)

        If Asc(e.KeyChar) = 13 Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox282.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox282.Text = Frac2Num(TextBox282.Text)
            End If
Line0:
            If TextBox289.Text = "" Then
            Else

                PernosPS(Label944, TextBox289, TextBox337, Label890, TextBox278, Label897, Label895, Label894, Label896, Label887, Label887, Label885, Label874, Label880, "BPS")

                If TextBox289.Text <> "" And TextBox278.Text <> "" Then
                    ComparaciónPS("BPS")
                    DistribCargasPS(TextBox206, TextBox337, "PSC", Label937, Label936, Label923, Label956, Label959)
                    ComparaciónPS("PSC")
                End If

                TextBox278.Focus()

            End If

        End If
    End Sub

    Private Sub TextBox278_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox278.KeyPress

        If OpenMode Or RevMode Then
            GoTo Line0
        End If

        SoloNumFrac(TextBox278, e)

        If Asc(e.KeyChar) = 13 Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox282.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox282.Text = Frac2Num(TextBox282.Text)
            End If
Line0:
            If TextBox278.Text = "" And TextBox289.Text <> "" Then
            Else

                PernosPS(Label944, TextBox289, TextBox337, Label890, TextBox278, Label897, Label895, Label894, Label896, Label887, Label887, Label885, Label874, Label880, "BPS")

                If TextBox289.Text <> "" And TextBox278.Text <> "" Then
                    ComparaciónPS("BPS")
                    DistribCargasPS(TextBox206, TextBox337, "PSC", Label937, Label936, Label923, Label956, Label959)
                    ComparaciónPS("PSC")
                End If

            End If

        End If
    End Sub

    Private Sub TextBox279_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox279.KeyPress

        If OpenMode Or RevMode Then
            GoTo Line0
        End If

        SoloNumFrac(TextBox279, e)

        If Asc(e.KeyChar) = 13 Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox279.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox279.Text = Frac2Num(TextBox279.Text)
            End If

Line0:
            If TextBox279.Text = "" Then
            Else

                CompD(TextBox279, Label907, DreqGB, TextBox282)

            End If

        End If
    End Sub

    Private Sub TextBox282_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox282.KeyPress
        If OpenMode Or RevMode Then
            GoTo Line0
        End If

        SoloNumFrac(TextBox282, e)

        If Asc(e.KeyChar) = 13 Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox282.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox282.Text = Frac2Num(TextBox282.Text)
            End If
Line0:
            If TextBox282.Text = "" Then
            Else
                CompD(TextBox282, Label927, DreqGC, TextBox282)
            End If

        End If
    End Sub

    Private Sub TextBox287_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox287.KeyPress

        If OpenMode Or RevMode Then
            GoTo Line0
        End If

        SoloNumFrac(TextBox287, e)

        If Asc(e.KeyChar) = 13 Then

            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox282.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox282.Text = Frac2Num(TextBox282.Text)
            End If
Line0:
            If TextBox287.Text = "" Then
            Else

                tPS = Val(TextBox287.Text)

                If ComboBox15.Text <> "" And ComboBox16.Text <> "" Then

                    PernosPS(Label851, TextBox265, TextBox337, Label964, TextBox288, Label844, Label846, Label847, Label845, Label853, Label854, Label855, Label858, Label859, "GPS")
                    ComparaciónPS("GPS")

                    If TextBox289.Text <> "" And TextBox278.Text <> "" Then
                        PernosPS(Label944, TextBox289, TextBox337, Label890, TextBox278, Label897, Label895, Label894, Label896, Label887, Label887, Label885, Label874, Label880, "BPS")
                        ComparaciónPS("BPS")
                        DistribCargasPS(TextBox206, TextBox337, "PSC", Label937, Label936, Label923, Label956, Label959)
                        ComparaciónPS("PSC")
                    End If

                End If
            End If
        End If
    End Sub

    Private Sub ResistenciasPS()

        Dim PhiRn, tgusset As Double

        tgusset = Val(TextBox218N.Text)

        'Resistencia del alma de la viga a la fluencia local

        If alfab > db Then
            PhiRn = Math.Round(Fyb * tbw * (5 * kbdes + (Val(TextBox206.Text) - bPS - 0.5)), 2)
        Else
            PhiRn = Math.Round(Fyb * tbw * (2.5 * kbdes + (Val(TextBox206.Text) - bPS - 0.5)), 2)
        End If

        Label900.Text = PhiRn.ToString

        'Resistencia del alma de la viga al aplastamiento local

        If alfab > db / 2 Then
            PhiRn = Math.Round(0.75 * 0.8 * tbw ^ 2 * (1 + 3 * (Val(TextBox206.Text) - bPS - 0.5) / db * (tbw / tbf) ^ 1.5) * Math.Sqrt(29000 * Fyb * tbf / tbw), 2)
        Else
            If (Val(TextBox206.Text) - bPS - 0.5) / db > 0.2 Then
                PhiRn = Math.Round(0.75 * 0.4 * tbw ^ 2 * (1 + 3 * (Val(TextBox206.Text) - bPS - 0.5) / db * (tbw / tbf) ^ 1.5) * Math.Sqrt(29000 * Fyb * tbf / tbw), 2)
            Else
                PhiRn = Math.Round(0.75 * 0.4 * tbw ^ 2 * (1 + (4 * (Val(TextBox206.Text) - bPS - 0.5) / db - 0.2) * (tbw / tbf) ^ 1.5) * Math.Sqrt(29000 * Fyb * tbf / tbw), 2)
            End If
        End If

        Label898.Text = PhiRn.ToString

        'Resistencia de la placa gusset a la fluencia por cortante

        PhiRn = Math.Round(1 * 0.6 * Fyp * (Val(TextBox206.Text) - bPS - 0.5) * tgusset, 2)

        Label911.Text = PhiRn.ToString

        'Resistencia de la placa gusset a la fluencia por tensión

        PhiRn = Math.Round(0.9 * Fyp * (Val(TextBox206.Text) - bPS - 0.5) * tgusset, 2)

        Label913.Text = PhiRn.ToString

    End Sub

    Private Sub ComparaciónPS(Cnx As String)

        Dim Ru, PhiRn As Double

        If Cnx = "GPS" Then

            'Conexión Placa Gusset - Placa Simple

            '   Resistencias vs Demanda Placa Gusset

            Ru = Val(Label852.Text)
            Label852.Text = Ru.ToString + " kips"

            '       Resistencia a la fluencia por tensión

            PhiRn = Val(Label853.Text)
            Label853.Text = PhiRn.ToString + " kips"

            If Ru > PhiRn Then
                Label853.ForeColor = Color.Red
            Else
                Label853.ForeColor = Color.White
            End If

            '       Resistencia a la ruptura por bloque de cortante (Ht)

            PhiRn = Val(Label855.Text)
            Label855.Text = Label855.Text + " kips"

            If Ru > PhiRn Then
                Label855.ForeColor = Color.Red
            Else
                Label855.ForeColor = Color.White
            End If

            '       Resistencia a la ruptura por bloque de cortante (Vt)

            Ru = Val(Label1031.Text)
            Label1031.Text = Ru.ToString + " kips"
            PhiRn = Val(Label1077.Text)
            Label1077.Text = PhiRn.ToString + " kips"

            If Ru > PhiRn Then
                Label1077.ForeColor = Color.Red
            Else
                Label1077.ForeColor = Color.White
            End If

            '       Resistencia a la fluencia por cortante

            PhiRn = Val(Label1079.Text)
            Label1079.Text = PhiRn.ToString + " kips"

            If Ru > PhiRn Then
                Label1079.ForeColor = Color.Red
            Else
                Label1079.ForeColor = Color.White
            End If

            '       'Resistencia al aplastamiento

            Ru = Val(Label1081.Text)
            Label1081.Text = Ru.ToString + " kips"

            PhiRn = Val(Label854.Text)
            Label854.Text = PhiRn.ToString + " kips"

            If Ru > PhiRn Then
                Label854.ForeColor = Color.Red
            Else
                Label854.ForeColor = Color.White
            End If


            'Resistencias VS Demanda Placa Simple

            Ru = Val(Label866.Text)
            Label866.Text = Ru.ToString + " kips"

            '   Aplastamiento de los pernos

            PhiRn = Val(Label858.Text)
            Label858.Text = PhiRn.ToString + " kips"

            If Ru > PhiRn Then
                Label858.ForeColor = Color.Red
            Else
                Label858.ForeColor = Color.White
            End If

            '   Ruptura por bloque de cortante (H)

            Ru = Val(Label856.Text)
            Label856.Text = Ru.ToString + " kips"

            PhiRn = Val(Label859.Text)
            Label859.Text = PhiRn.ToString + " kips"

            If Ru > PhiRn Then
                Label859.ForeColor = Color.Red
            Else
                Label859.ForeColor = Color.White
            End If

            '   Ruptura por bloque de cortante (V)

            Ru = Val(Label869.Text)
            Label869.Text = Ru.ToString + " kips"

            PhiRn = Val(Label1084.Text)
            Label1084.Text = PhiRn.ToString + " kips"

            If Ru > PhiRn Then
                Label869.ForeColor = Color.Red
            Else
                Label869.ForeColor = Color.White
            End If

        ElseIf Cnx = "BPS" Then

            'Conexión entre el alma de la viga y la placa simple

            '   Fluencia del alma de la viga

            Ru = Val(Label1094.Text)
            Label1094.Text = Ru.ToString + " kips"

            PhiRn = Val(Label1091.Text)
            Label1091.Text = PhiRn.ToString + " kips"

            If Ru > PhiRn Then
                Label1091.ForeColor = Color.Red
            Else
                Label1091.ForeColor = Color.White
            End If

            '   Ruptura por bloque de cortante (V)

            PhiRn = Val(Label1087.Text)
            Label1087.Text = PhiRn.ToString + " kips"

            If Ru > PhiRn Then
                Label1087.ForeColor = Color.Red
            Else
                Label1087.ForeColor = Color.White
            End If

            '   Ruptura por bloque de cortante (H)

            Ru = Val(Label889.Text)
            Label889.Text = Ru.ToString + " kips"

            PhiRn = Val(Label885.Text)
            Label885.Text = PhiRn.ToString + " kips"

            If Ru > PhiRn Then
                Label885.ForeColor = Color.Red
            Else
                Label885.ForeColor = Color.White
            End If

            '   Aplastamiento del alma de la viga

            Ru = Val(Label1092.Text)
            Label1092.Text = Ru.ToString + " kips"

            PhiRn = Val(Label887.Text)
            Label887.Text = Label887.Text + " kips"

            If Ru > PhiRn Then
                Label887.ForeColor = Color.Red
            Else
                Label887.ForeColor = Color.White
            End If

            'Placa simple

            Ru = Val(Label878.Text)
            Label878.Text = Ru.ToString + " kips"

            '   Ruptura por bloque de cortante (H)

            PhiRn = Val(Label1101.Text)
            Label1101.Text = Label1101.Text + " kips"

            If Ru > PhiRn Then
                Label1101.ForeColor = Color.Red
            Else
                Label1101.ForeColor = Color.White
            End If

            '   Ruptura por bloque de cortante (V)

            Ru = Val(Label1097.Text)
            Label1097.Text = Ru.ToString + " kips"

            PhiRn = Val(Label880.Text)
            Label880.Text = Label880.Text + " kips"

            If Ru > PhiRn Then
                Label880.ForeColor = Color.Red
            Else
                Label880.ForeColor = Color.White
            End If

            '   Aplastamiento de la placa simple

            Ru = Val(Label873.Text)
            Label873.Text = Ru.ToString + " kips"

            PhiRn = Val(Label874.Text)
            Label874.Text = Label874.Text + " kips"

            If Ru > PhiRn Then
                Label874.ForeColor = Color.Red
            Else
                Label874.ForeColor = Color.White
            End If

        ElseIf Cnx = "GB" Then

            'Alma de la viga vs Cargas Requeridas

            Ru = Val(Label950.Text)
            Label950.Text = Label950.Text + " kips"

            '   Fluencia local del alma de la viga

            PhiRn = Val(Label900.Text)
            Label900.Text = Label900.Text + " kips"

            If Ru > PhiRn Then
                Label900.ForeColor = Color.Red
            Else
                Label900.ForeColor = Color.White
            End If

            '   Aplastamiento local del alma de la viga

            PhiRn = Val(Label898.Text)
            Label898.Text = Label898.Text + " kips"

            If Ru > PhiRn Then
                Label898.ForeColor = Color.Red
            Else
                Label898.ForeColor = Color.White
            End If

            'Placa gusset vs Cargas requeridas

            '   Resistencia a la fluencia por tensión

            Ru = Val(Label953.Text)
            Label953.Text = Label953.Text + " kips"

            PhiRn = Val(Label913.Text)
            Label913.Text = Label913.Text + " kips"

            If Ru > PhiRn Then
                Label913.ForeColor = Color.Red
            Else
                Label913.ForeColor = Color.White
            End If

            '   Resistencia a la fluencia por cortante

            Ru = Val(Label881.Text)
            Label881.Text = Ru.ToString + " kips"

            PhiRn = Val(Label911.Text)
            Label911.Text = Label911.Text + " kips"

            If Ru > PhiRn Then
                Label911.ForeColor = Color.Red
            Else
                Label911.ForeColor = Color.White
            End If

        ElseIf Cnx = "PSC" Then

            'Carga requerida vs resistencia de la placa simple

            Ru = RuPS
            'Label956.Text = Label956.Text + " kips"

            '   Resitencia a la fluencia por cortante

            PhiRn = Val(Label931.Text)
            Label931.Text = Label931.Text + " kips"

            If Ru > PhiRn Then
                Label931.ForeColor = Color.Red
            Else
                Label931.ForeColor = Color.White
            End If

            'Resistencia a la ruptura por cortante

            PhiRn = Val(Label933.Text)
            Label933.Text = Label933.Text + " kips"

            If Ru > PhiRn Then
                Label933.ForeColor = Color.Red
            Else
                Label933.ForeColor = Color.White
            End If

            'Carga requerida vs Resistencia del alma de la columna

            Ru = Val(Label959.Text)
            Label959.Text = Label959.Text + " kips"

            'Fluencia local del alma

            PhiRn = Val(Label920.Text)
            Label920.Text = Label920.Text + " kips"

            If Ru > PhiRn Then
                Label920.ForeColor = Color.Red
            Else
                Label920.ForeColor = Color.White
            End If

            'aplastamiento local del alma

            PhiRn = Val(Label918.Text)
            Label918.Text = Label918.Text + " kips"

            If Ru > PhiRn Then
                Label918.ForeColor = Color.Red
            Else
                Label918.ForeColor = Color.White
            End If

            'Cargas

            Label936.Text = Label936.Text + " kips"
            Label937.Text = Label937.Text + " kips"

        End If

    End Sub

    Private Sub Label956_TextChanged(sender As Object, e As EventArgs)
        Dim dbcd As Double
        dbcd = Val(Label956.Text)
    End Sub

    Private Sub Button15_Click(sender As Object, e As EventArgs) Handles Button15.Click
        ConexionesSMF.Visible = False
        GroupBox1.Visible = False
        FlowLayoutPanel1.Visible = False
        FlowLayoutPanel2N.Visible = False
        FlowLayoutPanel2.Visible = True
        'variable de tipo de Marco
        Sistema = "BRBF"

        'COLOR DE FONDO DEL BOTON UNA VEZ QUE HA SIDO CLICKEADO
        Button1.BackgroundImage = My.Resources.BOTON_SMF2
        Button2.BackgroundImage = My.Resources.BOTON_SCBF2
        Button3.BackgroundImage = My.Resources.BOTON_EBF2
        Button15.BackgroundImage = My.Resources.BOTON_BRBF_iluminado


        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexiones de arriostre en Marcos Restringidoas al Pandeo"
    End Sub

    Private Sub TextBox209N_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox209N.KeyPress
        SoloNumFrac(TextBox209N, e)
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then

            exTexto = Strings.InStr(TextBox209N.Text, "/")

            If exTexto <> 0 Then
                TextBox209N.Text = Frac2Num(TextBox209N.Text)
            End If
            If TextBox209N.Text = "" Then
            Else
                TextBox210N.Focus()
            End If

        End If
    End Sub

    Private Sub TextBox210N_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox210N.KeyPress
        SoloNumFrac(TextBox210N, e)
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then

            exTexto = Strings.InStr(TextBox210N.Text, "/")

            If exTexto <> 0 Then
                TextBox210N.Text = Frac2Num(TextBox210N.Text)
            End If
            If TextBox210N.Text = "" Then
            Else
                TextBox211N.Focus()
            End If

        End If
    End Sub

    Private Sub TextBox211N_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox211N.KeyPress
        SoloNumFrac(TextBox211N, e)
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then

            exTexto = Strings.InStr(TextBox211N.Text, "/")

            If exTexto <> 0 Then
                TextBox211N.Text = Frac2Num(TextBox211N.Text)
            End If
            If TextBox211N.Text = "" Then
            Else
                If Tipo <> 10 And Tipo <> 11 Then
                    TextBox212N.Focus()
                Else
                    TextBox213N.Focus()
                End If
            End If

        End If
    End Sub

    Private Sub TextBox212N_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox212N.KeyPress
        SoloNumFrac(TextBox212N, e)
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then

            exTexto = Strings.InStr(TextBox212N.Text, "/")

            If exTexto <> 0 Then
                TextBox212N.Text = Frac2Num(TextBox212N.Text)
            End If
            If TextBox212N.Text = "" Then
            Else
                TextBox213N.Focus()
            End If

        End If
    End Sub

    Private Sub TextBox213N_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox213N.KeyPress
        SoloNumFrac(TextBox213N, e)
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then

            exTexto = Strings.InStr(TextBox213N.Text, "/")

            If exTexto <> 0 Then
                TextBox213N.Text = Frac2Num(TextBox213N.Text)
            End If
            If TextBox213N.Text = "" Then
            Else
            End If

        End If
    End Sub

    Private Sub LimpiezaPS()

        TextBox287.Text = ""
        Label943.Text = ""
        ComboBox15.Text = ""
        ComboBox16.Text = ""
        TextBox265.Text = ""
        TextBox288.Text = ""
        Label851.Text = ""
        Label964.Text = ""
        Label852.Text = ""
        Label853.Text = ""
        Label854.Text = ""
        Label855.Text = ""
        Label856.Text = ""
        Label858.Text = ""
        Label859.Text = ""
        Label844.Text = ""
        Label847.Text = ""
        Label845.Text = ""
        Label846.Text = ""
        Label948.Text = ""
        Label949.Text = ""
        Label939.Text = ""

        Label897.Text = ""
        Label896.Text = ""
        Label894.Text = ""
        Label895.Text = ""
        Label892.Text = ""
        Label857.Text = ""
        Label863.Text = ""
        Label944.Text = ""
        Label890.Text = ""
        TextBox289.Text = ""
        TextBox278.Text = ""
        Label889.Text = ""
        Label887.Text = ""
        Label885.Text = ""
        Label878.Text = ""
        Label874.Text = ""
        Label880.Text = ""
        Label946.Text = ""
        Label947.Text = ""

        Label917.Text = ""
        Label916.Text = ""
        Label941.Text = ""
        Label903.Text = ""
        Label902.Text = ""
        Label907.Text = ""
        TextBox279.Text = ""
        Label950.Text = ""
        Label900.Text = ""
        Label898.Text = ""
        Label953.Text = ""
        Label911.Text = ""
        Label913.Text = ""

        Label937.Text = ""
        Label936.Text = ""
        Label923.Text = ""
        Label922.Text = ""
        Label927.Text = ""
        Label956.Text = ""
        Label931.Text = ""
        Label933.Text = ""
        Label959.Text = ""
        Label920.Text = ""
        Label918.Text = ""
        TextBox282.Text = ""

        ComboBox19.SelectedIndex = -1

    End Sub

    Private Sub GroupBox143N_Enter(sender As Object, e As EventArgs)

    End Sub

    Private Sub PictureBox320_Click(sender As Object, e As EventArgs)

    End Sub

    Private Sub Rediseñado()

        If Tipo = 6 Or Tipo = 10 Or Tipo = 12 Or Tipo = 15 Then

            OpenMode = True
            TextBox215N_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox216N_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox217N_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox218N_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox207_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox219_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox205_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox206_KeyPress(AbrirToolStripMenuItem1, Nothing)
            Dim índice As Integer
            índice = ComboBox19.SelectedIndex
            ComboBox19.SelectedIndex = 0
            ComboBox19.SelectedIndex = índice
            TextBox287_KeyPress(AbrirToolStripMenuItem1, Nothing)
            índice = ComboBox15.SelectedIndex
            ComboBox15.SelectedIndex = 0
            ComboBox15.SelectedIndex = índice
            índice = ComboBox16.SelectedIndex
            ComboBox16.SelectedIndex = 0
            ComboBox16.SelectedIndex = índice
            TextBox265_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox288_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox289_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox278_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox279_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox282_KeyPress(AbrirToolStripMenuItem1, Nothing)
            OpenMode = False

        ElseIf Tipo = 7 Or Tipo = 11 Or Tipo = 13 Or Tipo = 16 Then

            OpenMode = True
            TextBox215N_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox216N_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox217N_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox218N_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox207_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox219_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox205_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox206_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox221_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox222_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox223_KeyPress(AbrirToolStripMenuItem1, Nothing)
            OpenMode = False

        ElseIf Tipo = 8 Then

            OpenMode = True
            textbox348_KeyPress(AbrirToolStripMenuItem1, Nothing)
            textbox347_KeyPress(AbrirToolStripMenuItem1, Nothing)
            textbox346_KeyPress(AbrirToolStripMenuItem1, Nothing)
            textbox345_KeyPress(AbrirToolStripMenuItem1, Nothing)
            textbox359_KeyPress(AbrirToolStripMenuItem1, Nothing)
            textbox354_KeyPress(AbrirToolStripMenuItem1, Nothing)
            textbox361_KeyPress(AbrirToolStripMenuItem1, Nothing)
            textbox360_KeyPress(AbrirToolStripMenuItem1, Nothing)
            textbox380_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox379_KeyPress_1(AbrirToolStripMenuItem1, Nothing)
            TextBox378_KeyPress_1(AbrirToolStripMenuItem1, Nothing)
            TextBox377_KeyPress_1(AbrirToolStripMenuItem1, Nothing)
            textbox373_KeyPress(AbrirToolStripMenuItem1, Nothing)
            textbox368_KeyPress(AbrirToolStripMenuItem1, Nothing)
            textbox375_KeyPress(AbrirToolStripMenuItem1, Nothing)
            textbox374_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox240_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox239_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox238_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox255_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox256_KeyPress(AbrirToolStripMenuItem1, Nothing)
            OpenMode = False

        ElseIf Tipo = 9 Then

            OpenMode = True
            TextBox260_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox259_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox258_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox257_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox267_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox263_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox268_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox274_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox273_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox272_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox271_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox284_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox281_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox277_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox264_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox285_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox286_KeyPress(AbrirToolStripMenuItem1, Nothing)
            OpenMode = False

        ElseIf Tipo = 14 Then

            OpenMode = True
            TextBox320_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox318_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox315_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox331_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox333_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox335_KeyPress(AbrirToolStripMenuItem1, Nothing)
            OpenMode = False

        ElseIf Tipo = 17 Or Tipo = 19 Then

            OpenMode = True
            TextBox227_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox229_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox244_KeyPress(AbrirToolStripMenuItem1, Nothing)
            If Tipo = 17 Then
                TextBox405_KeyPress(AbrirToolStripMenuItem1, Nothing)
                TextBox404_KeyPress(AbrirToolStripMenuItem1, Nothing)
                TextBox402_KeyPress(AbrirToolStripMenuItem1, Nothing)
            Else
                TextBox408_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If
            OpenMode = False

        ElseIf Tipo = 18 Or Tipo = 20 Then

            OpenMode = True
            TextBox245_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox251_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox340_KeyPress(AbrirToolStripMenuItem1, Nothing)
            TextBox389_KeyPress(AbrirToolStripMenuItem1, Nothing)
            If Tipo = 18 Then
                TextBox405_KeyPress(AbrirToolStripMenuItem1, Nothing)
                TextBox404_KeyPress(AbrirToolStripMenuItem1, Nothing)
                TextBox402_KeyPress(AbrirToolStripMenuItem1, Nothing)
                TextBox403_KeyPress(AbrirToolStripMenuItem1, Nothing)
                TextBox401_KeyPress(AbrirToolStripMenuItem1, Nothing)
            Else
                TextBox408_KeyPress(AbrirToolStripMenuItem1, Nothing)
                TextBox409_KeyPress(AbrirToolStripMenuItem1, Nothing)
            End If

            OpenMode = False

        End If

    End Sub

    Private Sub Button14N_Click_1(sender As Object, e As EventArgs) Handles Button14N.Click
        Button1.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        Button1.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False
        Button12N.BackColor = Color.Transparent
        Button13N.BackColor = Color.Transparent
        Button14N.BackColor = Color.CadetBlue
        Button19.BackColor = Color.Transparent
        Button20.BackColor = Color.Transparent
        Button12N.BackgroundImage = My.Resources.ICONOscbfPlacaSimple
        Button13N.BackgroundImage = My.Resources.ICONOscbfSoldada
        Button14N.BackgroundImage = My.Resources.ICONOebfEnlace_ILUMINADO
        Button19.BackgroundImage = My.Resources.ICONOtopePLsimp
        Button20.BackgroundImage = My.Resources.ICONOtopeSold

        'Groupboxes
        GroupBox177.Visible = True
        GroupBox178.Visible = False
        GroupBox179.Visible = False
        GroupBox176.Visible = True
        GroupBox179.Visible = False

        GroupBox181.Visible = True
        GroupBox182.Visible = True
        GroupBox180.Visible = True
        GroupBox180.Location = New System.Drawing.Point(272, 415)
        '----------------------------------------------------------
        'componentes del groupbox176                            '-
        '----------------------------------------------------------
        Label972.Visible = False                                '-
        TextBox292.Visible = False                              '-
        Label970.Visible = False                                '-
        Label973.Location = New System.Drawing.Point(31, 70)    '-
        TextBox290.Location = New System.Drawing.Point(120, 67) '-
        Label971.Location = New System.Drawing.Point(155, 69)   '-
        '----------------------------------------------------------

        GroupBox176.Text = "Cargas y longitud del enlace"

        GroupBox176.Location = New System.Drawing.Point(272, 290)

        PictureBox319.Image = My.Resources.ArriotreEnlace
        PictureBox323.Image = My.Resources.EBF2

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión Arriostre-Enlace"

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = False
        LabelDiseño.Text = "Conexión Arriostre-Enlace"

        'ToolTip2.SetToolTip(PictureBox323, "Para cambiar la configuración del marco, pulse sobre la imagen")
        'ToolTip2.IsBalloon = True
        'ToolTip2.ToolTipIcon = ToolTipIcon.Info
        'ToolTip2.ToolTipTitle = "Configuración del marco"
        'ToolTip2.AutoPopDelay = 5000


        Tipo = 14

    End Sub

    Private Sub Button13N_Click_1(sender As Object, e As EventArgs) Handles Button13N.Click

        Button1.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        Button1.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False
        Button12N.BackColor = Color.Transparent
        Button13N.BackColor = Color.CadetBlue
        Button14N.BackColor = Color.Transparent
        Button19.BackColor = Color.Transparent
        Button20.BackColor = Color.Transparent
        Button12N.BackgroundImage = My.Resources.ICONOscbfPlacaSimple
        Button13N.BackgroundImage = My.Resources.ICONOscbfSoldada_ILUMINADO
        Button14N.BackgroundImage = My.Resources.ICONOebfEnlace
        Button19.BackgroundImage = My.Resources.ICONOtopePLsimp
        Button20.BackgroundImage = My.Resources.ICONOtopeSold

        'Groupboxes
        GroupBox177.Visible = True
        GroupBox178.Visible = True
        GroupBox179.Visible = True
        GroupBox176.Visible = True
        GroupBox180.Visible = True

        GroupBox181.Visible = False
        GroupBox182.Visible = False
        'GroupBox183.Visible = False
        GroupBox180.Location = New System.Drawing.Point(272, 516)
        GroupBox176.Location = New System.Drawing.Point(272, 391)

        Label974.Text = "Viga Superior:"
        Label979.Text = "Viga Superior:"
        GroupBox176.Text = "Cargas y longitud de los enlaces"

        '----------------------------------------------------------
        'Componentes del groupbox176                            '-
        '----------------------------------------------------------
        Label972.Visible = True
        TextBox292.Visible = True
        Label970.Visible = True
        Label973.Location = New System.Drawing.Point(31, 60)    '-
        TextBox290.Location = New System.Drawing.Point(120, 57) '-
        Label971.Location = New System.Drawing.Point(155, 59)   '-
        '----------------------------------------------------------

        PictureBox319.Image = My.Resources.SolVCSCBF
        PictureBox323.Image = My.Resources.EBF1

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna Soldada (EBF)"

        'CAMBIO EN EL LABEL DE DISEÑO
        LabelDiseño.Visible = False
        LabelDiseño.Text = "Conexión Viga-Columna Soldada EBF"

        'cambio en las imagenes de diseño
        PictureBox214.Image = My.Resources.CargasBC7
        PictureBox221.Image = My.Resources.CargasGB7
        PictureBox225.Image = My.Resources.CargasGC7

        'cambio en la posición de los labels

        Label384.Location = New System.Drawing.Point(143, 115)
        Label385.Location = New System.Drawing.Point(118, 164)
        Label419.Location = New System.Drawing.Point(118, 100)
        Label418.Location = New System.Drawing.Point(182, 144)
        Label439.Location = New System.Drawing.Point(45, 181)
        Label438.Location = New System.Drawing.Point(56, 106)
        Label437.Location = New System.Drawing.Point(160, 116)
        Label436.Location = New System.Drawing.Point(200, 150)

        If TabControl1N.TabPages.Contains(TabPage9) = True And TabControl1N.TabPages.Contains(TabPage15) = True Then
            TabControl1N.TabPages.Remove(TabPage15)
        ElseIf TabControl1N.TabPages.Contains(TabPage15) = True And TabControl1N.TabPages.Contains(TabPage9) = False Then
            TabControl1N.TabPages.Remove(TabPage15)
            TabControl1N.TabPages.Insert(1, TabPage9)
        ElseIf TabControl1.TabPages.Contains(TabPage15) = False And TabControl1N.TabPages.Contains(TabPage9) = False Then
            TabControl1N.TabPages.Insert(1, TabPage9)
        End If

        'ToolTip2.SetToolTip(PictureBox323, "Para cambiar la configuración del marco, pulse sobre la imagen")
        'ToolTip2.IsBalloon = True
        'ToolTip2.ToolTipIcon = ToolTipIcon.Info
        'ToolTip2.ToolTipTitle = "Configuración del marco"
        'ToolTip2.AutoPopDelay = 5000

        Tipo = 13

    End Sub

    Private Sub Button12N_Click_1(sender As Object, e As EventArgs) Handles Button12N.Click

        Button1.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False
        Button12N.BackColor = Color.CadetBlue
        Button13N.BackColor = Color.Transparent
        Button14N.BackColor = Color.Transparent
        Button19.BackColor = Color.Transparent
        Button20.BackColor = Color.Transparent
        Button12N.BackgroundImage = My.Resources.ICONOscbfPlacaSimple_ILUMINADO
        Button13N.BackgroundImage = My.Resources.ICONOscbfSoldada
        Button14N.BackgroundImage = My.Resources.ICONOebfEnlace
        Button19.BackgroundImage = My.Resources.ICONOtopePLsimp
        Button20.BackgroundImage = My.Resources.ICONOtopeSold

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'Groupboxes
        GroupBox177.Visible = True
        GroupBox178.Visible = True
        GroupBox179.Visible = True
        GroupBox176.Visible = True
        GroupBox180.Visible = True

        GroupBox181.Visible = False
        GroupBox182.Visible = False
        GroupBox180.Location = New System.Drawing.Point(272, 516)
        GroupBox176.Location = New System.Drawing.Point(272, 391)

        '----------------------------------------------------------
        'Componentes del groupbox176                            '-
        '----------------------------------------------------------
        Label972.Visible = True
        TextBox292.Visible = True
        Label970.Visible = True
        Label973.Location = New System.Drawing.Point(31, 60)    '-
        TextBox290.Location = New System.Drawing.Point(120, 57) '-
        Label971.Location = New System.Drawing.Point(155, 59)   '-
        '----------------------------------------------------------

        GroupBox176.Text = "Cargas y longitud de los enlaces"
        Label974.Text = "Viga Superior:"
        Label979.Text = "Viga Superior:"

        PictureBox319.Image = My.Resources.PSVCSCBF
        PictureBox323.Image = My.Resources.EBF1

        'CAMBIO EN EL PROGRESSBAR
        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna Empernada (EBF)"
        LabelDiseño.Text = "Conexión Viga-Columna empernada EBF"

        'cambio imagenes diseño

        PictureBox316.Image = My.Resources.PSGC
        PictureBox312.Image = My.Resources.CargasGC6
        PictureBox327.Image = My.Resources.PSBC
        PictureBox320.Image = My.Resources.CargasBC6
        PictureBox332.Image = My.Resources.CargasGB6
        PictureBox337.Image = My.Resources.CargasPS

        'cambio posición de labels

        Label946.Location = New System.Drawing.Point(246, 400)
        Label947.Location = New System.Drawing.Point(379, 361)
        Label917.Location = New System.Drawing.Point(206, 143)
        Label916.Location = New System.Drawing.Point(132, 101)
        Label941.Location = New System.Drawing.Point(71, 183)

        If TabControl1N.TabPages.Contains(TabPage9) = True And TabControl1N.TabPages.Contains(TabPage15) = True Then
            TabControl1N.TabPages.Remove(TabPage9)
        ElseIf TabControl1N.TabPages.Contains(TabPage9) = True And TabControl1N.TabPages.Contains(TabPage15) = False Then
            TabControl1N.TabPages.Remove(TabPage9)
            TabControl1N.TabPages.Insert(1, TabPage15)
        ElseIf TabControl1N.TabPages.Contains(TabPage9) = False And TabControl1N.TabPages.Contains(TabPage15) = False Then
            TabControl1N.TabPages.Insert(1, TabPage15)
        End If


        'ToolTip2.SetToolTip(PictureBox323, "Para cambiar la configuración del marco, pulse sobre la imagen")
        'ToolTip2.IsBalloon = True
        'ToolTip2.ToolTipIcon = ToolTipIcon.Info
        'ToolTip2.ToolTipTitle = "Configuración del marco"
        'ToolTip2.AutoPopDelay = 5000

        Tipo = 12

    End Sub

    Private Sub Button19_Click(sender As Object, e As EventArgs) Handles Button19.Click
        Button1.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False
        Button12N.BackColor = Color.Transparent
        Button13N.BackColor = Color.Transparent
        Button14N.BackColor = Color.Transparent
        Button19.BackColor = Color.CadetBlue
        Button20.BackColor = Color.Transparent
        Button12N.BackgroundImage = My.Resources.ICONOscbfPlacaSimple
        Button13N.BackgroundImage = My.Resources.ICONOscbfSoldada
        Button14N.BackgroundImage = My.Resources.ICONOebfEnlace
        Button19.BackgroundImage = My.Resources.ICONOtopePLsimp_ILUMINADO
        Button20.BackgroundImage = My.Resources.ICONOtopeSold
        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'Groupboxes
        GroupBox177.Visible = True
        GroupBox178.Visible = True
        GroupBox179.Visible = True
        GroupBox176.Visible = True
        GroupBox180.Visible = True

        GroupBox181.Visible = False
        GroupBox182.Visible = False
        'GroupBox183.Visible = False
        GroupBox180.Location = New System.Drawing.Point(272, 516)
        GroupBox176.Location = New System.Drawing.Point(272, 391)

        Label974.Text = "Viga Inferior:"
        Label979.Text = "Viga Inferior:"
        GroupBox176.Text = "Cargas y longitud del enlace"
        '----------------------------------------------------------
        'componentes del groupbox176                            '-
        '----------------------------------------------------------
        Label972.Visible = False                                '-
        TextBox292.Visible = False                              '-
        Label970.Visible = False                                '-
        Label973.Location = New System.Drawing.Point(31, 70)    '-
        TextBox290.Location = New System.Drawing.Point(120, 67) '-
        Label971.Location = New System.Drawing.Point(155, 69)   '-
        '----------------------------------------------------------

        PictureBox319.Image = My.Resources.BCBolted
        PictureBox323.Image = My.Resources.EBF3

        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna Empernada (EBF, Tope)"
        LabelDiseño.Text = "Conexión Viga-Columna empernada Tope EBF"

        'Cambio en las imágenes de diseño
        PictureBox312.Image = My.Resources.CargasGC6i
        PictureBox320.Image = My.Resources.CargasBC6i
        PictureBox332.Image = My.Resources.CargasGB6i
        PictureBox337.Image = My.Resources.CargasPSi

        'cambio de lugar en los labels
        Label946.Location = New System.Drawing.Point(240, 317)
        Label947.Location = New System.Drawing.Point(373, 278)
        Label917.Location = New System.Drawing.Point(215, 117)
        Label941.Location = New System.Drawing.Point(74, 146)
        Label916.Location = New System.Drawing.Point(137, 70)

        If TabControl1N.TabPages.Contains(TabPage9) = True And TabControl1N.TabPages.Contains(TabPage15) = True Then
            TabControl1N.TabPages.Remove(TabPage9)
        ElseIf TabControl1N.TabPages.Contains(TabPage9) = True And TabControl1N.TabPages.Contains(TabPage15) = False Then
            TabControl1N.TabPages.Remove(TabPage9)
            TabControl1N.TabPages.Insert(1, TabPage15)
        ElseIf TabControl1N.TabPages.Contains(TabPage9) = False And TabControl1N.TabPages.Contains(TabPage15) = False Then
            TabControl1N.TabPages.Insert(1, TabPage15)
        End If

        Tipo = 15

    End Sub

    Private Sub Button20_Click(sender As Object, e As EventArgs) Handles Button20.Click
        Button1.Enabled = False
        Button2.Enabled = False
        Button15.Enabled = False
        Button12N.BackColor = Color.Transparent
        Button13N.BackColor = Color.Transparent
        Button14N.BackColor = Color.Transparent
        Button19.BackColor = Color.Transparent
        Button20.BackColor = Color.CadetBlue
        Button12N.BackgroundImage = My.Resources.ICONOscbfPlacaSimple
        Button13N.BackgroundImage = My.Resources.ICONOscbfSoldada
        Button14N.BackgroundImage = My.Resources.ICONOebfEnlace
        Button19.BackgroundImage = My.Resources.ICONOtopePLsimp
        Button20.BackgroundImage = My.Resources.ICONOtopeSold_ILUMINADO

        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        'Groupboxes
        GroupBox177.Visible = True
        GroupBox178.Visible = True
        GroupBox179.Visible = True
        GroupBox176.Visible = True
        GroupBox180.Visible = True

        GroupBox181.Visible = False
        GroupBox182.Visible = False
        GroupBox180.Location = New System.Drawing.Point(272, 516)
        GroupBox176.Location = New System.Drawing.Point(272, 391)

        Label974.Text = "Viga Inferior:"
        Label979.Text = "Viga Inferior:"
        GroupBox176.Text = "Cargas y longitud del enlace"

        '----------------------------------------------------------
        'componentes del groupbox176                            '-
        '----------------------------------------------------------
        Label972.Visible = False                                '-
        TextBox292.Visible = False                              '-
        Label970.Visible = False                                '-
        Label973.Location = New System.Drawing.Point(31, 70)    '-
        TextBox290.Location = New System.Drawing.Point(120, 67) '-
        Label971.Location = New System.Drawing.Point(155, 69)   '-
        '----------------------------------------------------------

        PictureBox319.Image = My.Resources.BCWelded
        PictureBox323.Image = My.Resources.EBF3

        'CAMBIO EN EL PROGRESSBAR

        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna Soldada (EBF, Tope)"
        LabelDiseño.Text = "Conexión Viga-Columna soldada Tope EBF"

        'cambio en las imagenes de diseño
        PictureBox214.Image = My.Resources.CargasBC7i
        PictureBox221.Image = My.Resources.CargasGB7i
        PictureBox225.Image = My.Resources.CargasGC7i

        'cambio en la posición de los labels

        Label384.Location = New System.Drawing.Point(137, 46)
        Label385.Location = New System.Drawing.Point(227, 91)
        Label419.Location = New System.Drawing.Point(118, 65)
        Label418.Location = New System.Drawing.Point(187, 119)
        Label439.Location = New System.Drawing.Point(51, 146)
        Label438.Location = New System.Drawing.Point(71, 144)
        Label437.Location = New System.Drawing.Point(158, 144)
        Label436.Location = New System.Drawing.Point(201, 185)

        If TabControl1N.TabPages.Contains(TabPage9) = True And TabControl1N.TabPages.Contains(TabPage15) = True Then
            TabControl1N.TabPages.Remove(TabPage15)
        ElseIf TabControl1N.TabPages.Contains(TabPage15) = True And TabControl1N.TabPages.Contains(TabPage9) = False Then
            TabControl1N.TabPages.Remove(TabPage15)
            TabControl1N.TabPages.Insert(1, TabPage9)
        ElseIf TabControl1.TabPages.Contains(TabPage15) = False And TabControl1N.TabPages.Contains(TabPage9) = False Then
            TabControl1N.TabPages.Insert(1, TabPage9)
        End If

        Tipo = 16

    End Sub

    Private Sub Button23_Click(sender As Object, e As EventArgs) Handles Button23.Click
        labelStatusBar1.Text = "Secciones de patín ancho y redondos, sistema imperial"
        'SeccBR.ShowDialog()
        Perfiles.ShowDialog()
    End Sub

    Private Sub Button24_Click(sender As Object, e As EventArgs) Handles Button24.Click
        labelStatusBar1.Text = "Aceros según la designación ASTM"
        'BRAcero.ShowDialog()
        Steel.ShowDialog()
    End Sub

    Private Sub Button22_Click(sender As Object, e As EventArgs) Handles Button22.Click

        labelStatusBar1.Text = "Cargas en los miembros del marco y el nodo de la conexión"

        If Tipo <> 14 And Perfiles.Abierto = False Then
            MsgBox("Antes de asignar las cargas, es necesario especificar los perfiles de los miembros a conectar.", MsgBoxStyle.Exclamation, "Advertencia")
        ElseIf Tipo <> 14 And Steel.Abierto = False Then
            MsgBox("Antes de asignar las cargas, es necesario especificar el tipo de acero de los miembros a conectar.", MsgBoxStyle.Exclamation, "Advertencia")
        ElseIf Tipo <> 14 And Perfiles.Abierto = True And Steel.Abierto = True Then
            CargasEBF2.ShowDialog()
        End If

        If Tipo = 14 And Perfiles2.Abierto = False Then
            MsgBox("Antes de asignar las cargas, es necesario especificar los perfiles de los miembros a conectar.", MsgBoxStyle.Exclamation, "Advertencia")
        ElseIf Tipo = 14 And Perfiles2.Abierto = False Then
            MsgBox("Antes de asignar las cargas, es necesario especificar el tipo de acero de los miembros a conectar.", MsgBoxStyle.Exclamation, "Advertencia")
        ElseIf Tipo = 14 And Perfiles2.Abierto = True And Steel2.Abierto = True Then
            CargasEBF2.ShowDialog()
        End If

    End Sub

    Public Sub LongInclArriostres(LBMTextbox As TextBox, SHFTextbox As TextBox, SHF2Textbox As TextBox)

        Dim Lmenosarr, Lmenosarr2, LbrT, Lbr2T, ángulo1, ángulo2 As Double

        ángulo1 = theta
        ángulo2 = theta2

        If OpcionesDiseño.LthetaBr = 1 Then

            If Lbr <> 0 And (Tipo <> 10 And Tipo <> 11) And (Sistema = "SCBF") Then
                If Tipo = 9 Then
                    Lmenosarr = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - ángulo1)) / 12 + (Darr + 2) / 12, 2)
                Else
                    Lmenosarr = Math.Round(db / 12 + dc / 24, 2)
                End If
                LbrT = Math.Round(Lbr + 2 * Lmenosarr + 0.5, 2)
                SHF = Math.Round(LbrT * Math.Cos(ángulo1), 2)
                If Math.Abs(Val(SHFTextbox.Text) - SHF) < 0.09 Then
                    SHF = Val(SHFTextbox.Text)
                End If
                LBM = Math.Round(2 * Math.Sqrt(LbrT ^ 2 - SHF ^ 2), 2)
                If Math.Abs(Val(LBMTextbox.Text) - LBM) < 0.09 Then
                    LBM = Val(LBMTextbox.Text)
                End If
                LBMTextbox.Text = LBM.ToString
                SHFTextbox.Text = SHF.ToString
            End If

            If Lbr2 <> 0 And (Sistema <> "EBF") Then
                If Tipo = 9 Then
                    Lmenosarr2 = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - ángulo2)) / 12 + (Darr2 + 2) / 12, 2)
                Else
                    Lmenosarr2 = Math.Round(db / 12 + dc / 24, 2)
                End If
                Lbr2T = Math.Round(Lbr2 + 2 * Lmenosarr2 + 0.5, 2)
                SHF2 = Math.Round(Lbr2T * Math.Cos(ángulo2), 2)
                If Math.Abs(Val(SHF2Textbox.Text) - SHF2) < 0.09 Then
                    SHF2 = Val(SHF2Textbox.Text)
                End If
                If LBM = 0 Then
                    LBM = Math.Round(2 * Math.Sqrt(Lbr2T ^ 2 - SHF2 ^ 2), 2)
                Else
                    Dim Lbm2 As Double
                    Lbm2 = Math.Round(2 * Lbr2T * Math.Sin(ángulo2), 2)
                    If Math.Abs(Lbm2 - LBM) > 0.09 Then
                        Lbr2T = Math.Round(LBM / 2 / Math.Sin(ángulo2), 2)
                        Lbr2 = Lbr2T - 2 * Lmenosarr2 + 0.5
                        MsgBox("ADCAS ajustó la longitud de los arriostres inferiores porque su ángulo no coincide con un claro de viga determinado a partir de los arriostres superiores. Aún puede modificar los valores a conveniencia en las Opciones de Diseño.", MsgBoxStyle.Information, "Dato faltante")
                    End If
                End If
                LBMTextbox.Text = LBM.ToString
                SHF2Textbox.Text = SHF2.ToString
            End If

            If Lbr <> 0 And (Tipo = 12 Or Tipo = 13) Then

                Lmenosarr = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - ángulo1)) / 12 + (Darr + 2) / 12, 2)
                LbrT = Lbr + 2 * Lmenosarr + 0.5
                SHF = Math.Round(LbrT * Math.Cos(ángulo1), 2)
                If Math.Abs(Val(SHFTextbox.Text) - SHF) < 0.09 Then
                    SHF = Val(SHFTextbox.Text)
                End If
                LBM = Math.Round(Math.Sqrt(LbrT ^ 2 - SHF ^ 2) + Val(TextBox292.Text) / 12, 2)
                If Math.Abs(Val(LBMTextbox.Text) - LBM) < 0.09 Then
                    LBM = Val(LBMTextbox.Text)
                End If
                LBMTextbox.Text = LBM.ToString
                SHFTextbox.Text = SHF.ToString

            ElseIf Lbr2 <> 0 And (Tipo = 15 Or Tipo = 16) Then

                Lmenosarr = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - ángulo2)) / 12 + (Darr + 2) / 12, 2)
                Lbr2T = Lbr2 + 2 * Lmenosarr + 0.5
                SHF = Math.Round(Lbr2T * Math.Cos(ángulo2), 2)
                If Math.Abs(Val(SHFTextbox.Text) - SHF) < 0.09 Then
                    SHF = Val(SHFTextbox.Text)
                End If
                LBM = Math.Round(2 * Math.Sqrt(Lbr2T ^ 2 - SHF ^ 2) + Val(TextBox292.Text) / 12, 2)
                If Math.Abs(Val(LBMTextbox.Text) - LBM) < 0.09 Then
                    LBM = Val(LBMTextbox.Text)
                End If
                LBMTextbox.Text = LBM.ToString
                SHFTextbox.Text = SHF.ToString

            ElseIf Lbr2 <> 0 And Tipo = 14 Then

                Lmenosarr = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - ángulo2)) / 12 + (Darr + 2) / 12, 2)
                Lbr2T = Lbr2 + 2 * Lmenosarr + 0.5
                LBM = Math.Round(Math.Sqrt(Lbr2T ^ 2 - (Lbr2T * Math.Cos(ángulo2)) ^ 2) + Val(TextBox290.Text) / 12, 2)
                SHF = Math.Round(Math.Sqrt(Lbr2T ^ 2 - (Lbr2T * Math.Sin(ángulo2)) ^ 2), 2)
                LBMTextbox.Text = LBM.ToString
                SHFTextbox.Text = SHF.ToString

            End If

        End If

    End Sub

    Private Sub TextBox208N_TextChanged(sender As Object, e As EventArgs) Handles TextBox208N.TextChanged
    End Sub

    Private Sub TextBox210_TextChanged(sender As Object, e As EventArgs) Handles TextBox210.TextChanged

    End Sub

    Private Sub TextBox211_TextChanged(sender As Object, e As EventArgs) Handles TextBox211.TextChanged
        LongInclArriostres(TextBox211N, TextBox212N, TextBox213N)
    End Sub

    Private Sub TextBox204N_TextChanged(sender As Object, e As EventArgs) Handles TextBox204N.TextChanged
        LongInclArriostres(TextBox211N, TextBox212N, TextBox213N)
    End Sub

    Private Sub TextBox305_TextChanged(sender As Object, e As EventArgs) Handles TextBox305.TextChanged
        LongInclArriostres(TextBox203, TextBox304, TextBox304)
    End Sub

    Private Sub MinWeldSize(thickness1 As Double, thickness2 As Double)
        Dim thickness As Double
        thickness = Math.Min(thickness1, thickness2)
        If 0.75 < thickness Then
            Dmínreq = 5
        ElseIf 0.5 < thickness <= 0.75 Then
            Dmínreq = 4
        ElseIf 0.5 >= thickness > 0.25 Then
            Dmínreq = 3
        ElseIf thickness >= 0.25 Then
            Dmínreq = 2
        End If
    End Sub

    Private Sub Button25_Click(sender As Object, e As EventArgs) Handles Button25.Click
        labelStatusBar1.Text = "Secciones de patín ancho y redondos, sistema imperial"
        'SeccBR2.ShowDialog()
        Perfiles2.ShowDialog()
    End Sub

    Private Sub TextBox290_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox290.KeyPress

        SoloNumFrac(TextBox290, e)

        If Asc(e.KeyChar) = 13 Then
            If Tipo = 12 Or Tipo = 13 Then

                If Val(TextBox290.Text) > mínLnkLngth Then
                    TextBox290.BackColor = Color.Red
                Else
                    TextBox290.BackColor = Color.White
                End If

                TextBox292.Focus()

            ElseIf Tipo = 14 Or Tipo = 15 Or Tipo = 16 Then

                If Tipo = 14 And Val(TextBox290.Text) > mínLnkLngth2 Then
                    TextBox290.BackColor = Color.Red
                Else
                    TextBox290.BackColor = Color.White
                End If
                If (Tipo = 15 Or Tipo = 16) And Val(TextBox290.Text) > mínLnkLngth2 Then
                    TextBox290.BackColor = Color.Red
                Else
                    TextBox290.BackColor = Color.White
                End If

                TextBox303.Focus()

            End If

        End If
    End Sub

    Private Sub TextBox292_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox292.KeyPress
        SoloNumFrac(TextBox292, e)
        If Asc(e.KeyChar) = 13 Then

            If Val(TextBox292.Text) > mínLnkLngth2 Then
                TextBox292.BackColor = Color.Red
            Else
                TextBox292.BackColor = Color.White
            End If

            TextBox303.Focus()

        End If
    End Sub

    Private Sub TextBox303_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox303.KeyPress
        SoloNumFrac(TextBox303, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox304.Focus()
        End If
    End Sub

    Private Sub TextBox304_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox304.KeyPress
        SoloNumFrac(TextBox304, e)
        If TextBox303.Text <> String.Empty And TextBox304.Text <> String.Empty Then

        End If
    End Sub

    Private Sub Button26_Click(sender As Object, e As EventArgs) Handles Button26.Click
        labelStatusBar1.Text = "Aceros según la designación ASTM"
        'BRAcero2.ShowDialog()
        Steel2.ShowDialog()
    End Sub

    Private Sub MiembroDúctilEBF()

        Dim b As Double

        Dim arriostretextbox As TextBox

        If Tipo = 14 Then
            arriostretextbox = TextBox305
        Else
            arriostretextbox = TextBox297
        End If

        '   HDBR significa que es moderadamente dúctil

        If arriostretextbox.Text.Contains(".") Or arriostretextbox.Text.Contains("Pipe") Then


            If Darr / tbrdes < 0.044 * 29000 / Fybr Then
                HDBR = True
            Else
                HDBR = False
            End If

        Else

            b = Darr - 2 * tbrnom

            If b / tbrdes < 0.64 * Math.Sqrt(29000 / Fybr) Then
                HDBR = True
            Else
                HDBR = False
            End If

        End If

        If Tipo <> 14 Then

            '   Columna

            b = bcf / 2

            '   HDCL significa que es altamente dúctil

            If b / tcf < 0.3 * Math.Sqrt(29000 / Fyc) Then
                HDCL = True
            Else
                HDCL = False
            End If

            'Revisión si la viga cumple el requerimiento de sección altamente dúctil

            If Tipo = 12 Or Tipo = 13 Then

                b = bbf / 2

                If b / tbf < 0.3 * Math.Sqrt(29000 / Fyb) Then
                    MDBM = True
                Else
                    MDBM = False
                End If

                b = bbf2 / 2

                If b / tbf2 < 0.3 * Math.Sqrt(29000 / Fyb2) Then
                    HDBR2 = True
                Else
                    HDBR2 = False
                End If
            Else

                b = bbf / 2
                If b / tbf < 0.38 * Math.Sqrt(29000 / Fyb) Then
                    MDBM = True
                Else
                    MDBM = False
                End If

                b = bbf2 / 2

                If b / tbf2 < 0.3 * Math.Sqrt(29000 / Fyb2) Then
                    HDBR2 = True
                Else
                    HDBR2 = False
                End If

            End If

        Else

            b = bbf / 2

            If b / tbf < 0.3 * Math.Sqrt(29000 / Fyb) Then
                MDBM = True
            Else
                MDBM = False
            End If

        End If

    End Sub

    Private Sub CargasEBFproc()

        If OpcionesDiseño.LthetaBr = 0 Then

            Dim Lmenosarr, Lmenosarr2, LbrT, Lbr2T As Double

            If Lbr = 0 And (Tipo = 12 Or Tipo = 13) Then

                Lmenosarr = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - theta)) / 12 + (Darr + 2) / 12, 2)
                LbrT = Math.Round(Math.Sqrt((LBM - Val(TextBox292.Text) / 12) ^ 2 + Val(TextBox304.Text) ^ 2), 2)
                Lbr = LbrT - 2 * Lmenosarr - 0.5

            ElseIf Lbr2 = 0 And (Tipo = 15 Or Tipo = 16) Then

                Lmenosarr2 = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - theta2)) / 12 + (Darr2 + 2) / 12, 2)

                Lbr2T = Math.Round(Math.Sqrt(((LBM - Val(TextBox290.Text)) / 2) ^ 2 + Val(TextBox304.Text) ^ 2), 2)

                Lbr2 = Lbr2T - 2 * Lmenosarr2 - 0.5

            ElseIf Lbr2 = 0 And Tipo = 14 Then

                Lmenosarr2 = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - theta2)) / 12 + (Darr + 2) / 12, 2)

                Lbr2T = Math.Round(Math.Sqrt((LBM - Val(TextBox290.Text)) ^ 2 + Val(TextBox304.Text) ^ 2), 2)

                Lbr2 = Lbr2T - 2 * Lmenosarr2 - 0.5

            End If

        End If

        Dim Pbrt1, Pbrt2, Vbrt1, Vbrt2, Vbmt1, Vbmt2, St1, St2, Pbmt1, Pbmt2 As Double
        Dim Pbrc1, Pbrc2, Vbrc1, Vbrc2, Vbmc1, Vbmc2, Sc1, Sc2, Pbmc1, Pbmc2 As Double
        Dim Mbrt, Mbrc As Double

        If Tipo = 12 Or Tipo = 13 Then
            'ARRIOSTRE A TENSIÓN
            '   CONDICIÓN1

            Pbrt1 = Math.Round(1.4 * Val(CargasEBF2.TextBox4.Text) + 0.5 * Val(CargasEBF2.TextBox5.Text) + Srr2 * Val(CargasEBF2.TextBox6.Text), 2)
            Vbrt1 = Math.Round(1.4 * Val(CargasEBF2.TextBox1.Text) + 0.5 * Val(CargasEBF2.TextBox2.Text) + Srr2 * Val(CargasEBF2.TextBox3.Text), 2)
            Vbmt1 = Math.Round(1.4 * Val(CargasEBF2.TextBox10.Text) + 0.5 * Val(CargasEBF2.TextBox11.Text) + Srr * Val(CargasEBF2.TextBox12.Text), 2)
            Pbmt1 = -Math.Round(1.4 * Val(CargasEBF2.TextBox13.Text) + 0.5 * Val(CargasEBF2.TextBox14.Text) + Srr * Val(CargasEBF2.TextBox15.Text), 2)

            St1 = Math.Round(Math.Sin(theta) * Pbrt1 + Math.Cos(theta) * Vbrt1 + Pbmt1, 2)

            'ARRIOSTRE A TENSIÓN
            '   CONDICIÓN2

            Pbmt2 = Pbmt1
            Vbrt2 = 0
            Vbmt2 = Vbmt1
            St2 = 2 * Val(CargasEBF2.TextBox28.Text)

            Pbrt2 = -Math.Round((Pbmt2 + St2) / Math.Sin(theta), 2)

            'ARRIOSTRE A COMPRESIÓN
            '   CONDICIÓN1

            Pbrc1 = -Math.Round(1.4 * Val(CargasEBF2.TextBox32.Text) + 0.5 * Val(CargasEBF2.TextBox33.Text) + Srr2 * Val(CargasEBF2.TextBox34.Text), 2)
            Vbrc1 = Math.Round(1.4 * Val(CargasEBF2.TextBox29.Text) + 0.5 * Val(CargasEBF2.TextBox30.Text) + Srr2 * Val(CargasEBF2.TextBox31.Text), 2)
            Vbmc1 = Math.Round(1.4 * Val(CargasEBF2.TextBox38.Text) + 0.5 * Val(CargasEBF2.TextBox39.Text) + Srr * Val(CargasEBF2.TextBox40.Text), 2)
            Pbmc1 = Math.Round(1.4 * Val(CargasEBF2.TextBox41.Text) + 0.5 * Val(CargasEBF2.TextBox42.Text) + Srr * Val(CargasEBF2.TextBox43.Text), 2)

            Sc1 = Math.Round(Math.Sin(theta) * Pbrt2 + Math.Cos(theta) * Vbrt2 + Pbmt2, 2)

            'ARRIOSTRE A COMPRESIÓN
            '   CONDICIÓN2

            Pbmc2 = Pbmc1
            Vbrc2 = 0
            Vbmc2 = Vbmc1
            Sc2 = 2 * Val(CargasEBF2.TextBox56.Text)

            Pbrc2 = Math.Round((Pbmc2 + St2) / Math.Sin(theta), 2)

            Tu = Math.Max(Pbrt1, Pbrt2)
            Pu = Math.Max(Pbrc1, Pbrc2)

            If Tu = Pbrt1 Then
                Ast1a = St1
            Else
                Ast1a = St2
            End If

            Vubm = Vbmt1
            Vubm2 = Vbmc1

            If Pu = Pbrc1 Then
                Ast2a = Sc1
            Else
                Ast2a = Sc2
            End If

        ElseIf Tipo = 15 Or Tipo = 16 Then

            'ARRIOSTRE A TENSIÓN
            '   CONDICIÓN1

            Pbrt1 = Math.Round(1.4 * Val(CargasEBF2.TextBox4.Text) + 0.5 * Val(CargasEBF2.TextBox5.Text) + Srr2 * Val(CargasEBF2.TextBox6.Text), 2)
            Vbrt1 = Math.Round(1.4 * Val(CargasEBF2.TextBox1.Text) + 0.5 * Val(CargasEBF2.TextBox2.Text) + Srr2 * Val(CargasEBF2.TextBox3.Text), 2)
            Vbmt1 = Math.Round(1.4 * Val(CargasEBF2.TextBox10.Text) + 0.5 * Val(CargasEBF2.TextBox11.Text) + 1.3 * Val(CargasEBF2.TextBox12.Text), 2)
            Pbmt1 = -Math.Round(1.4 * Val(CargasEBF2.TextBox13.Text) + 0.5 * Val(CargasEBF2.TextBox14.Text) + 1.3 * Val(CargasEBF2.TextBox15.Text), 2)

            St1 = Math.Round(Math.Sin(theta) * Pbrt1 + Math.Cos(theta) * Vbrt1 + Pbmt1, 2)

            'ARRIOSTRE A TENSIÓN
            '   CONDICIÓN2

            Pbmt2 = Pbmt1
            Vbrt2 = 0
            Vbmt2 = Vbmt1
            St2 = 2 * Val(CargasEBF2.TextBox28.Text)

            Pbrt2 = Math.Round((Pbmt2 + St2) / Math.Sin(theta2), 2)

            'ARRIOSTRE A COMPRESIÓN
            '   CONDICIÓN1

            Pbrc1 = -Math.Round(1.4 * Val(CargasEBF2.TextBox32.Text) + 0.5 * Val(CargasEBF2.TextBox33.Text) + Srr2 * Val(CargasEBF2.TextBox34.Text), 2)
            Vbrc1 = Math.Round(1.4 * Val(CargasEBF2.TextBox29.Text) + 0.5 * Val(CargasEBF2.TextBox30.Text) + Srr2 * Val(CargasEBF2.TextBox31.Text), 2)
            Vbmc1 = Math.Round(1.4 * Val(CargasEBF2.TextBox38.Text) + 0.5 * Val(CargasEBF2.TextBox39.Text) + 1.3 * Val(CargasEBF2.TextBox40.Text), 2)
            Pbmc1 = Math.Round(1.4 * Val(CargasEBF2.TextBox41.Text) + 0.5 * Val(CargasEBF2.TextBox42.Text) + 1.3 * Val(CargasEBF2.TextBox43.Text), 2)

            Sc1 = Math.Round(Math.Sin(theta) * Pbrt2 + Math.Cos(theta) * Vbrt2 + Pbmt2, 2)

            'ARRIOSTRE A COMPRESIÓN
            '   CONDICIÓN2

            Pbmc2 = Pbmc1
            Vbrc2 = 0
            Vbmc2 = Vbmc1
            Sc2 = 2 * Val(CargasEBF2.TextBox56.Text)

            Pbrc2 = Math.Round((Pbmc2 + St2) / Math.Sin(theta2), 2)

            Tu = Math.Max(Pbrt1, Pbrt2)
            Pu = Math.Max(Pbrc1, Pbrc2)

            If Tu = Pbrt1 Then
                Ast1a = St1
            Else
                Ast1a = St2
            End If

            Vubm = Vbmt1
            Vubm2 = Vbmc1

            If Pu = Pbrc1 Then
                Ast2a = Sc1
            Else
                Ast2a = Sc2
            End If

        ElseIf Tipo = 14 Then

            Tu = Math.Round(1.4 * Val(CargasEBF2.TextBox4.Text) + 0.5 * Val(CargasEBF2.TextBox5.Text) + Srr * Val(CargasEBF2.TextBox6.Text), 2)
            Pu = Math.Round(1.4 * Val(CargasEBF2.TextBox32.Text) + 0.5 * Val(CargasEBF2.TextBox33.Text) + Srr * Val(CargasEBF2.TextBox34.Text), 2)

            Mbrt = Math.Round(1.4 * Val(CargasEBF2.TextBox7.Text) + 0.5 * Val(CargasEBF2.TextBox8.Text) + Srr * Val(CargasEBF2.TextBox9.Text), 2)
            Mbrc = Math.Round(1.4 * Val(CargasEBF2.TextBox35.Text) + 0.5 * Val(CargasEBF2.TextBox36.Text) + Srr * Val(CargasEBF2.TextBox37.Text), 2)

            Vbrt1 = Math.Round(1.4 * Val(CargasEBF2.TextBox1.Text) + 0.5 * Val(CargasEBF2.TextBox2.Text) + Srr * Val(CargasEBF2.TextBox3.Text), 2)
            Vbrc1 = Math.Round(1.4 * Val(CargasEBF2.TextBox29.Text) + 0.5 * Val(CargasEBF2.TextBox30.Text) + Srr * Val(CargasEBF2.TextBox31.Text), 2)

            If Tu > Pu Then
                Mubr = Mbrt
                Vubr = Vbrt1
            Else
                Mubr = Mbrc
                Vubr = Vbrc1
            End If

        End If

        VnBM = 0.6 * Fyb * (db * tbw)

    End Sub

    Private Sub LbrThetaEBF()

        OpcionesDiseño.CheckBox9.Checked = False
        OpcionesDiseño.LthetaBr = 0
        ThetaRevEBF()
        Dim Lmenosarr, Lmenosarr2, LbrT, Lbr2T As Double

        If TextBox303.Text <> String.Empty And TextBox304.Text <> String.Empty Then
            If (Tipo = 12 Or Tipo = 13) Then

                LBM = Val(TextBox303.Text)
                Lmenosarr = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - theta)) / 12 + (Darr + 2) / 12, 2)
                LbrT = Math.Round(Math.Sqrt((LBM - Val(TextBox292.Text) / 12) ^ 2 + Val(TextBox304.Text) ^ 2), 2)
                Lbr = LbrT - 2 * Lmenosarr - 0.5

            ElseIf (Tipo = 15 Or Tipo = 16) Then

                LBM = Val(TextBox303.Text)
                Lmenosarr2 = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - theta2)) / 12 + (Darr + 2) / 12, 2)
                Lbr2T = Math.Round(Math.Sqrt((((LBM - Val(TextBox292.Text) / 12)) / 2) ^ 2 + Val(TextBox304.Text) ^ 2), 2)
                Lbr2 = Lbr2T - 2 * Lmenosarr2 - 0.5

            ElseIf Tipo = 14 Then

                LBM = Val(TextBox303.Text)
                Lmenosarr = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - theta2)) / 12 + (Darr + 2) / 12, 2)
                LbrT = Math.Round(Math.Sqrt((LBM - Val(TextBox292.Text) / 12) ^ 2 + Val(TextBox304.Text) ^ 2), 2)
                Lbr = LbrT - 2 * Lmenosarr - 0.5

            End If
        End If

    End Sub

    Private Sub TextBox303_TextChanged(sender As Object, e As EventArgs) Handles TextBox303.TextChanged
        LbrThetaEBF()
    End Sub

    Private Sub TextBox304_TextChanged(sender As Object, e As EventArgs) Handles TextBox304.TextChanged
        LbrThetaEBF()
    End Sub

    Private Sub ThetaRevEBF()

        If Tipo = 12 Or Tipo = 13 Then

            theta = Math.Atan((Val(TextBox303.Text) - Val(TextBox290.Text) / 12) / Val(TextBox304.Text))

        ElseIf Tipo = 15 Or Tipo = 16 Then

            theta2 = Math.Atan((0.5 * Val(TextBox303.Text) - Val(TextBox290.Text) / 24) / Val(TextBox304.Text))

        ElseIf Tipo = 14 Then

            theta2 = Math.Atan((Val(TextBox303.Text) - Val(TextBox290.Text) / 12) / Val(TextBox304.Text))

        End If

        If theta <> 0 And theta < (Math.PI / 6) Or theta > (Math.PI / 3) Then
            thetai = True
        Else
            thetai = False
        End If

        If theta2 <> 0 And theta2 < (Math.PI / 6) Or theta2 > (Math.PI / 3) Then
            thetai2 = True
        Else
            thetai2 = False
        End If

    End Sub

    Private Sub TextBox211N_TextAlignChanged(sender As Object, e As EventArgs) Handles TextBox211N.TextAlignChanged

    End Sub

    Private Sub TextBox211N_TextChanged(sender As Object, e As EventArgs) Handles TextBox211N.TextChanged
        LbrSCBF()
    End Sub

    Private Sub TextBox212N_TextChanged(sender As Object, e As EventArgs) Handles TextBox212N.TextChanged
        LbrSCBF()
    End Sub

    Private Sub TextBox213N_TextChanged(sender As Object, e As EventArgs) Handles TextBox213N.TextChanged
        LbrSCBF()
    End Sub

    Private Sub LbrSCBF()

        Dim lmenosarr, lmenosarr2 As Double

        If (Val(TextBox211N.Text) <> LBM Or Val(TextBox212N.Text) <> SHF Or Val(TextBox213N.Text) <> SHF2) And (TextBox211N.Text <> String.Empty And TextBox212N.Text <> String.Empty And TextBox213N.Text <> String.Empty) Then

            OpcionesDiseño.CheckBox9.Checked = False
            OpcionesDiseño.LthetaBr = 0

            LBM = Val(TextBox211N.Text)
            SHF = Val(TextBox212N.Text)
            SHF2 = Val(TextBox213N.Text)
            ThetaRev(LBM, SHF, SHF2)

            If Tipo = 9 Then
                lmenosarr = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - theta)) / 12 + (Darr + 2) / 12, 2)
            Else
                lmenosarr = Math.Round(db / 12 + dc / 24, 2)
            End If

            If Tipo = 9 Then
                lmenosarr2 = Math.Round((db / 2 / Math.Sin(Math.PI / 2 - theta2)) / 12 + (Darr2 + 2) / 12, 2)
            Else
                lmenosarr2 = Math.Round(db / 12 + dc / 24, 2)
            End If

            Lbr = Math.Round(Math.Sqrt(SHF ^ 2 + (0.5 * LBM) ^ 2) - 2 * lmenosarr - 0.5, 2)
            Lbr2 = Math.Round(Math.Sqrt(SHF2 ^ 2 + (0.5 * LBM) ^ 2) - 2 * lmenosarr2 - 0.5, 2)

            Dim lbrt As Double

            lbrt = Math.Round(Math.Sqrt(SHF ^ 2 + (0.5 * LBM) ^ 2), 2)

        End If

    End Sub

    Private Sub Button17_Click(sender As Object, e As EventArgs) Handles Button17.Click
        Button17.BackgroundImage = My.Resources.ICONObrbfSoldada_ILUMINADO
        Button17.BackColor = Color.CadetBlue
        Button18.BackgroundImage = My.Resources.ICONOsoldadabrbfDoble
        Button16.BackgroundImage = My.Resources.ICONObrbfV
        Button27.BackgroundImage = My.Resources.ICONObrbfX
        Button27.BackColor = Color.Transparent
        Button18.BackColor = Color.Transparent
        Button16.BackColor = Color.Transparent

        Button1.Enabled = False
        Button2.Enabled = False
        Button3.Enabled = False
        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        GroupBox175.Visible = True
        GroupBox138N.Visible = False
        GroupBox1.Visible = False
        GroupBox177.Visible = False

        'IMAGEN DE LA CONEXIÓN
        PictureBox338.Image = My.Resources.VCBRBF
        PictureBox339.Image = My.Resources.BRBF1

        GroupBox100.Size = New System.Drawing.Size(839, 746)
        PictureBox230.Visible = True
        Label453.Visible = True
        Label431.Visible = True
        Label1170.Visible = False
        PictureBox231.Image = My.Resources.BRB_GeomPLgusset
        PictureBox231.Size = New System.Drawing.Size(405, 389)
        PictureBox231.Location = New System.Drawing.Point(3, 331)
        GroupBox101.Location = New System.Drawing.Point(428, 20)
        GroupBox102.Location = New System.Drawing.Point(428, 134)
        GroupBox102.Size = New System.Drawing.Size(323, 131)
        Label466.Location = New System.Drawing.Point(74, 44)
        Label465.Location = New System.Drawing.Point(74, 77)
        TextBox233.Location = New System.Drawing.Point(179, 40)
        Label464.Location = New System.Drawing.Point(222, 43)
        TextBox232.Location = New System.Drawing.Point(179, 74)
        Label463.Location = New System.Drawing.Point(222, 77)

        GroupBox120.Location = New System.Drawing.Point(428, 279)
        GroupBox120.Size = New System.Drawing.Size(323, 100)
        Label557.Location = New System.Drawing.Point(52, 44)
        TextBox244.Location = New System.Drawing.Point(161, 41)
        Label555.Location = New System.Drawing.Point(204, 44)
        GroupBox119.Location = New System.Drawing.Point(428, 402)

        Tipo = 17

        '==============================================================
        'Cambios en Groupbox185 y Groupbox183 en los datos iniciales
        Label1001.Text = "Columna:"
        Label1001.Location = New System.Drawing.Point(65, 84)
        Label968.Visible = True
        TextBox293.Visible = True

        Label993.Text = "Columna:"
        Label993.Location = New System.Drawing.Point(62, 106)
        Label969.Visible = True
        TextBox310.Visible = True

        GroupBox185.Size = New System.Drawing.Size(240, 142)
        GroupBox183.Size = New System.Drawing.Size(240, 164)
        GroupBox183.Location = New System.Drawing.Point(270, 166)
        GroupBox187.Location = New System.Drawing.Point(270, 332)
        GroupBox188.Location = New System.Drawing.Point(270, 427)
        GroupBox184.Location = New System.Drawing.Point(270, 518)

        GroupBox188.Text = "Arriostres superiores"
        GroupBox184.Visible = True
        '==============================================================


        'GroupBoxes en la pestaña Conexión Viga-Columna
        GroupBox221.Visible = False
        GroupBox213.Visible = False
        GroupBox225.Text = "Conexión entre la placa gusset y el patín de la porción de viga"
        GroupBox217.Text = "Conexión entre la placa gusset y el patín de la columna"

        '===========================================
        'MOSTRAR TABPAGE DE DISEÑO DE WUF-W/OCULTAR LOS DEMAS TABPAGES
        'If TabControlJ1.TabPages.Contains(TabPage7) = False Then
        '    TabControlJ1.TabPages.Insert(1, TabPage7)
        '    TabControlJ1.TabPages.Remove(TabPage2)
        '    TabControlJ1.TabPages.Remove(TabPage5)
        '    TabControlJ1.TabPages.Remove(TabPage6)
        'Else
        '    TabControlJ1.TabPages.Remove(TabPage2)
        '    TabControlJ1.TabPages.Remove(TabPage5)
        '    TabControlJ1.TabPages.Remove(TabPage6)
        'End If


        

        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna Soldada (BRBF)"
        LabelDiseño.Text = "Conexión Viga-Columna Soldada BRBF"
    End Sub

    Private Sub Button18_Click(sender As Object, e As EventArgs) Handles Button18.Click
        Button17.BackgroundImage = My.Resources.ICONObrbfSoldada
        Button18.BackgroundImage = My.Resources.ICONOsoldadabrbfDoble_ILUMINADO
        Button18.BackColor = Color.CadetBlue
        Button16.BackgroundImage = My.Resources.ICONObrbfV
        Button27.BackgroundImage = My.Resources.ICONObrbfX
        Button27.BackColor = Color.Transparent
        Button17.BackColor = Color.Transparent
        Button16.BackColor = Color.Transparent

        Button1.Enabled = False
        Button2.Enabled = False
        Button3.Enabled = False
        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        GroupBox175.Visible = True
        GroupBox138N.Visible = False
        GroupBox1.Visible = False
        GroupBox177.Visible = False
        Label575.Text = "Arriostre superior"
        Label574.Text = "Arriostre inferior"

        PictureBox338.Image = My.Resources.VCdobleBRBF
        PictureBox339.Image = My.Resources.SCBFX

        Tipo = 18

        'GroupBoxes en la pestaña Conexión Viga-Columna
        GroupBox221.Visible = True
        GroupBox213.Visible = True
        GroupBox225.Text = "Conexión entre la placa gusset superior y el patín de la porción de viga"
        GroupBox217.Text = "Conexión entre la placa gusset superior y el patín de la columna"

        '==============================================================
        'Cambios en Groupbox185 y Groupbox183 en los datos iniciales
        Label1001.Text = "Columna:"
        Label1001.Location = New System.Drawing.Point(65, 84)
        Label968.Visible = True
        TextBox293.Visible = True

        Label993.Text = "Columna:"
        Label993.Location = New System.Drawing.Point(62, 106)
        Label969.Visible = True
        TextBox310.Visible = True

        GroupBox185.Size = New System.Drawing.Size(240, 142)
        GroupBox183.Size = New System.Drawing.Size(240, 164)
        GroupBox183.Location = New System.Drawing.Point(270, 166)
        GroupBox187.Location = New System.Drawing.Point(270, 332)
        GroupBox188.Location = New System.Drawing.Point(270, 427)
        GroupBox184.Location = New System.Drawing.Point(270, 518)
        GroupBox184.Location = New System.Drawing.Point(270, 518)

        'Cambios en las imágenes de geometría
        PictureBox372.Image = My.Resources.BRB_PLsupVC
        PictureBox379.Image = My.Resources.BRB_PLinfVC
        Label1171.Visible = False
        Label1199.Visible = False

        GroupBox188.Text = "Arriostres superiores"
        GroupBox184.Visible = True
        '==============================================================

        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga/Columna Doble Soldada (BRBF)"
        LabelDiseño.Text = "Conexión Viga-Columna Doble Soldada BRBF"
    End Sub

    Private Sub Button27_Click(sender As Object, e As EventArgs) Handles Button27.Click
        Button17.BackgroundImage = My.Resources.ICONObrbfSoldada
        Button18.BackgroundImage = My.Resources.ICONOsoldadabrbfDoble
        Button16.BackgroundImage = My.Resources.ICONObrbfV
        Button27.BackgroundImage = My.Resources.ICONObrbfX_ILUMINADO
        Button27.BackColor = Color.CadetBlue
        Button17.BackColor = Color.Transparent
        Button18.BackColor = Color.Transparent
        Button16.BackColor = Color.Transparent

        Button1.Enabled = False
        Button2.Enabled = False
        Button3.Enabled = False
        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True
        Label575.Text = "Arriostres superiores"
        Label574.Text = "Arriostres inferiores"

        GroupBox234.Size = New System.Drawing.Size(863, 1670)
        GroupBox175.Visible = True
        GroupBox138N.Visible = False
        GroupBox1.Visible = False
        GroupBox177.Visible = False

        PictureBox338.Image = My.Resources.ConXBRBF
        PictureBox339.Image = My.Resources.XSCBF

        Tipo = 20

        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga en X (BRBF)"
        LabelDiseño.Text = "Conexión Arriostre-Viga en X BRBF"


        'Cambios en las imágenes de geometría
        PictureBox372.Image = My.Resources.BRB_GPLgSuperior
        PictureBox379.Image = My.Resources.BRB_GPLgInferior
        Label1171.Visible = True
        Label1199.Visible = True

        '==============================================================
        'Cambios en Groupbox185 y Groupbox183
        Label1001.Text = "Arriostres:"
        Label1001.Location = New System.Drawing.Point(63, 87)
        Label968.Visible = False
        TextBox293.Visible = False

        Label993.Text = "Arriostres:"
        Label993.Location = New System.Drawing.Point(63, 106)
        Label969.Visible = False
        TextBox310.Visible = False

        GroupBox185.Size = New System.Drawing.Size(240, 117)
        GroupBox183.Size = New System.Drawing.Size(240, 139)
        GroupBox183.Location = New System.Drawing.Point(270, 141)
        GroupBox187.Location = New System.Drawing.Point(270, 282)
        GroupBox188.Location = New System.Drawing.Point(270, 377)
        GroupBox184.Location = New System.Drawing.Point(270, 468)

        '==============================================================
        '==============================================================
        '==============================================================
        GroupBox237.Text = "Cargas Internas en la sección horizontal de la placa gusset superior"
        GroupBox243.Text = "Cargas Internas en la sección vertical de la placa gusset superior"
        GroupBox224.Text = "Soldadura entre la placa gusset superior y el patín de la viga"
        GroupBox233.Visible = False
        GroupBox247.Visible = True
        PictureBox373.Visible = False
        Label1527.Visible = False
        Label1531.Visible = True
        Label1535.Visible = True
        Label1539.Visible = True
        Label1526.Visible = False
        Label1528.Visible = False
        GroupBox248.Visible = True
        GroupBox249.Visible = True
        GroupBox250.Visible = True
        GroupBox251.Visible = True
        PictureBox430.Visible = True
        PictureBox440.Visible = True
        PictureBox439.Visible = True
        PictureBox441.Visible = True
        Label1533.Visible = True
        Label1532.Visible = True
        Label1530.Visible = True
        Label1536.Visible = True
        Label1537.Visible = True
        Label1534.Visible = True
        Label1530.Visible = True
        Label1541.Visible = True
        Label1538.Visible = True
        Label1540.Visible = True
        'PictureBox439.Location = New System.Drawing.Point(20, 914)
        'PictureBox440.Location = New System.Drawing.Point(20, 1206)
        'PictureBox441.Location = New System.Drawing.Point(20, 1484)

        'PictureBox410.Visible = True
        'PictureBox411.Visible = True
        'PictureBox412.Visible = True
        'PictureBox413.Visible = True
        'GroupBox240.Visible = True
        'GroupBox241.Visible = True
        'GroupBox242.Visible = True
        'GroupBox246.Visible = True
        'GroupBox252.Visible = True
        '==============================================================
        '==============================================================
        GroupBox188.Text = "Arriostres superiores"
        GroupBox184.Visible = True
        '==============================================================

    End Sub

    Private Sub Button30_Click(sender As Object, e As EventArgs) Handles Button30.Click
        labelStatusBar1.Text = "Perfiles W y Datos del arriostre restringido al pandeo (BRB)"

        If LabelDiseño.Text = "Conexión Viga-Columna Soldada BRBF" Then
            PerfilesBRBF.ShowDialog()
        ElseIf LabelDiseño.Text = "Conexión Viga-Columna Doble Soldada BRBF" Then
            PerfilesBRBF.ShowDialog()
        ElseIf LabelDiseño.Text = "Conexión Arriostre-Viga Chevron BRBF" Then
            PerfilesBRBF2.ShowDialog()
        ElseIf LabelDiseño.Text = "Conexión Arriostre-Viga en X BRBF" Then
            PerfilesBRBF2.ShowDialog()
        End If

    End Sub

    Private Sub Button28_Click(sender As Object, e As EventArgs) Handles Button28.Click
        labelStatusBar1.Text = "Propiedades del acero de los miembros a conectar"
        If LabelDiseño.Text = "Conexión Viga-Columna Soldada BRBF" Then
            SteelBRBF.ShowDialog()
        ElseIf LabelDiseño.Text = "Conexión Viga-Columna Doble Soldada BRBF" Then
            SteelBRBF.ShowDialog()
        ElseIf LabelDiseño.Text = "Conexión Arriostre-Viga Chevron BRBF" Then
            SteelBRBF2.ShowDialog()
        ElseIf LabelDiseño.Text = "Conexión Arriostre-Viga en X BRBF" Then
            SteelBRBF2.ShowDialog()
        End If
    End Sub

    Private Sub TextBox292_TextChanged(sender As Object, e As EventArgs) Handles TextBox292.TextChanged
    End Sub

    Private Sub TextBox328_TextChanged(sender As Object, e As EventArgs) Handles TextBox328.TextChanged
        Lbr = Val(TextBox328.Text)
    End Sub

    Private Sub TextBox327_TextChanged(sender As Object, e As EventArgs) Handles TextBox327.TextChanged
        theta = Val(TextBox327.Text) * Math.PI / 180
    End Sub

    Private Sub TextBox314_TextChanged(sender As Object, e As EventArgs) Handles TextBox314.TextChanged
        Lbr2 = Val(TextBox314.Text)
    End Sub

    Private Sub TextBox313_TextChanged(sender As Object, e As EventArgs) Handles TextBox313.TextChanged
        theta2 = Val(TextBox313.Text) * Math.PI / 180
    End Sub

    Private Sub TextBox326_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox326.KeyPress
        soloNumeros(TextBox326, e)

        If Asc(e.KeyChar) = 13 Then
            TextBox325.Focus()
        End If
    End Sub

    Private Sub TextBox325_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox325.KeyPress
        soloNumeros(TextBox325, e)

        If Asc(e.KeyChar) = 13 Then
            TextBox328.Focus()
        End If
    End Sub

    Private Sub TextBox328_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox328.KeyPress
        soloNumeros(TextBox328, e)

        If Asc(e.KeyChar) = 13 Then
            TextBox327.Focus()
        End If
    End Sub

    Private Sub TextBox327_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox327.KeyPress
        soloNumeros(TextBox327, e)

        If Asc(e.KeyChar) = 13 Then
            TextBox314.Focus()
        End If
    End Sub

    Private Sub TextBox314_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox314.KeyPress
        soloNumeros(TextBox314, e)

        If Asc(e.KeyChar) = 13 Then
            TextBox313.Focus()
        End If
    End Sub

    Private Sub TextBox313_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox313.KeyPress
        soloNumeros(TextBox313, e)
    End Sub

    Private Sub TextBox320_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox320.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox320, e)
        If Asc(e.KeyChar) = 13 And TextBox320.Text <> String.Empty Then
Line0:
            TextBox320.Text = Frac2Num(TextBox320.Text)
            SoldaduraArriostre(TextBox320, Label1024, TextBox318, Label1022, Label1020, Tu, Label1002, Label1026, False)
            TextBox318.Focus()
        End If

    End Sub

    Private Sub TextBox318_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox318.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox318, e)
        If Asc(e.KeyChar) = 13 And TextBox320.Text <> String.Empty And TextBox318.Text <> String.Empty Then
Line0:
            TextBox318.Text = Frac2Num(TextBox318.Text)
            SoldaduraArriostre(TextBox320, Label1024, TextBox318, Label1022, Label1020, Tu, Label1002, Label1026, False)
            AnchoWhitmoreLnk()
            If TextBox315.Text <> String.Empty And TextBox331.Text <> String.Empty Then
                GeometríaGsstLnk()
            End If
            TextBox315.Focus()
        End If

    End Sub

    Private Sub AnchoWhitmoreLnk()

        Dim AnchoWtmr30 As Double

        AnchoWtmr30 = Math.Round(3 * Val(TextBox318.Text) / Math.Tan(Math.PI / 6), 2)

        Label1007.Text = "Ancho de Whitmore: " + AnchoWtmr30.ToString + " in"

        tmin = Math.Round(Tu / (0.9 * Fyp * AnchoWtmr30), 2)

        Label1017.Text = "in >= " + tmin.ToString + " in"

        If TextBox315.Text <> String.Empty Then

            If Val(TextBox315.Text) < tmin Then
                TextBox315.BackColor = Color.Red
                Label1017.ForeColor = Color.Red
                Label1017.Text = "in < " + tmin.ToString + " in"
            Else
                TextBox315.BackColor = Color.White
                Label1017.ForeColor = Color.White
                Label1017.Text = "in >= " + tmin.ToString + " in"
            End If

            Dim Rngyl As Double

            t = Val(TextBox315.Text)

            Rngyl = Math.Round(AnchoWtmr30 * Val(TextBox315.Text) * Fyp, 2)

            Label1003.Text = Rngyl.ToString + " kips"

            If Rngyl < Tu Then
                Label1003.ForeColor = Color.Red
            Else
                Label1003.ForeColor = Color.White
            End If

            'RESISTENCIA A LA RUPTURA POR BLOQUE DE CORTANTE

            Dim Agv, Ant, Rnblq As Double

            Agv = 2 * Val(TextBox315.Text) * Val(TextBox318.Text)
            Ant = Val(TextBox315.Text) * Darr / Math.Cos(theta2)

            Rnblq = Math.Round(0.75 * (0.6 * Fyp * Agv + 1 * Fup * Ant), 2)

            Label1004.Text = Rnblq.ToString + " kips"

            If Rnblq < Tu Then
                Label1004.ForeColor = Color.Red
            Else
                Label1004.ForeColor = Color.White
            End If

        End If

    End Sub

    Private Sub TextBox315_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox315.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox315, e)
        If Asc(e.KeyChar) = 13 And TextBox320.Text <> String.Empty And TextBox318.Text <> String.Empty And TextBox315.Text <> String.Empty Then
Line0:
            TextBox315.Text = Frac2Num(TextBox315.Text)
            AnchoWhitmoreLnk()
            If TextBox331.Text = String.Empty Then
                TextBox331.Text = "30"
            End If
            GeometríaGsstLnk()
            TextBox331.Focus()
        End If
    End Sub

    Private Sub GeometríaGsstLnk()

        Dim phi, L_A, L, d As Double
        Dim a, a1, aprima, lb, eb, B, Lw, Lc As Double


        phi = Val(TextBox331.Text) * Math.PI / 180
        Lw = Val(TextBox318.Text)

        B = Math.Round(Darr / Math.Cos(theta2), 2)
        eb = db / 2
        lb = Math.Round(2 * t / Math.Cos(theta2), 2)
        L_A = Math.Round((Lw + lb) * Math.Sin(phi) / Math.Sin(Math.PI / 2 + theta2 - phi) + eb * Math.Tan(theta2) + B / 2 + 1, 2)
        d = Math.Round(1 + B + eb * Math.Tan(theta2), 2)
        L = Math.Round((eb + 2 * t) / Math.Cos(theta2), 2)
        a = Math.Round(Lw * Math.Sin(phi) / Math.Sin(Math.PI / 2 + theta2 - phi) + B / 2 + 1, 2)
        aprima = Math.Round(B + 2 * t * Math.Tan(theta2), 2)

        a1 = Math.Round((Lw + lb) * Math.Sin(phi) / Math.Sin(Math.PI / 2 + theta2 - phi), 2)

        'excentricidad----------------
        Lc = a1 + 1 + B / 2
        Lpm = Math.Abs(Lc - L_A / 2)
        '-----------------------------

        ga = a1
        gLAgusset = L_A

        TextBox334.Text = Math.Round(theta2 * 180 / Math.PI, 2)
        TextBox331.Text = Math.Round(phi * 180 / Math.PI, 2)
        TextBox333.Text = L_A.ToString
        TextBox332.Text = L.ToString
        TextBox323.Text = a.ToString
        TextBox324.Text = aprima.ToString
        TextBox321.Text = lb.ToString
        TextBox329.Text = eb.ToString
        TextBox322.Text = B.ToString
        TextBox330.Text = d.ToString

        CargasResistenciasLnk()

    End Sub

    Private Sub TextBox331_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox331.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox331, e)
        If Asc(e.KeyChar) = 13 And TextBox320.Text <> String.Empty And TextBox318.Text <> String.Empty And TextBox315.Text <> String.Empty And TextBox331.Text <> String.Empty Then
Line0:
            TextBox331.Text = Frac2Num(TextBox331.Text)
            GeometríaGsstLnk()
            TextBox333.Focus()
        End If
    End Sub

    Private Sub TextBox333_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox333.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox333, e)
        If Asc(e.KeyChar) = 13 And TextBox333.Text <> String.Empty Then
Line0:
            TextBox333.Text = Frac2Num(TextBox333.Text)
            GeometríaGsstLnk()
            TextBox333.Focus()
        End If
    End Sub

    Private Sub TextBox333_TextChanged(sender As Object, e As EventArgs) Handles TextBox333.TextChanged

        If TextBox333.TextLength > 1 Then

            Dim phi As Double
            Dim Lw, lb, L_A, a1, x As Double
            Dim b, c As Double

            Lw = Val(TextBox318.Text)
            lb = Val(TextBox321.Text)
            L_A = Val(TextBox333.Text)

            x = Math.Round(L_A - gLAgusset, 2)
            a1 = ga + x
            c = Lw + lb

            b = Math.Round(Math.Sqrt(a1 ^ 2 + c ^ 2 - 2 * a1 * c * Math.Cos(Math.PI / 2 - theta2)), 2)

            phi = Math.Round(Math.Asin(a1 * Math.Sin(Math.PI / 2 - theta2) / b) * 180 / Math.PI, 2)

            TextBox331.Text = phi.ToString

            If phi < 30 Then
                TextBox331.BackColor = Color.Red
            Else
                TextBox331.BackColor = Color.White
            End If

        End If

    End Sub

    Private Sub DistribCargasLnk()

        Dim CortanteT, NormalT, MomentoT, CortanteC, NormalC, MomentoC, exc, NueqT, NueqC, RuC, RuT, Vbrt, Vbrc, Mbrt, Mbrc As Double
        Dim L_A As Double
        Dim Cortante, Normal, Momento, Resultante, ángulo As Double

        L_A = Val(TextBox333.Text)

        exc = Lpm

        'TENSIÓN

        '   Cortante

        Vbrt = Math.Round(1.4 * Val(CargasEBF2.TextBox1.Text) + 0.5 * Val(CargasEBF2.TextBox2.Text) + Srr * Val(CargasEBF2.TextBox3.Text), 2)
        CortanteT = Math.Round(Vbrt * Math.Cos(theta2) + Tu * Math.Sin(theta2), 2)

        '   Normal

        NormalT = Math.Round(Vbrt * Math.Sin(theta2) + Tu * Math.Cos(theta2), 2)

        '   Momento 

        Mbrt = Math.Round(1.4 * Val(CargasEBF2.TextBox7.Text) + 0.5 * Val(CargasEBF2.TextBox8.Text) + Srr * Val(CargasEBF2.TextBox9.Text), 2)
        MomentoT = Math.Round(NormalT * exc) + Mbrt

        '   Carga Resultante

        NueqT = Math.Round(NormalT + 4 * MomentoT / L_A, 2)

        RuT = Math.Round(Math.Sqrt(CortanteT ^ 2 + NueqT ^ 2), 2)

        'COMPRESIÓN

        '   Cortante

        Vbrc = Math.Round(1.4 * Val(CargasEBF2.TextBox29.Text) + 0.5 * Val(CargasEBF2.TextBox30.Text) + Srr * Val(CargasEBF2.TextBox31.Text), 2)
        CortanteC = Math.Round(Vbrc * Math.Cos(theta2) + Tu * Math.Sin(theta2), 2)

        '   Normal

        NormalC = Math.Round(Vbrc * Math.Sin(theta2) + Tu * Math.Cos(theta2), 2)

        '   Momento 

        Mbrc = Math.Round(1.4 * Val(CargasEBF2.TextBox35.Text) + 0.5 * Val(CargasEBF2.TextBox36.Text) + Srr * Val(CargasEBF2.TextBox37.Text), 2)
        MomentoC = Math.Round(NormalC * exc) + Mbrc

        '   Carga Resultante

        NueqC = Math.Round(NormalC + 4 * MomentoC / L_A, 2)

        RuC = Math.Round(Math.Sqrt(CortanteC ^ 2 + NueqC ^ 2), 2)

        'CARGA PARA DISEÑO

        If RuT > RuC Then

            Normal = NormalT
            Cortante = CortanteT
            Momento = MomentoT
            Resultante = RuT

            ángulo = Math.Atan(NueqT / CortanteT)

        Else

            Normal = NormalC
            Cortante = CortanteC
            Momento = MomentoC
            Resultante = RuC

            ángulo = Math.Atan(NueqC / CortanteC)

        End If

        DreqGB = Math.Round(1.25 * Resultante / (2 * 1.392 * (1 + 0.5 * Math.Sin(ángulo) ^ 1.5) * L_A), 2)

        Label1016.Text = Normal.ToString + " kips"
        Label1018.Text = Cortante.ToString + " kips"
        Label1028.Text = Momento.ToString + " kips-in"

        Label1074.Text = "in >= " + DreqGB.ToString + "/16 in"

        Label1071.Text = Resultante.ToString + " kips"
        Label1068.Text = L_A.ToString + " in"

        Label1061.Text = Normal.ToString

        Label1054.Text = Cortante.ToString
        Label1051.Text = Normal.ToString

    End Sub

    Private Sub ResistenciasLnk()

        Dim PhiRn, L_A As Double

        L_A = Val(TextBox333.Text)

        'placa gusset

        'resistencia a la fluencia por tensión

        PhiRn = Math.Round(0.9 * Fyp * L_A * t, 2)

        Label1059.Text = PhiRn.ToString

        'resistencia a la fluencia por cortante

        PhiRn = Math.Round(1 * 0.6 * Fyp * L_A * t, 2)

        Label1057.Text = PhiRn.ToString

        'viga

        'resistencia  a la fluencia local del alma

        PhiRn = Math.Round(1 * Fyb * tbw * (5 * kbdes + L_A), 2)

        Label1066.Text = PhiRn.ToString

        'resistencia al aplastamiento local del alma

        PhiRn = Math.Round(0.75 * 0.8 * tbw ^ 2 * (1 + 3 * (L_A / db) * (tbw / tbf) ^ 1.5) * Math.Sqrt(29000 * Fyb * tbf / tbw), 2)

        Label1064.Text = PhiRn.ToString

    End Sub

    Private Sub ComparaciónLnk(Ru As Label, Rn As Label)

        If Val(Ru.Text) > Val(Rn.Text) Then
            Rn.ForeColor = Color.Red
        Else
            Rn.ForeColor = Color.White
        End If

    End Sub

    Private Sub CargasResistenciasLnk()

        DistribCargasLnk()
        ResistenciasLnk()

        ComparaciónLnk(Label1061, Label1066)
        ComparaciónLnk(Label1061, Label1064)
        ComparaciónLnk(Label1054, Label1059)
        ComparaciónLnk(Label1051, Label1057)

        Label1061.Text = Label1061.Text + " kips"
        Label1066.Text = Label1066.Text + " kips"
        Label1064.Text = Label1064.Text + " kips"
        Label1059.Text = Label1059.Text + " kips"
        Label1054.Text = Label1054.Text + " kips"
        Label1051.Text = Label1051.Text + " kips"
        Label1057.Text = Label1057.Text + " kips"

    End Sub

    Private Sub TextBox335_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox335.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox335, e)
        If Asc(e.KeyChar) = 13 And TextBox335.Text <> String.Empty Then
Line0:
            TextBox335.Text = Frac2Num(TextBox335.Text)

            CompD(TextBox335, Label1074, DreqGB, TextBox335)

        End If

    End Sub

    Private Sub GeometríaGusset4()

        'VALORES GEOMÉTRICOS
        Dim Lw, d, B, Awtmr, tmin, t, DosT, Phi, Phiprima, a, aprima, eb, ec, L, L_A, L_B, lbckl, w, wprima, gW, egW1, egW2 As Double
        Dim Llug, Blug, Lev, Leh, Nb, S, glug, LongLug, HoleDiam, BoltDiam As Double

        'ANCHO DEL ARRIOSTRE Y LONGITUD DE SOLDADURA SEGÚN CONEXIÓN
        If Tipo = 6 Or Tipo = 7 Or Tipo = 12 Or Tipo = 13 Or Tipo = 15 Or Tipo = 16 Then
            B = Darr
            Lw = Val(TextBox216N.Text)
            t = Val(TextBox218N.Text)
        ElseIf Tipo = 10 Or Tipo = 11 Then
            B = Darr2
            Lw = Val(TextBox216N.Text)
            t = Val(TextBox218N.Text)
            theta = theta2
        ElseIf Tipo = 8 And Inferior = False Then
            B = Darr
            Lw = Val(textbox347.Text)
            t = Val(textbox345.Text)
        ElseIf Tipo = 8 And Inferior Then
            B = Darr2
            Lw = Val(textbox379.Text)
            t = Val(textbox377.Text)
        ElseIf Tipo = 9 And Inferior = False Then
            B = Darr
            Lw = Val(TextBox259.Text)
            t = Val(TextBox257.Text)
        ElseIf Tipo = 9 And Inferior Then
            B = Darr2
            Lw = Val(TextBox273.Text)
            t = Val(TextBox271.Text)
        ElseIf Tipo = 17 Or Tipo = 19 Then
            Nb = Val(TextBox229.Text)
            S = Val(TextBox226.Text)
            Leh = Val(TextBox227.Text)
            Lev = Val(TextBox228.Text)
            Llug = S * (Nb - 1) + Leh
            Blug = Val(TextBox224.Text)
            glug = Blug - 2 * Lev
            t = Val(TextBox244.Text)
            HoleDiam = Val(ListBox7.Text)
            LongLug = Val(TextBox225.Text)
            BoltDiam = Val(ListBox6.Text)
        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior = False Then
            Nb = Val(TextBox245.Text)
            S = Val(TextBox248.Text)
            Leh = Val(TextBox247.Text)
            Lev = Val(TextBox246.Text)
            Llug = S * (Nb - 1) + Leh
            Blug = Val(TextBox250.Text)
            glug = Blug - 2 * Lev
            t = Val(TextBox340.Text)
            HoleDiam = Val(ListBox10.Text)
            LongLug = Val(TextBox249.Text)
            BoltDiam = Val(ListBox8.Text)
        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior Then
            Nb = Val(TextBox251.Text)
            S = Val(TextBox254.Text)
            Leh = Val(TextBox253.Text)
            Lev = Val(TextBox252.Text)
            Llug = S * (Nb - 1) + Leh
            Blug = Val(TextBox339.Text)
            glug = Blug - 2 * Lev
            t = Val(TextBox389.Text)
            HoleDiam = Val(ListBox11.Text)
            LongLug = Val(TextBox338.Text)
            BoltDiam = Val(ListBox9.Text)
        End If

        If Sistema <> "BRBF" Then
            '--VALOR GEOMÉTRICO d --
            d = B + 2
            '-----------------------
            '---------------ANCHO DE Whitmore----------------------------
            Awtmr = Math.Round(B + 2 * Lw * Math.Tan(Math.PI / 6), 2)
            '------------------------------------------------------------
            If Tipo = 9 And Inferior = False Then
                w = Math.Round(Lw * Math.Tan(Math.PI / 2 - theta) + d / 2, 2)
            Else
                w = Math.Round(Lw * Math.Tan(Math.PI / 2 - theta2) + d / 2, 2)
            End If
        Else

            If Nb <> 0 And S <> 0 And Leh <> 0 And Lev <> 0 And LongLug <> 0 Then
                '---VALOR GEOMÉTRICO d--
                d = Blug + 2
                '------------------------
                '---------------ANCHO DE Whitmore----------------------------
                Awtmr = Math.Round(glug + 2 * Llug * Math.Tan(Math.PI / 6), 2)
                '-------------------------------------------------------------
            Else
                GoTo Line0
            End If

        End If

        If Tipo = 6 Or Tipo = 7 Or Tipo = 12 Or Tipo = 13 Or Tipo = 15 Or Tipo = 16 Or Tipo = 10 Or Tipo = 11 Then

            Label657N.Text = "Ancho de Whitmore: " + Awtmr.ToString + " in"

            If Tipo = 15 Or Tipo = 16 Then
                theta = theta2
            End If

            gW = Math.Round(Lw * Math.Tan(Math.PI / 2 - theta) + Lw * Math.Tan(theta) + d, 2)

            Label664N.Text = "in <=" + gW.ToString + " in"
            Label382.Text = "Ancho de la placa <=" + gW.ToString + " in"

            If TextBox217N.Text = String.Empty Then
                GoTo Line0
            Else
                If Val(TextBox217N.Text) > gW Or Val(TextBox217N.Text) < d Then
                    TextBox217N.BackColor = Color.Red
                Else
                    TextBox217N.BackColor = Color.White
                End If

                If Val(TextBox217N.Text) <> gW Then

                    gW = Val(TextBox217N.Text)

                End If

                If gW <> gWdth And Piv = 0 And Piv2 = 0 Then

                    TextBox204.Text = ""
                    TextBox207.Text = ""
                    TextBox205.Text = String.Empty
                    TextBox206.Text = String.Empty
                    TextBox337.Text = String.Empty

                    If Inferior Then
                        gWdthi = gW
                    Else
                        gWdth = gW
                    End If

                    Phi = Math.Atan((gW / 2 - d / 2) / Lw)
                    Phiprima = Phi

                    gPhi = Phi
                    gPhiprima = Phiprima

                End If

                If gW < Awtmr Then
                    egW = gW
                Else
                    egW = Awtmr
                End If

            End If

            If Tipo <> 10 And Tipo <> 11 Then
                tmin = Math.Round(Tu / (0.9 * Fyp * egW), 2)
            Else
                tmin = Math.Round(Tu2 / (0.9 * Fyp * egW), 2)
            End If

            Label665N.Text = "in >= " + tmin.ToString + " in"

        ElseIf Tipo = 8 And Inferior = False Then

            Label456.Text = "Ancho de Whitmore: " + Awtmr.ToString + " in"

            gW = Math.Round(Lw * Math.Tan(Math.PI / 2 - theta) + Lw * Math.Tan(theta) + d, 2)

            Label476.Text = "in <=" + gW.ToString + " in"
            Label454.Text = "Ancho de la placa <=" + gW.ToString + " in"

            If TextBox346.Text = String.Empty Then
                GoTo Line0
            Else
                If Val(TextBox346.Text) > gW Or Val(TextBox346.Text) < d Then
                    TextBox346.BackColor = Color.Red
                Else
                    TextBox346.BackColor = Color.White
                End If

                If Val(TextBox346.Text) <> gW Then

                    gW = Val(TextBox346.Text)

                End If

                If gW <> gWdth And Piv = 0 And Piv2 = 0 Then

                    TextBox362.Text = ""
                    TextBox359.Text = ""
                    TextBox361.Text = String.Empty
                    TextBox360.Text = String.Empty
                    TextBox350.Text = String.Empty
                    gWdth = gW

                    Phi = Math.Atan((gW / 2 - d / 2) / Lw)
                    Phiprima = Phi

                    gPhi = Phi
                    gPhiprima = Phiprima

                End If

                If gW < Awtmr Then
                    egW = gW
                Else
                    egW = Awtmr
                End If

            End If

            tmin = Math.Round(Tu / (0.9 * Fyp * egW), 2)

            Label477.Text = "in >= " + tmin.ToString + " in"

        ElseIf Tipo = 8 And Inferior Then

            Label1137.Text = "Ancho de Whitmore: " + Awtmr.ToString + " in"

            gW = Math.Round(Lw * Math.Tan(Math.PI / 2 - theta2) + Lw * Math.Tan(theta2) + d, 2)

            Label1144.Text = "in <=" + gW.ToString + " in"
            Label1136.Text = "Ancho de la placa <=" + gW.ToString + " in"

            If TextBox378.Text = String.Empty Then
                GoTo Line0
            Else
                If Val(TextBox378.Text) > gW Or Val(TextBox378.Text) < d Then
                    TextBox378.BackColor = Color.Red
                Else
                    TextBox378.BackColor = Color.White
                End If

                If Val(TextBox378.Text) <> gW Then

                    gW = Val(TextBox378.Text)

                End If

                If gW <> gWdthi And Piv = 0 And Piv2 = 0 Then

                    TextBox376.Text = ""
                    TextBox373.Text = ""
                    TextBox375.Text = String.Empty
                    TextBox374.Text = String.Empty
                    TextBox364.Text = String.Empty
                    gWdthi = gW
                    Phi = Math.Atan((gW / 2 - d / 2) / Lw)
                    Phiprima = Phi
                    gPhi = Phi
                    gPhiprima = Phiprima

                End If

                If gW < Awtmr Then
                    egW = gW
                Else
                    egW = Awtmr
                End If

            End If

            tmin = Math.Round(Tu2 / (0.9 * Fyp * egW), 2)

            Label1145.Text = "in >= " + tmin.ToString + " in"

        ElseIf Tipo = 9 And Inferior = False Then

            Label690.Text = "Ancho de Whitmore: " + Awtmr.ToString + " in"
            gW = Math.Round(Lw * Math.Tan(Math.PI / 2 - theta) + Lw * Math.Tan(theta) + d, 2)
            Label691.Text = "in <=" + gW.ToString + " in"
            Label751.Text = "Ancho de la placa <=" + gW.ToString + " in"

            Phi = Math.PI / 2 - theta
            Phiprima = theta

            If TextBox258.Text = String.Empty Then
                GoTo Line0
            Else


                If Math.Round(Val(TextBox258.Text), 2) <> Math.Round(gWdth, 2) And Piv = 0 And Piv2 = 0 Then

                    gWdth = Val(TextBox258.Text)
                    TextBox270.Text = ""
                    TextBox359.Text = ""
                    TextBox261.Text = String.Empty
                    TextBox263.Text = String.Empty
                    TextBox268.Text = String.Empty
                    TextBox269.Text = ""

                    Phi = Math.PI / 2 - theta

                    wprima = gWdth - w

                    Phiprima = Math.Atan((wprima - d / 2) / Lw)

                    gPhi = Phi
                    gPhiprima = Phiprima

                End If

                If Val(TextBox258.Text) > gW Or Val(TextBox258.Text) < d + w Then
                    TextBox258.BackColor = Color.Red
                Else
                    TextBox258.BackColor = Color.White
                End If

                If gW - w < Awtmr / 2 Then
                    egW = gW
                Else
                    egW = Awtmr
                End If

            End If

            tmin = Math.Round(Tu / (0.9 * Fyp * Awtmr), 2)

            Label692.Text = "in >= " + tmin.ToString + " in"

        ElseIf Tipo = 9 And Inferior Then

            Label730.Text = "Ancho de Whitmore: " + Awtmr.ToString + " in"

            gW = Math.Round(Lw * Math.Tan(Math.PI / 2 - theta2) + Lw * Math.Tan(theta2) + d, 2)

            Label731.Text = "in <=" + gW.ToString + " in"
            Label753.Text = "Ancho de la placa <=" + gW.ToString + " in"

            If TextBox272.Text = String.Empty Then
                GoTo Line0
            Else

                If Math.Round(Val(TextBox272.Text), 2) <> Math.Round(gWdthi, 2) And Piv = 0 And Piv2 = 0 Then
                    gWdthi = Val(TextBox272.Text)
                    TextBox284.Text = ""
                    TextBox277.Text = ""
                    TextBox264.Text = String.Empty
                    TextBox275.Text = String.Empty
                    TextBox283.Text = String.Empty

                    Phi = Math.PI / 2 - theta2

                    wprima = gWdthi - w

                    Phiprima = Math.Atan((wprima - d / 2) / Lw)

                    gPhii = Phi
                    gPhiprimai = Phiprima

                End If

                If Val(TextBox272.Text) > gW Or Val(TextBox272.Text) < d + w Then
                    TextBox272.BackColor = Color.Red
                Else
                    TextBox272.BackColor = Color.White
                End If

                If gW - w < Awtmr / 2 Then
                    egW = gW
                Else
                    egW = Awtmr
                End If

            End If

            tmin = Math.Round(Tu2 / (0.9 * Fyp * egW), 2)

            Label732.Text = "in >= " + tmin.ToString + " in"

        ElseIf Tipo = 17 Then

            Phi = Math.PI / 2 - theta
            Phiprima = theta

            TextBox233.Text = Awtmr.ToString

            tmin = Math.Round(1.1 * Pu / (0.9 * Fyp * Awtmr), 2)

            Label555.Text = "in >= " + tmin.ToString + " in"

        ElseIf Tipo = 19 Then

            Phi = Math.PI / 2 - theta
            Phiprima = theta

            TextBox233.Text = Awtmr.ToString

            tmin = Math.Round(1.1 * Pu2 / (0.9 * Fyp * Awtmr), 2)

            Label555.Text = "in >= " + tmin.ToString + " in"

        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior = False Then
            Phi = Math.PI / 2 - theta
            Phiprima = theta

            TextBox386.Text = Awtmr.ToString

            tmin = Math.Round(1.1 * Pu / (0.9 * Fyp * Awtmr), 2)

            Label576.Text = "in >= " + tmin.ToString + " in"
        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior Then
            Phi = Math.PI / 2 - theta
            Phiprima = theta

            TextBox398.Text = Awtmr.ToString

            tmin = Math.Round(1.1 * Pu2 / (0.9 * Fyp * Awtmr), 2)

            Label1172.Text = "in >= " + tmin.ToString + " in"
        End If

        If t = 0 And Sistema <> "BRBF" Then
            GoTo Line0
        ElseIf t = 0 And Sistema = "BRBF" Then
            GoTo Line2
        End If

Line1:

        'REVISIÓN SI EL ESPESOR ES MAYOR QUE EL MÍNIMO
        If Tipo = 6 Or Tipo = 7 Or Tipo = 12 Or Tipo = 13 Or Tipo = 15 Or Tipo = 16 Or Tipo = 10 Or Tipo = 11 Then
            If t < tmin Then
                TextBox218N.BackColor = Color.Red
            Else
                TextBox218N.BackColor = Color.White
            End If
        ElseIf Tipo = 8 And Inferior = False Then
            If t < tmin Then
                TextBox345.BackColor = Color.Red
            Else
                TextBox345.BackColor = Color.White
            End If
        ElseIf Tipo = 8 And Inferior Then
            If t < tmin Then
                TextBox377.BackColor = Color.Red
            Else
                TextBox377.BackColor = Color.White
            End If
        ElseIf Tipo = 9 And Inferior = False Then
            If t < tmin Then
                TextBox257.BackColor = Color.Red
            Else
                TextBox257.BackColor = Color.White
            End If
        ElseIf Tipo = 9 And Inferior Then
            If t < tmin Then
                TextBox271.BackColor = Color.Red
            Else
                TextBox271.BackColor = Color.White
            End If
        ElseIf Tipo = 17 Or Tipo = 19 Then
            If t < tmin Then
                TextBox244.BackColor = Color.Red
            Else
                TextBox244.BackColor = Color.White
            End If
        ElseIf (Tipo = 20 Or Tipo = 18) And Inferior = False Then
            If t < tmin Then
                TextBox340.BackColor = Color.Red
            Else
                TextBox340.BackColor = Color.White
            End If
        ElseIf (Tipo = 20 Or Tipo = 18) And Inferior Then
            If t < tmin Then
                TextBox389.BackColor = Color.Red
            Else
                TextBox389.BackColor = Color.White
            End If
        End If

        'RESISTENCIA DE LA PLACA A LA TENSIÓN
        Dim PhiRn1, PhiRn2, Agv, Ant, Agt, Anv As Double
        If Sistema = "SCBF" Or Sistema = "EBF" Then
            '   RESISTENCIA A LA FLUENCIA
            PhiRn1 = Math.Round(0.9 * Fyp * egW * t, 2)
            '   RESISTENCIA A LA RUPTURA POR BLOQUE DE CORTANTE
            Agv = 2 * t * Lw
            Ant = t * B
            PhiRn2 = Math.Round(0.75 * (0.6 * Fyp * Agv + 1 * Fup * Ant), 2)
        ElseIf Sistema = "BRBF" Then
            '   RESISTENCIA A LA FLUENCIA
            PhiRn1 = Math.Round(0.9 * Fyp * Awtmr * t, 2)
            '   RESISTENCIA A LA RUPTURA POR BLOQUE DE CORTANTE
            Agv = 2 * (Leh + S * (Nb - 1) * t)
            Anv = Agv - (Nb - 0.5) * (HoleDiam + 1 / 16) * t
            Agt = glug * t
            Ant = Agt - (HoleDiam + 1 / 16) * t
            PhiRn2 = Math.Round(0.75 * (0.6 * Fyp * Agv + 1 * Fup * Ant), 2)
        End If
        
        If Tipo = 6 Or Tipo = 7 Or Tipo = 12 Or Tipo = 13 Or Tipo = 15 Or Tipo = 16 Then

            Label663N.Text = PhiRn1.ToString + " kips"

            If PhiRn1 < Tu Then
                Label663N.ForeColor = Color.Red
            Else
                Label663N.ForeColor = Color.White
            End If

            Label662N.Text = PhiRn2.ToString + " kips"

            If PhiRn2 < Tu Then
                Label662N.ForeColor = Color.Red
            Else
                Label662N.ForeColor = Color.White
            End If

        ElseIf Tipo = 10 Or Tipo = 11 Then

            Label663N.Text = PhiRn1.ToString + " kips"

            If PhiRn1 < Tu2 Then
                Label663N.ForeColor = Color.Red
            Else
                Label663N.ForeColor = Color.White
            End If

            Label662N.Text = PhiRn2.ToString + " kips"

            If PhiRn2 < Tu2 Then
                Label662N.ForeColor = Color.Red
            Else
                Label662N.ForeColor = Color.White
            End If

        ElseIf Tipo = 8 And Inferior = False Then

            Label462.Text = PhiRn1.ToString + " kips"

            If PhiRn1 < Tu Then
                Label462.ForeColor = Color.Red
            Else
                Label462.ForeColor = Color.White
            End If

            Label467.Text = PhiRn2.ToString + " kips"

            If PhiRn2 < Tu Then
                Label467.ForeColor = Color.Red
            Else
                Label467.ForeColor = Color.White
            End If

        ElseIf Tipo = 8 And Inferior = True Then

            Label1140.Text = PhiRn1.ToString + " kips"

            If PhiRn1 < Tu2 Then
                Label1140.ForeColor = Color.Red
            Else
                Label1140.ForeColor = Color.White
            End If

            Label1141.Text = PhiRn2.ToString + " kips"

            If PhiRn2 < Tu2 Then
                Label1141.ForeColor = Color.Red
            Else
                Label1141.ForeColor = Color.White
            End If

        ElseIf Tipo = 9 And Inferior = False Then

            Label686.Text = PhiRn1.ToString + " kips"

            If PhiRn1 < Tu Then
                Label686.ForeColor = Color.Red
            Else
                Label686.ForeColor = Color.White
            End If

            Label687.Text = PhiRn2.ToString + " kips"

            If PhiRn2 < Tu Then
                Label687.ForeColor = Color.Red
            Else
                Label687.ForeColor = Color.White
            End If

        ElseIf Tipo = 9 And Inferior Then

            Label726.Text = PhiRn1.ToString + " kips"

            If PhiRn1 < Tu2 Then
                Label726.ForeColor = Color.Red
            Else
                Label726.ForeColor = Color.White
            End If

            Label727.Text = PhiRn2.ToString + " kips"

            If PhiRn2 < Tu2 Then
                Label727.ForeColor = Color.Red
            Else
                Label727.ForeColor = Color.White
            End If

        ElseIf Tipo = 17 Then
            Label551.Text = PhiRn1.ToString + " kips"

            If PhiRn1 < 1.1 * Pu Then
                Label551.ForeColor = Color.Red
            Else
                Label551.ForeColor = Color.White
            End If

            Label552.Text = PhiRn2.ToString + " kips"

            If PhiRn2 < Tu Then
                Label552.ForeColor = Color.Red
            Else
                Label552.ForeColor = Color.White
            End If

        ElseIf Tipo = 19 Then

            Label551.Text = PhiRn1.ToString + " kips"

            If PhiRn1 < 1.1 * Pu2 Then
                Label551.ForeColor = Color.Red
            Else
                Label551.ForeColor = Color.White
            End If

            Label552.Text = PhiRn2.ToString + " kips"

            If PhiRn2 < 1.1 * Pu2 Then
                Label552.ForeColor = Color.Red
            Else
                Label552.ForeColor = Color.White
            End If

        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior = False Then
            Label580.Text = PhiRn1.ToString + " kips"

            If PhiRn1 < 1.1 * Pu Then
                Label580.ForeColor = Color.Red
            Else
                Label580.ForeColor = Color.White
            End If

            Label579.Text = PhiRn2.ToString + " kips"

            If PhiRn2 < 1.1 * Pu Then
                Label579.ForeColor = Color.Red
            Else
                Label579.ForeColor = Color.White
            End If
        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior Then
            Label1176.Text = PhiRn1.ToString + " kips"

            If PhiRn1 < 1.1 * Pu2 Then
                Label1176.ForeColor = Color.Red
            Else
                Label1176.ForeColor = Color.White
            End If

            Label1175.Text = PhiRn2.ToString + " kips"

            If PhiRn2 < 1.1 * Pu2 Then
                Label1175.ForeColor = Color.Red
            Else
                Label1175.ForeColor = Color.White
            End If
        End If

Line2:

        '====VALOR GEOMÉTRICO DosT======
        If Sistema = "SCBF" Then
            DosT = 2 * t
            If Tipo = 6 Or Tipo = 7 Or Tipo = 10 Or Tipo = 11 Or Tipo = 12 Or Tipo = 13 Or Tipo = 15 Or Tipo = 16 Then

                If TextBox219.Text <> String.Empty And Val(TextBox219.Text) <> DosT Then
                    DosT = Val(TextBox219.Text)
                    If DosT <> gDosT Then
                        TextBox205.Text = String.Empty
                        TextBox206.Text = String.Empty
                        TextBox337.Text = String.Empty
                        gDosT = DosT
                    End If
                End If

                If TextBox219.Text <> String.Empty And Val(TextBox219.Text) < 2 * t Then
                    TextBox219.BackColor = Color.Red
                Else
                    TextBox219.BackColor = Color.White
                End If

            ElseIf Tipo = 8 And Inferior = False Then

                If TextBox354.Text <> String.Empty And Val(TextBox354.Text) <> DosT Then
                    DosT = Val(TextBox354.Text)
                    If DosT <> gDosT Then
                        TextBox361.Text = String.Empty
                        TextBox360.Text = String.Empty
                        TextBox350.Text = String.Empty
                        gDosT = DosT
                    End If
                End If

                If TextBox354.Text <> String.Empty And Val(TextBox354.Text) < 2 * t Then
                    TextBox354.BackColor = Color.Red
                Else
                    TextBox354.BackColor = Color.White
                End If

            ElseIf Tipo = 8 And Inferior = True Then

                If TextBox368.Text <> String.Empty And Val(TextBox368.Text) <> DosT Then
                    DosT = Val(TextBox368.Text)
                    If DosT <> gDosTi Then
                        TextBox375.Text = String.Empty
                        TextBox374.Text = String.Empty
                        TextBox364.Text = String.Empty
                        gDosTi = DosT
                    End If

                End If

                If TextBox368.Text <> String.Empty And Val(TextBox368.Text) < 2 * t Then
                    TextBox368.BackColor = Color.Red
                Else
                    TextBox368.BackColor = Color.White
                End If

            ElseIf Tipo = 9 And Inferior = False Then
                If TextBox267.Text <> "" And Val(TextBox267.Text) <> DosT Then

                    DosT = Val(TextBox267.Text)

                    If DosT <> gDosT Then
                        TextBox263.Text = ""
                        TextBox268.Text = ""
                        TextBox261.Text = ""
                        TextBox269.Text = ""
                        gDosT = DosT
                    End If
                End If

                If TextBox267.Text <> String.Empty And Val(TextBox267.Text) < 2 * t Then
                    TextBox267.BackColor = Color.Red
                Else
                    TextBox267.BackColor = Color.White
                End If

            ElseIf Tipo = 9 And Inferior Then

                If TextBox281.Text <> "" And Val(TextBox281.Text) <> 2 * t Then

                    DosT = Val(TextBox281.Text)

                    If DosT <> gDosTi Then
                        TextBox277.Text = ""
                        TextBox264.Text = ""
                        TextBox275.Text = ""
                        TextBox283.Text = ""
                        gDosT = DosT
                    End If

                End If

                If TextBox281.Text <> String.Empty And Val(TextBox281.Text) < 2 * t Then
                    TextBox281.BackColor = Color.Red
                Else
                    TextBox281.BackColor = Color.White
                End If

            End If
        Else
            DosT = 0
        End If
        '-=============================

        '============================================VALOR GEOMÉTRICO Phi y Phiprima =============================================
        If Tipo = 6 Or Tipo = 7 Or Tipo = 10 Or Tipo = 11 Or Tipo = 12 Or Tipo = 13 Or Tipo = 15 Or Tipo = 16 Then

            If TextBox204.Text <> String.Empty And Piv <> 0 Then
                Phi = Val(TextBox204.Text) * Math.PI / 180
                Phiprima = Val(TextBox207.Text) * Math.PI / 180

                w = Math.Round(Lw * Math.Tan(Phi) + d / 2, 2)

                wprima = Math.Round(Lw * Math.Tan(Phiprima) + d / 2, 2)

                gW = w + wprima

                If w < Awtmr / 2 Then
                    egW1 = w
                Else
                    egW1 = Awtmr / 2
                End If

                If wprima < Awtmr / 2 Then
                    egW2 = wprima
                Else
                    egW2 = Awtmr / 2
                End If

                egW = egW1 + egW2

                TextBox217N.Text = gW.ToString

                If Inferior Then
                    gWdthi = gW
                Else
                    gWdth = gW
                End If

                TextBox205.Text = String.Empty
                TextBox206.Text = String.Empty
                TextBox337.Text = String.Empty

                gPhi = Phi

                Piv = 0

                If Tipo <> 10 And Tipo <> 11 Then
                    tmin = Math.Round(Tu / (0.9 * Fyp * egW), 2)
                Else
                    tmin = Math.Round(Tu2 / (0.9 * Fyp * egW), 2)
                End If

                Label665N.Text = "in >= " + tmin.ToString + " in"

                GoTo Line1

            End If

            If TextBox207.Text <> String.Empty And Piv2 <> 0 Then
                Phiprima = Val(TextBox207.Text) * Math.PI / 180
                Phi = Val(TextBox204.Text) * Math.PI / 180

                w = Math.Round(Lw * Math.Tan(Phi) + d / 2, 2)

                wprima = Math.Round(Lw * Math.Tan(Phiprima) + d / 2, 2)

                gW = w + wprima

                If w < Awtmr / 2 Then
                    egW1 = w
                Else
                    egW1 = Awtmr / 2
                End If

                If wprima < Awtmr / 2 Then
                    egW2 = wprima
                Else
                    egW2 = Awtmr / 2
                End If

                egW = egW1 + egW2

                TextBox217N.Text = gW.ToString
                gWdth = gW

                TextBox205.Text = String.Empty

                gPhiprima = Phiprima

                Piv2 = 0

                If Tipo <> 10 And Tipo <> 11 Then
                    tmin = Math.Round(Tu / (0.9 * Fyp * egW), 2)
                Else
                    tmin = Math.Round(Tu2 / (0.9 * Fyp * egW), 2)
                End If

                Label665N.Text = "in >= " + tmin.ToString + " in"

                GoTo Line1

            End If

            Phi = gPhi
            Phiprima = gPhiprima

        ElseIf Tipo = 8 And Inferior = False Then

            If TextBox362.Text <> String.Empty And Piv = 1 Then

                Phi = Val(TextBox362.Text) * Math.PI / 180
                Phiprima = Val(TextBox359.Text) * Math.PI / 180
                w = Math.Round(Lw * Math.Tan(Phi) + d / 2, 2)

                wprima = Math.Round(Lw * Math.Tan(Phiprima) + d / 2, 2)

                gW = w + wprima

                If w < Awtmr / 2 Then
                    egW1 = w
                Else
                    egW1 = Awtmr / 2
                End If

                If wprima < Awtmr / 2 Then
                    egW2 = wprima
                Else
                    egW2 = Awtmr / 2
                End If

                egW = egW1 + egW2

                TextBox346.Text = gW.ToString
                gWdth = gW

                TextBox361.Text = String.Empty
                TextBox360.Text = String.Empty
                TextBox350.Text = String.Empty

                gPhi = Phi

                Piv = 0

                tmin = Math.Round(Tu / (0.9 * Fyp * egW), 2)

                Label477.Text = "in >= " + tmin.ToString + " in"

                GoTo Line1

            End If

            If TextBox359.Text <> String.Empty And Piv2 = 1 Then
                Phiprima = Val(TextBox359.Text) * Math.PI / 180
                Phi = Val(TextBox362.Text) * Math.PI / 180

                w = Math.Round(Lw * Math.Tan(Phi) + d / 2, 2)

                wprima = Math.Round(Lw * Math.Tan(Phiprima) + d / 2, 2)

                gW = w + wprima

                If w < Awtmr / 2 Then
                    egW1 = w
                Else
                    egW1 = Awtmr / 2
                End If

                If wprima < Awtmr / 2 Then
                    egW2 = wprima
                Else
                    egW2 = Awtmr / 2
                End If

                egW = egW1 + egW2

                TextBox346.Text = gW.ToString
                gWdth = gW

                TextBox361.Text = ""
                TextBox360.Text = ""
                TextBox350.Text = ""

                gPhiprima = Phiprima

                Piv2 = 0

                tmin = Math.Round(Tu / (0.9 * Fyp * egW), 2)

                Label477.Text = "in >= " + tmin.ToString + " in"

                GoTo Line1

            End If

            Phi = gPhi
            Phiprima = gPhiprima

        ElseIf Tipo = 8 And Inferior = True Then

            If TextBox376.Text <> String.Empty And Piv = 1 Then
                Phi = Val(TextBox376.Text) * Math.PI / 180
                Phiprima = Val(TextBox373.Text) * Math.PI / 180
                w = Math.Round(Lw * Math.Tan(Phi) + d / 2, 2)

                wprima = Math.Round(Lw * Math.Tan(Phiprima) + d / 2, 2)

                gW = w + wprima

                If w < Awtmr / 2 Then
                    egW1 = w
                Else
                    egW1 = Awtmr / 2
                End If

                If wprima < Awtmr / 2 Then
                    egW2 = wprima
                Else
                    egW2 = Awtmr / 2
                End If

                egW = egW1 + egW2

                TextBox378.Text = gW.ToString
                gWdthi = gW

                TextBox375.Text = String.Empty
                TextBox374.Text = String.Empty
                TextBox364.Text = String.Empty

                gPhi = Phi

                Piv = 0

                tmin = Math.Round(Tu2 / (0.9 * Fyp * egW), 2)

                Label1145.Text = "in >= " + tmin.ToString + " in"

                GoTo Line1
            End If

            If TextBox373.Text <> String.Empty And Piv2 = 1 Then
                Phiprima = Val(TextBox373.Text) * Math.PI / 180
                Phi = Val(TextBox376.Text) * Math.PI / 180

                w = Math.Round(Lw * Math.Tan(Phi) + d / 2, 2)

                wprima = Math.Round(Lw * Math.Tan(Phiprima) + d / 2, 2)

                gW = w + wprima

                If w < Awtmr / 2 Then
                    egW1 = w
                Else
                    egW1 = Awtmr / 2
                End If

                If wprima < Awtmr / 2 Then
                    egW2 = wprima
                Else
                    egW2 = Awtmr / 2
                End If

                egW = egW1 + egW2

                TextBox378.Text = gW.ToString
                gWdthi = gW

                TextBox375.Text = String.Empty
                TextBox374.Text = String.Empty
                TextBox364.Text = String.Empty

                gPhiprima = Phiprima

                Piv2 = 0

                tmin = Math.Round(Tu2 / (0.9 * Fyp * egW), 2)

                Label1145.Text = "in >= " + tmin.ToString + " in"

                GoTo Line1

            End If

            Phi = gPhi
            Phiprima = gPhiprima

        ElseIf Tipo = 9 And Inferior = False Then

            If TextBox270.Text <> "" And Piv = 1 Then

                Phiprima = Val(TextBox270.Text) * Math.PI / 180
                Phi = Math.PI / 2 - theta

                wprima = Math.Round(Lw * Math.Tan(Phiprima) + d / 2, 2)

                gW = w + wprima

                If w < Awtmr / 2 Then
                    egW1 = w
                Else
                    egW1 = Awtmr / 2
                End If

                If wprima < Awtmr / 2 Then
                    egW2 = wprima
                Else
                    egW2 = Awtmr / 2
                End If

                egW = egW1 + egW2

                TextBox258.Text = gW.ToString
                gWdth = gW

                TextBox263.Text = ""
                TextBox268.Text = ""
                TextBox261.Text = ""
                TextBox269.Text = ""

                gPhiprima = Phiprima
                gPhi = Phi

                Piv = 0

                tmin = Math.Round(Tu2 / (0.9 * Fyp * egW), 2)

                Label692.Text = "in >= " + tmin.ToString + " in"

                GoTo Line1

            End If

            Phi = gPhi
            Phiprima = gPhiprima

        ElseIf Tipo = 9 And Inferior Then

            If TextBox284.Text <> String.Empty And Piv = 1 Then

                Phiprima = Val(TextBox284.Text) * Math.PI / 180
                Phi = Math.PI / 2 - theta2

                w = Math.Round(Lw * Math.Tan(Phi) + d / 2, 2)

                wprima = Math.Round(Lw * Math.Tan(Phiprima) + d / 2, 2)

                gW = w + wprima

                If w < Awtmr / 2 Then
                    egW1 = w
                Else
                    egW1 = Awtmr / 2
                End If

                If wprima < Awtmr / 2 Then
                    egW2 = wprima
                Else
                    egW2 = Awtmr / 2
                End If

                egW = egW1 + egW2

                TextBox272.Text = gW.ToString
                gWdthi = gW

                TextBox277.Text = ""
                TextBox264.Text = ""
                TextBox275.Text = ""
                TextBox283.Text = ""

                gPhiprimai = Phiprima
                gPhii = Phi

                Piv = 0

                tmin = Math.Round(Tu2 / (0.9 * Fyp * egW), 2)

                Label732.Text = "in >= " + tmin.ToString + " in"

                GoTo Line1

            End If

            Phi = gPhii
            Phiprima = gPhiprimai

        End If

        '=========================================================================================================================
        If Sistema <> "BRBF" Then
            '============ VALOR GEOMÉTRICO w y wprima ==============
            w = Math.Round(Lw * Math.Tan(Phi) + d / 2, 2)
            wprima = Math.Round(Lw * Math.Tan(Phiprima) + d / 2, 2)
            '=======================================================

            '===================VALOR GEOMÉTRICO a ===================
            a = Math.Round(d / 2 + (Lw + DosT) * Math.Tan(Phi), 2)
            '=========================================================

            '===================VALOR GEOMÉTRICO aprima =====================
            aprima = Math.Round(d / 2 + (Lw + DosT) * Math.Tan(Phiprima), 2)
            '================================================================

            'If Tipo = 9 And Inferior = False Then

            '    If TextBox263.Text <> "" And Val(TextBox263.Text) <> aprima Then
            '        aprima = Val(TextBox263.Text)
            '        If aprima <> ga Then
            '            TextBox268.Text = ""
            '            TextBox269.Text = ""
            '        End If
            '    End If

            'ElseIf Tipo = 9 And Inferior Then

            '    If TextBox277.Text <> "" And Val(TextBox277.Text) <> aprima Then
            '        a = Val(TextBox277.Text)
            '        If aprima <> gia Then
            '            TextBox264.Text = ""
            '            TextBox275.Text = ""
            '            TextBox283.Text = ""
            '        End If
            '    End If

            'End If

        Else

            a = Math.Round(Awtmr / 2, 2)
            aprima = Math.Round((Awtmr / 2), 2)

        End If
        

        '==== VALORES GEOMÉTRICOS eb, ec ==
        eb = db / 2
        ec = dc / 2
        '===================================

        '========================================================= VALOR GEOMÉTRICO L ==========================================================
        If Tipo = 6 Or Tipo = 7 Or Tipo = 12 Or Tipo = 13 Or (Tipo = 8 And Inferior = False) Or (Tipo = 9 And Inferior = False) Then
            L = Math.Round(Math.Sqrt((eb * Math.Tan(theta) + a * Math.Sin(theta) * Math.Tan(theta)) ^ 2 + (eb + a * Math.Sin(theta)) ^ 2), 2)
        ElseIf Tipo = 10 Or Tipo = 11 Or (Tipo = 8 And Inferior) Or (Tipo = 9 And Inferior) Or Tipo = 15 Or Tipo = 16 Then
            L = Math.Round(Math.Sqrt((eb * Math.Tan(theta2) + a * Math.Sin(theta2) * Math.Tan(theta2)) ^ 2 + (eb + a * Math.Sin(theta2)) ^ 2), 2)
        ElseIf Tipo = 17 Or (Tipo = 18 And Inferior = False) Or (Tipo = 20 And Inferior = False) Then
            L = Math.Round(Math.Sqrt((eb * Math.Tan(theta) + a * Math.Sin(theta) * Math.Tan(theta)) ^ 2 + (eb + a * Math.Sin(theta)) ^ 2), 2)
        ElseIf Tipo = 19 Or (Tipo = 20 And Inferior) Then
            L = Math.Round(Math.Sqrt((eb * Math.Tan(theta2) + a * Math.Sin(theta2) * Math.Tan(theta2)) ^ 2 + (eb + a * Math.Sin(theta2)) ^ 2), 2)
        ElseIf Tipo = 18 And Inferior Then
            L = Math.Round(Math.Sqrt((eb * Math.Tan(theta2) + a * Math.Sin(theta2) * Math.Tan(theta2)) ^ 2 + (eb + a * Math.Sin(theta2)) ^ 2), 2)
        End If

        If Tipo = 6 Or Tipo = 7 Or Tipo = 10 Or Tipo = 11 Or Tipo = 12 Or Tipo = 13 Or Tipo = 15 Or Tipo = 16 Then
            If TextBox205.Text <> String.Empty And Val(TextBox205.Text) <> L Then
                L = Val(TextBox205.Text)
                If L <> gL Then
                    TextBox337.Text = ""
                    gL = L
                End If
            End If
        ElseIf Tipo = 8 And Inferior = False Then

            If TextBox361.Text <> String.Empty And Val(TextBox361.Text) <> L Then
                L = Val(TextBox361.Text)
                If L <> gL Then
                    TextBox350.Text = ""
                    gL = L
                End If
            End If

        ElseIf Tipo = 8 And Inferior = True Then

            If TextBox375.Text <> String.Empty And Val(TextBox375.Text) <> L Then
                L = Val(TextBox375.Text)
                If L <> gL Then
                    TextBox364.Text = ""
                    gL = L
                End If
            End If

        ElseIf Tipo = 9 And Inferior = False Then

            If TextBox261.Text <> String.Empty And Val(TextBox261.Text) <> L Then
                L = Val(TextBox261.Text)
                If L <> gL Then
                    TextBox269.Text = ""
                    gL = L
                End If
            End If

        ElseIf Tipo = 9 And Inferior Then

            If TextBox275.Text <> String.Empty And Val(TextBox275.Text) <> L Then
                L = Val(TextBox275.Text)
                If L <> gL Then
                    TextBox283.Text = ""
                    gL = L
                End If
            End If

        ElseIf Tipo = 17 Or Tipo = 19 Then

            If TextBox243.Text <> String.Empty And Val(TextBox243.Text) <> L Then
                L = Val(TextBox243.Text)
                If L <> gL Then
                    TextBox241.Text = ""
                    TextBox242.Text = ""
                    gL = L
                End If
            End If

        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior = False Then

            If TextBox343.Text <> String.Empty And Val(TextBox343.Text) <> L Then
                L = Val(TextBox343.Text)
                If L <> gL Then
                    TextBox342.Text = ""
                    TextBox341.Text = ""
                    gL = L
                End If
            End If

        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior Then

            If TextBox392.Text <> String.Empty And Val(TextBox392.Text) <> L Then
                L = Val(TextBox392.Text)
                If L <> gL Then
                    TextBox391.Text = ""
                    TextBox390.Text = ""
                    gL = L
                End If
            End If

        End If
        '=======================================================================================================================================

        '============================================ VALOR GEOMÉTRICO L_A =======================================================
        If Tipo = 6 Or Tipo = 7 Or Tipo = 12 Or Tipo = 13 Or (Tipo = 8 And Inferior = False) Then
            L_A = Math.Round(aprima / Math.Cos(theta) + eb * Math.Tan(theta) - ec, 2)
        ElseIf Tipo = 10 Or Tipo = 11 Or (Tipo = 8 And Inferior) Or Tipo = 15 Or Tipo = 16 Then
            L_A = Math.Round(aprima / Math.Cos(theta2) + eb * Math.Tan(theta2) - ec, 2)
        ElseIf Tipo = 9 And Inferior = False Then
            L_A = Math.Round(2 * (aprima / Math.Cos(theta) + eb * Math.Tan(theta) - ec), 2)
        ElseIf Tipo = 9 And Inferior Then
            L_A = Math.Round(2 * (aprima / Math.Cos(theta2) + eb * Math.Tan(theta2) - ec), 2)
        ElseIf Tipo = 17 Or (Tipo = 18 And Inferior = False) Then
            L_A = Math.Round((L + Llug) * Math.Sin(theta) - ec + d / 2 * Math.Cos(theta), 2)
        ElseIf Tipo = 19 Or (Tipo = 20 And Inferior) Then
            L_A = Math.Round((L + Llug) * Math.Sin(theta2) + d / 2 * Math.Cos(theta2), 2)
        ElseIf Tipo = 20 And Inferior = False Then
            L_A = Math.Round((L + Llug) * Math.Sin(theta) + d / 2 * Math.Cos(theta), 2)
        ElseIf Tipo = 18 And Inferior Then
            L_A = Math.Round((L + Llug) * Math.Sin(theta2) - ec + d / 2 * Math.Cos(theta2), 2)
        End If

        If Tipo = 6 Or Tipo = 7 Or Tipo = 10 Or Tipo = 11 Or Tipo = 12 Or Tipo = 13 Or Tipo = 15 Or Tipo = 16 Then

            If TextBox206.Text <> String.Empty And Val(TextBox206.Text) <> L_A Then
                L_A = Val(TextBox206.Text)
            End If

        ElseIf Tipo = 8 And Inferior = False Then

            If TextBox360.Text <> String.Empty And Val(TextBox360.Text) <> L_A Then
                L_A = Val(TextBox360.Text)
            End If

        ElseIf Tipo = 8 And Inferior = True Then

            If TextBox374.Text <> String.Empty And Val(TextBox374.Text) <> L_A Then
                L_A = Val(TextBox374.Text)
            End If

        ElseIf Tipo = 9 And Inferior = False Then

            If TextBox268.Text <> String.Empty And Val(TextBox268.Text) <> L_A Then
                L_A = Val(TextBox268.Text)
            End If

        ElseIf Tipo = 9 And Inferior Then

            If TextBox264.Text <> String.Empty And Val(TextBox264.Text) <> L_A Then
                L_A = Val(TextBox264.Text)
            End If

        ElseIf Tipo = 17 Or Tipo = 19 Then

            If TextBox242.Text <> String.Empty And Val(TextBox242.Text) <> L_A Then
                L_A = Val(TextBox242.Text)
            End If

        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior = False Then

            If TextBox342.Text <> String.Empty And Val(TextBox342.Text) <> L_A Then
                L_A = Val(TextBox342.Text)
            End If

        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior Then

            If TextBox391.Text <> String.Empty And Val(TextBox391.Text) <> L_A Then
                L_A = Val(TextBox391.Text)
            End If

        End If

        '==========================================================================================================================

        '==================================================== VALOR GEOMÉTRICO L_B ==================================================================
        If Tipo = 6 Or Tipo = 7 Or Tipo = 12 Or Tipo = 13 Or (Tipo = 8 And Inferior = False) Or (Tipo = 9 And Inferior = False) Then
            L_B = Math.Round((L + Lw + DosT) * Math.Cos(theta) + d / 2 * Math.Sin(theta) - eb - ((L + Lw + DosT) * Math.Sin(theta) - d / 2 * Math.Cos(theta) - ec) * Math.Tan(Math.PI / 2 - Phi - theta), 2)
        ElseIf Tipo = 10 Or Tipo = 11 Or (Tipo = 8 And Inferior) Or (Tipo = 9 And Inferior) Or Tipo = 15 Or Tipo = 16 Then
            L_B = Math.Round((L + Lw + DosT) * Math.Cos(theta2) + d / 2 * Math.Sin(theta2) - eb - ((L + Lw + DosT) * Math.Sin(theta2) - d / 2 * Math.Cos(theta2) - ec) * Math.Tan(Math.PI / 2 - Phi - theta2), 2)
        ElseIf Tipo = 17 Or ((Tipo = 18 Or Tipo = 20) And Inferior = False) Then
            L_B = Math.Round((L + Llug) * Math.Cos(theta) + d / 2 * Math.Sin(theta) - eb, 2)
        ElseIf Tipo = 19 Or (Tipo = 20 And Inferior) Then
            L_B = Math.Round((L + Llug) * Math.Cos(theta2) + d / 2 * Math.Sin(theta2) - eb, 2)
        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior Then
            L_B = Math.Round((L + Llug) * Math.Cos(theta2) + d / 2 * Math.Sin(theta2) - eb, 2)
        End If

        If Tipo = 6 Or Tipo = 7 Or Tipo = 10 Or Tipo = 11 Or Tipo = 12 Or Tipo = 13 Or Tipo = 15 Or Tipo = 16 Then

            If TextBox337.Text <> String.Empty And Val(TextBox337.Text) <> L_B Then
                L_B = Val(TextBox337.Text)
            End If

        ElseIf Tipo = 8 And Inferior = False Then

            If TextBox350.Text <> String.Empty And Val(TextBox350.Text) <> L_B Then
                L_B = Val(TextBox350.Text)
            End If

        ElseIf Tipo = 8 And Inferior = True Then

            If TextBox364.Text <> String.Empty And Val(TextBox364.Text) <> L_B Then
                L_B = Val(TextBox364.Text)
            End If

        ElseIf Tipo = 9 And Inferior = False Then

            If TextBox269.Text <> String.Empty And Val(TextBox269.Text) <> L_B Then
                L_B = Val(TextBox269.Text)
            End If

        ElseIf Tipo = 9 And Inferior Then

            If TextBox283.Text <> String.Empty And Val(TextBox283.Text) <> L_B Then
                L_B = Val(TextBox283.Text)
            End If

        ElseIf Tipo = 17 Or Tipo = 19 Then

            If TextBox241.Text <> String.Empty And Val(TextBox241.Text) <> L_B Then
                L_B = Val(TextBox241.Text)
            End If

        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior = False Then

            If TextBox341.Text <> String.Empty And Val(TextBox341.Text) <> L_B Then
                L_B = Val(TextBox341.Text)
            End If

        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior Then

            If TextBox390.Text <> String.Empty And Val(TextBox390.Text) <> L_B Then
                L_B = Val(TextBox390.Text)
            End If

        End If

        '=============================================================================================================================================

        '====================================== VALOR GEOMÉTRICO lbckl ====================================================================
        If Tipo = 6 Or Tipo = 7 Or Tipo = 12 Or Tipo = 13 Or (Tipo = 8 And Inferior = False) Then
            lbckl = Math.Round(a * Math.Tan(theta) + DosT, 2)
        ElseIf Tipo = 10 Or Tipo = 11 Or (Tipo = 8 And Inferior) Or Tipo = 15 Or Tipo = 16 Then
            lbckl = Math.Round(a * Math.Tan(theta2) + DosT, 2)
        ElseIf Tipo = 9 And Inferior = False Then
            lbckl = Math.Round(aprima * Math.Tan(theta) + DosT, 2)
        ElseIf Tipo = 9 And Inferior Then
            lbckl = Math.Round(aprima * Math.Tan(theta2) + DosT, 2)
        ElseIf Tipo = 17 Or ((Tipo = 18 Or Tipo = 20) And Inferior = False) Then
            lbckl = Math.Round(a * Math.Tan(theta), 2)
        ElseIf Tipo = 19 Or ((Tipo = 18 Or Tipo = 20) And Inferior) Then
            lbckl = Math.Round(a * Math.Tan(theta2), 2)
        End If
        '==================================================================================================================================

        '=========== VALOR GEOMÉTRICO gW =========================
        If Tipo = 17 Or Tipo = 18 Then
            gW = Math.Round(Math.Sqrt(L_A ^ 2 + L_B ^ 2), 2)
        ElseIf Tipo = 19 Or Tipo = 20 Then
            gW = 2 * L_A
        End If
        '==========================================================

        '============= Pandeo del ancho de Whitmore y aplastamiento de los pernos ===============
        If t <> 0 Then
            Dim Klr, Fe, Fcr, nbckl As Double

            If Sistema = "SCBF" Then
                nbckl = 0.6
            Else
                nbckl = 0.5
            End If

            Klr = Math.Round(nbckl * lbckl / (t / Math.Sqrt(12)), 2)
            Fe = Math.Round((Math.PI ^ 2) * 29000 / Klr ^ 2, 2)

            If Klr <= 4.71 * Math.Sqrt(29000 / Fybr) Then
                Fcr = Math.Round(0.658 ^ (Fyp / Fe) * Fyp, 2)
            Else
                Fcr = Math.Round(0.877 * Fe, 2)
            End If

            PhiRn1 = Math.Round(1.14 * Fcr * Awtmr * t, 2)

            If Tipo = 17 Then
                Label553.Text = PhiRn1.ToString + " kips"
                If 1.1 * Pu > PhiRn1 Then
                    Label553.ForeColor = Color.Red
                Else
                    Label553.ForeColor = Color.White
                    Label553.BackColor = Color.Transparent
                End If
            ElseIf Tipo = 19 Then
                Label553.Text = PhiRn1.ToString + " kips"
                If 1.1 * Pu2 > PhiRn1 Then
                    Label553.ForeColor = Color.Red
                Else
                    Label553.ForeColor = Color.White
                End If
            ElseIf (Tipo = 18 Or Tipo = 20) And Inferior = False Then
                Label578.Text = PhiRn1.ToString + " kips"
                If 1.1 * Pu > PhiRn1 Then
                    Label578.ForeColor = Color.Red
                Else
                    Label578.ForeColor = Color.White
                End If
            ElseIf (Tipo = 18 Or Tipo = 20) And Inferior Then
                Label1174.Text = PhiRn1.ToString + " kips"
                If 1.1 * Pu > PhiRn1 Then
                    Label1174.ForeColor = Color.Red
                Else
                    Label1174.ForeColor = Color.White
                End If
            ElseIf Tipo = 6 Or Tipo = 7 Or Tipo = 12 Or Tipo = 13 Then

                Label383.Text = (1.1 * Pu).ToString + " kips"

                Label381.Text = PhiRn1.ToString + " kips"

                If 1.1 * Pu > PhiRn1 Then
                    Label381.ForeColor = Color.Red
                Else
                    Label381.ForeColor = Color.White
                End If
            ElseIf Tipo = 10 Or Tipo = 11 Or Tipo = 15 Or Tipo = 16 Then

                If Tipo = 10 Or Tipo = 11 Then
                    Label383.Text = (1.1 * Pu2).ToString + " kips"

                    If 1.1 * Pu2 > PhiRn1 Then
                        Label381.ForeColor = Color.Red
                    Else
                        Label381.ForeColor = Color.White
                    End If
                Else
                    Label383.Text = (1.1 * Pu).ToString + " kips"

                    If 1.1 * Pu > PhiRn1 Then
                        Label381.ForeColor = Color.Red
                    Else
                        Label381.ForeColor = Color.White
                    End If
                End If

                Label381.Text = PhiRn1.ToString + " kips"

            ElseIf Tipo = 8 And Inferior = False Then
                Label1086.Text = (1.1 * Pu).ToString + " kips"

                Label1095.Text = PhiRn1.ToString + " kips"

                If 1.1 * Pu > PhiRn1 Then
                    Label1095.ForeColor = Color.Red
                Else
                    Label1095.ForeColor = Color.White
                End If
            ElseIf Tipo = 8 And Inferior Then
                Label1118.Text = (1.1 * Pu2).ToString + " kips"

                Label1119.Text = PhiRn1.ToString + " kips"

                If 1.1 * Pu2 > PhiRn1 Then
                    Label1119.ForeColor = Color.Red
                Else
                    Label1119.ForeColor = Color.White
                End If
            ElseIf Tipo = 9 And Inferior = False Then

                Label703.Text = (1.1 * Pu).ToString + " kips"
                Label705.Text = PhiRn1.ToString + " kips"

                If 1.1 * Pu > PhiRn1 Then
                    Label705.ForeColor = Color.Red
                Else
                    Label705.ForeColor = Color.White
                End If

            ElseIf Tipo = 9 And Inferior Then

                Label743.Text = (1.1 * Pu2).ToString + " kips"
                Label745.Text = PhiRn1.ToString + " kips"

                If 1.1 * Pu2 > PhiRn1 Then
                    Label745.ForeColor = Color.Red
                Else
                    Label745.ForeColor = Color.White
                End If

            End If

            If Sistema = "BRBF" Then

                Dim Lci, Lco, PhiRn As Double

                Lci = Math.Round(S - HoleDiam, 2)
                Lco = Math.Round(Leh - HoleDiam / 2, 2)

                PhiRn1 = Math.Round(Math.Min(1.2 * Lci * t * Fup, 2.4 * BoltDiam * t * Fup), 2)
                PhiRn2 = Math.Round(Math.Min(1.2 * Lco * t * Fup, 2.4 * BoltDiam * t * Fup), 2)
                PhiRn = PhiRn1 * (Nb - 1) + PhiRn2

                If Tipo = 17 Then
                    Label550.Text = PhiRn.ToString + " kips"
                    If PhiRn < 1.1 * Pu Then
                        Label550.ForeColor = Color.Red
                    Else
                        Label550.ForeColor = Color.White
                    End If
                ElseIf Tipo = 19 Then
                    Label550.Text = PhiRn.ToString + " kips"
                    If PhiRn < 1.1 * Pu2 Then
                        Label550.ForeColor = Color.Red
                    Else
                        Label550.ForeColor = Color.White
                    End If
                ElseIf (Tipo = 18 Or Tipo = 20) And Inferior = False Then
                    Label581.Text = PhiRn.ToString + " kips"
                    If PhiRn < 1.1 * Pu Then
                        Label581.ForeColor = Color.Red
                    Else
                        Label581.ForeColor = Color.White
                    End If
                ElseIf (Tipo = 18 Or Tipo = 20) And Inferior Then
                    Label1177.Text = PhiRn.ToString + " kips"
                    If PhiRn < 1.1 * Pu2 Then
                        Label1177.ForeColor = Color.Red
                    Else
                        Label1177.ForeColor = Color.White
                    End If
                End If

            End If
        End If

        'LLENADO DE LOS TEXTBOXES

        If Tipo = 6 Or Tipo = 7 Or Tipo = 10 Or Tipo = 11 Or Tipo = 12 Or Tipo = 13 Or Tipo = 15 Or Tipo = 16 Then

            TextBox204.Text = (Math.Round(gPhi * 180 / Math.PI, 2)).ToString
            TextBox207.Text = (Math.Round(gPhiprima * 180 / Math.PI, 2)).ToString
            TextBox219.Text = DosT.ToString
            TextBox205.Text = L.ToString
            TextBox206.Text = L_A.ToString
            TextBox337.Text = L_B.ToString
            TextBox220.Text = d.ToString
            TextBox213.Text = Lw.ToString
            TextBox216.Text = a.ToString
            TextBox217.Text = aprima.ToString
            TextBox218.Text = eb.ToString
            TextBox316.Text = ec.ToString
            TextBox336.Text = lbckl.ToString
            TextBox344.Text = (Math.Round(theta * 180 / Math.PI, 2)).ToString

            If (Tipo = 6 Or Tipo = 10 Or Tipo = 12 Or Tipo = 15) Then
                ComboBox19_SelectedIndexChanged(AbrirToolStripMenuItem1, Nothing)
            Else
                CargasResistencias()
            End If

        ElseIf Tipo = 8 And Inferior = False Then

            TextBox362.Text = (Math.Round(gPhi * 180 / Math.PI, 2)).ToString
            TextBox359.Text = (Math.Round(gPhiprima * 180 / Math.PI, 2)).ToString
            TextBox354.Text = DosT.ToString
            TextBox361.Text = L.ToString
            TextBox360.Text = L_A.ToString
            TextBox350.Text = L_B.ToString
            TextBox353.Text = d.ToString
            TextBox358.Text = Lw.ToString
            TextBox357.Text = a.ToString
            TextBox356.Text = aprima.ToString
            TextBox355.Text = eb.ToString
            TextBox352.Text = ec.ToString
            TextBox351.Text = lbckl.ToString
            TextBox349.Text = (Math.Round(theta * 180 / Math.PI, 2)).ToString

            If TextBox367.Text <> "" And TextBox353.Text <> "" Then
                CargasResistencias()
            End If

        ElseIf Tipo = 8 And Inferior Then

            TextBox376.Text = (Math.Round(gPhi * 180 / Math.PI, 2)).ToString
            TextBox373.Text = (Math.Round(gPhiprima * 180 / Math.PI, 2)).ToString
            TextBox368.Text = DosT.ToString
            TextBox375.Text = L.ToString
            TextBox374.Text = L_A.ToString
            TextBox364.Text = L_B.ToString
            TextBox367.Text = d.ToString
            TextBox372.Text = Lw.ToString
            TextBox371.Text = a.ToString
            TextBox370.Text = aprima.ToString
            TextBox369.Text = eb.ToString
            TextBox366.Text = ec.ToString
            TextBox365.Text = lbckl.ToString
            TextBox363.Text = (Math.Round(theta * 180 / Math.PI, 2)).ToString

            If TextBox367.Text <> "" And TextBox353.Text <> "" Then
                CargasResistencias()
            End If

        ElseIf Tipo = 17 Or Tipo = 19 Then
            If Tipo = 17 Then
                TextBox235.Text = (Math.Round(theta * 180 / Math.PI, 2)).ToString
            Else
                TextBox235.Text = (Math.Round(theta2 * 180 / Math.PI, 2)).ToString
            End If
            TextBox234.Text = d.ToString
            TextBox237.Text = a.ToString
            TextBox236.Text = LongLug.ToString
            TextBox243.Text = L.ToString
            TextBox242.Text = L_A.ToString
            TextBox241.Text = L_B.ToString
            TextBox232.Text = gW.ToString
            If Tipo = 17 And t <> 0 Then
                DistribCargas(TextBox242, TextBox241, 1, Label1339, Label1338, Label1325, Label1325, Label1329, "BC", Label319, Label319, Label319, False)
                DistribCargas(TextBox242, TextBox241, 1, Label1319, Label1318, Label1300, Label1311, Label1314, "GB", Label1301, Label1290, Label1293, False)
                DistribCargas(TextBox242, TextBox241, 1, Label1259, Label1258, Label1240, Label1251, Label1254, "GC", Label1241, Label1230, Label1233, False)
                Resistencias("Column", Label1322, Label1320, Label1298, Label1298, TextBox244, TextBox242, TextBox241, "BC", Label1324, False)
                Resistencias("Beam", Label1306, Label1304, Label1298, Label1296, TextBox244, TextBox242, TextBox241, "GB", Label1308, False)
                Resistencias("Column", Label1246, Label1244, Label1238, Label1236, TextBox244, TextBox242, TextBox241, "GC", Label1248, False)
                Comparación(Label1322, Label1320, Label1293, Label1290, Label298, Label1296, Label1296, Label1325)
                Comparación(Label1306, Label1304, Label1293, Label1290, Label1298, Label1296, Label1300, Label1311)
                Comparación(Label1246, Label1244, Label1233, Label1230, Label1238, Label1236, Label1240, Label1251)
                PhiRnStub(Label1333, Label1335, TextBox242)
                Label1339.Text = Label1339.Text + " kips"
                Label1338.Text = Label1338.Text + " kips"
                Label1319.Text = Label1319.Text + " kips"
                Label1318.Text = Label1318.Text + " kips"
                Label1258.Text = Label1258.Text + " kips"
                Label1259.Text = Label1259.Text + " kips"
            End If

            If Tipo = 19 And t <> 0 Then
                CargasGussetX(TextBox242, TextBox235, TextBox235, TextBox236, TextBox236, Label1416, Label1413, Label1415, Label1524, Label1525, Label1453, Label1522, Label1458, Label1456, Label1417, Label1469, Label1422, Label1450, Label1463, True)
                ResistenciasX(Label1446, Label1448, TextBox232, Label1474, Label1472, True)
                ComparaciónX2(Label1453, Label1450, Label1422, Label1417, Label1469, Label1458, Label1456, Label1448, Label1446, Label1474, Label1472)
            End If

            Label1198.Text = VBM.ToString + " kips"
            Label1342.Text = VnBM.ToString + " kips"

            If VBM > VnBM Then
                Label1342.ForeColor = Color.Red
            Else
                Label1342.ForeColor = Color.White
            End If

        ElseIf Tipo = 9 And Inferior = False Then

            TextBox270.Text = (Math.Round(gPhiprima * 180 / Math.PI, 2)).ToString
            TextBox267.Text = DosT.ToString
            TextBox263.Text = aprima.ToString
            TextBox268.Text = L_A.ToString
            TextBox261.Text = L.ToString
            TextBox269.Text = L_B.ToString
            TextBox262.Text = lbckl.ToString
            TextBox266.Text = d.ToString

            CargasGussetX(TextBox269, TextBox270, TextBox267, TextBox259, TextBox266, Label793, Label774, Label792, Label757, Label761, Label835, Label756, Label754, Label716, Label775, Label764, Label767, Label832, Label785, False)
            ResistenciasX(Label770, Label772, TextBox268, Label780, Label778, False)
            ComparaciónX2(Label835, Label832, Label767, Label764, Label775, Label754, Label716, Label772, Label770, Label780, Label778)
            If TextBox280.Text <> "" Then
                CargasGussetX(TextBox283, TextBox284, TextBox281, TextBox273, TextBox280, Label823, Label822, Label804, Label831, Label829, Label841, Label830, Label827, Label825, Label805, Label794, Label797, Label838, Label815, True)
                ResistenciasX(Label800, Label802, TextBox264, Label810, Label808, True)
                ComparaciónX2(Label841, Label838, Label797, Label794, Label805, Label827, Label825, Label802, Label800, Label810, Label808)
            End If

        ElseIf Tipo = 9 And Inferior Then

            TextBox284.Text = (Math.Round(gPhiprimai * 180 / Math.PI, 2)).ToString
            TextBox281.Text = DosT.ToString
            TextBox277.Text = aprima.ToString
            TextBox264.Text = L_A.ToString
            TextBox275.Text = L.ToString
            TextBox283.Text = L_B.ToString
            TextBox276.Text = lbckl.ToString
            TextBox280.Text = d.ToString

            CargasGussetX(TextBox283, TextBox284, TextBox281, TextBox273, TextBox280, Label823, Label822, Label804, Label831, Label829, Label841, Label830, Label827, Label825, Label805, Label794, Label797, Label838, Label815, True)
            ResistenciasX(Label800, Label802, TextBox264, Label810, Label808, True)
            ComparaciónX2(Label841, Label838, Label797, Label794, Label805, Label827, Label825, Label802, Label800, Label810, Label808)
            If TextBox266.Text <> "" Then
                CargasGussetX(TextBox269, TextBox270, TextBox267, TextBox259, TextBox266, Label793, Label774, Label792, Label757, Label761, Label835, Label756, Label754, Label716, Label775, Label764, Label767, Label832, Label785, False)
                ResistenciasX(Label770, Label772, TextBox268, Label780, Label778, False)
                ComparaciónX2(Label835, Label832, Label767, Label764, Label775, Label754, Label716, Label772, Label770, Label780, Label778)
            End If

        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior = False Then

            TextBox384.Text = (Math.Round(theta * 180 / Math.PI, 2)).ToString
            TextBox383.Text = d.ToString
            TextBox382.Text = a.ToString
            TextBox381.Text = LongLug.ToString
            TextBox343.Text = L.ToString
            TextBox342.Text = L_A.ToString
            TextBox341.Text = L_B.ToString
            TextBox385.Text = gW.ToString

            If Tipo = 20 Then
                CargasGussetX(TextBox342, TextBox235, TextBox235, TextBox236, TextBox383, Label1416, Label1413, Label1415, Label1524, Label1525, Label1453, Label1522, Label1458, Label1456, Label1417, Label1469, Label1422, Label1450, Label1463, False)
                ResistenciasX(Label1446, Label1448, TextBox232, Label1474, Label1472, False)
                ComparaciónX2(Label1453, Label1450, Label1422, Label1417, Label1469, Label1458, Label1456, Label1448, Label1446, Label1474, Label1472)
            ElseIf Tipo = 18 And TextBox395.Text <> "" Then
                DistribCargas(TextBox343, TextBox341, 1, Label1339, Label1338, Label1325, Label1325, Label1329, "BC", Label319, Label319, Label319, False)
                DistribCargas(TextBox342, TextBox341, 1, Label1319, Label1318, Label1300, Label1311, Label1314, "GB", Label1301, Label1290, Label1293, False)
                DistribCargas(TextBox342, TextBox341, 1, Label1259, Label1258, Label1240, Label1251, Label1254, "GC", Label1241, Label1230, Label1233, False)
                DistribCargas(TextBox391, TextBox390, 1, Label1229, Label1228, Label1217, Label1221, Label1224, "GC", Label1210, Label1200, Label1203, True)
                DistribCargas(TextBox391, TextBox390, 1, Label1289, Label1288, Label1277, Label1281, Label1284, "GB", Label1270, Label1260, Label1263, True)
                Resistencias("Column", Label1322, Label1320, Label1298, Label1298, TextBox340, TextBox342, TextBox341, "BC", Label1324, False)
                Resistencias("Beam", Label1306, Label1304, Label1298, Label1296, TextBox340, TextBox342, TextBox341, "GB", Label1308, False)
                Resistencias("Column", Label1246, Label1244, Label1238, Label1236, TextBox340, TextBox342, TextBox341, "GC", Label1248, False)
                Resistencias("Column", Label1215, Label1213, Label1208, Label1206, TextBox389, TextBox391, TextBox390, "GC", Label1218, True)
                Resistencias("Beam", Label1275, Label1273, Label1268, Label1266, TextBox389, TextBox391, TextBox390, "GB", Label1278, True)
                Comparación(Label1322, Label1320, Label1293, Label1290, Label298, Label1296, Label1296, Label1325)
                Comparación(Label1306, Label1304, Label1293, Label1290, Label1298, Label1296, Label1300, Label1311)
                Comparación(Label1246, Label1244, Label1233, Label1230, Label1238, Label1236, Label1240, Label1251)
                Comparación(Label1215, Label1213, Label1203, Label1200, Label1208, Label1206, Label1217, Label1221)
                Comparación(Label1275, Label1273, Label1263, Label1260, Label1268, Label1266, Label1277, Label1281)
                PhiRnStub(Label1333, Label1335, TextBox341)
                Label1339.Text = Label1339.Text + " kips"
                Label1338.Text = Label1338.Text + " kips"
                Label1319.Text = Label1319.Text + " kips"
                Label1318.Text = Label1318.Text + " kips"
                Label1258.Text = Label1258.Text + " kips"
                Label1259.Text = Label1259.Text + " kips"
                Label1228.Text = Label1228.Text + " kips"
                Label1229.Text = Label1229.Text + " kips"
            End If

        ElseIf (Tipo = 18 Or Tipo = 20) And Inferior Then

            TextBox396.Text = (Math.Round(theta * 180 / Math.PI, 2)).ToString
            TextBox395.Text = d.ToString
            TextBox394.Text = a.ToString
            TextBox393.Text = LongLug.ToString
            TextBox392.Text = L.ToString
            TextBox391.Text = L_A.ToString
            TextBox390.Text = L_B.ToString
            TextBox397.Text = gW.ToString

            If Tipo = 18 And t <> 0 Then
                DistribCargas(TextBox343, TextBox341, 1, Label1339, Label1338, Label1325, Label1325, Label1329, "BC", Label319, Label319, Label319, False)
                DistribCargas(TextBox342, TextBox341, 1, Label1319, Label1318, Label1300, Label1311, Label1314, "GB", Label1301, Label1290, Label1293, False)
                DistribCargas(TextBox342, TextBox341, 1, Label1259, Label1258, Label1240, Label1251, Label1254, "GC", Label1241, Label1230, Label1233, False)
                DistribCargas(TextBox391, TextBox390, 1, Label1229, Label1228, Label1217, Label1221, Label1224, "GC", Label1210, Label1200, Label1203, True)
                DistribCargas(TextBox391, TextBox390, 1, Label1289, Label1288, Label1277, Label1281, Label1284, "GB", Label1270, Label1260, Label1263, True)
                Resistencias("Column", Label1322, Label1320, Label1298, Label1298, TextBox340, TextBox342, TextBox341, "BC", Label1324, False)
                Resistencias("Beam", Label1306, Label1304, Label1298, Label1296, TextBox340, TextBox342, TextBox341, "GB", Label1308, False)
                Resistencias("Column", Label1246, Label1244, Label1238, Label1236, TextBox340, TextBox342, TextBox341, "GC", Label1248, False)
                Resistencias("Column", Label1215, Label1213, Label1208, Label1206, TextBox389, TextBox391, TextBox390, "GC", Label1218, True)
                Resistencias("Beam", Label1275, Label1273, Label1268, Label1266, TextBox389, TextBox391, TextBox390, "GB", Label1278, True)
                Comparación(Label1322, Label1320, Label1293, Label1290, Label298, Label1296, Label1296, Label1325)
                Comparación(Label1306, Label1304, Label1293, Label1290, Label1298, Label1296, Label1300, Label1311)
                Comparación(Label1246, Label1244, Label1233, Label1230, Label1238, Label1236, Label1240, Label1251)
                Comparación(Label1215, Label1213, Label1203, Label1200, Label1208, Label1206, Label1217, Label1221)
                Comparación(Label1275, Label1273, Label1263, Label1260, Label1268, Label1266, Label1277, Label1281)
                PhiRnStub(Label1333, Label1335, TextBox341)
                Label1339.Text = Label1339.Text + " kips"
                Label1338.Text = Label1338.Text + " kips"
                Label1319.Text = Label1319.Text + " kips"
                Label1318.Text = Label1318.Text + " kips"
                Label1258.Text = Label1258.Text + " kips"
                Label1259.Text = Label1259.Text + " kips"
                Label1228.Text = Label1228.Text + " kips"
                Label1229.Text = Label1229.Text + " kips"
            End If

            If Tipo = 20 Then
                CargasGussetX(TextBox391, TextBox391, TextBox391, TextBox391, TextBox395, Label1533, Label1532, Label1530, Label1534, Label1537, Label1494, Label1536, Label1499, Label1497, Label1481, Label1510, Label1484, Label1491, Label1504, True)
                ResistenciasX(Label1487, Label1489, TextBox397, Label1515, Label1513, True)
                ComparaciónX2(Label1494, Label1491, Label1484, Label1481, Label1510, Label1499, Label1497, Label1489, Label1487, Label1515, Label1513)

                Label1517.Text = VBM.ToString + " kips"
                Label1520.Text = VnBM.ToString + " kips"

                If VBM > VnBM Then
                    Label1520.ForeColor = Color.Red
                Else
                    Label1520.ForeColor = Color.White
                End If

            End If



        End If

Line0:

        If t <> git Then
            git = t
        End If

        Inferior = False

    End Sub

    Private Sub TextBox337_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox337.KeyPress
        If OpenMode Then
            GoTo LIne0
        End If
        SoloNumFrac(TextBox337, e)
        If Asc(e.KeyChar) = 13 Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(textbox378.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                textbox378.Text = Frac2Num(textbox378.Text)
            End If
Line0:
            If Tipo = 10 Or Tipo = 11 Or Tipo = 15 Or Tipo = 16 Then
                Inferior = True
            End If
            GeometríaGusset4()
        End If

    End Sub

    '///////////////  (((( DATOS DE ARRIOSTRE BRB RESTRINGIDO AL PANDEO)))))///////////////////////////////////

    Private Sub TextBox224_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox224.KeyPress
        soloNumeros(TextBox224, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox243.Text = ""
            TextBox242.Text = ""
            TextBox241.Text = ""
            GeometríaGusset4()
            TextBox228.Focus()
        End If
    End Sub

    Private Sub TextBox224_TextChanged(sender As Object, e As EventArgs) Handles TextBox224.TextChanged
        GeometríaGusset4()
    End Sub

    Private Sub TextBox226_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox226.KeyPress
        soloNumeros(TextBox226, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox243.Text = ""
            TextBox242.Text = ""
            TextBox241.Text = ""
            GeometríaGusset4()
            TextBox227.Focus()
        End If
    End Sub
    Private Sub TextBox226_TextChanged(sender As Object, e As EventArgs) Handles TextBox226.TextChanged
        Label364.Location = New System.Drawing.Point(253, 61)
        Label364.Text = TextBox226.Text + " in"
    End Sub
    Private Sub TextBox228_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox228.KeyPress
        soloNumeros(TextBox228, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox243.Text = ""
            TextBox242.Text = ""
            TextBox241.Text = ""
            GeometríaGusset4()
            TextBox226.Focus()
        End If
    End Sub

    Private Sub TextBox228_TextChanged(sender As Object, e As EventArgs) Handles TextBox228.TextChanged
        GeometríaGusset4()
        Label391.Text = TextBox228.Text & " in"
    End Sub
    Private Sub TextBox225_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox225.KeyPress
        soloNumeros(TextBox225, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox243.Text = ""
            TextBox242.Text = ""
            TextBox241.Text = ""
            GeometríaGusset4()
            TextBox229.Focus()
        End If
    End Sub

    Private Sub TextBox227_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox227.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloNumeros(TextBox227, e)
        If Asc(e.KeyChar) = 13 And TextBox227.Text <> "" Then
Line0:
            TextBox243.Text = ""
            TextBox242.Text = ""
            TextBox241.Text = ""
            GeometríaGusset4()
            TextBox225.Focus()
        End If
    End Sub

    Private Sub TextBox229_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox229.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloEntero(e)
        If Asc(e.KeyChar) = 13 And TextBox229.Text <> "" Then
Line0:
            PernosBRBF(TextBox229, ListBox6, True)
            TextBox243.Text = ""
            TextBox242.Text = ""
            TextBox241.Text = ""
            GeometríaGusset4()
            ComboBox17.Focus()
        End If
    End Sub

    Private Sub ComboBox17_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox17.SelectedIndexChanged
        ListBox6.SelectedIndex = ComboBox17.SelectedIndex
        ListBox7.SelectedIndex = ComboBox17.SelectedIndex
        PernosBRBF(TextBox229, ListBox6, True)
        GeometríaGusset4()
    End Sub

    Private Sub LinkLabel1_LinkClicked(sender As Object, e As LinkLabelLinkClickedEventArgs) Handles LinkLabel1.LinkClicked
        Process.Start("www.corebrace.com")
    End Sub

    Private Sub LinkLabe12_LinkClicked(sender As Object, e As LinkLabelLinkClickedEventArgs) Handles LinkLabel2.LinkClicked
        Process.Start("www.corebrace.com")
    End Sub

    Private Sub LinkLabel3_LinkClicked(sender As Object, e As LinkLabelLinkClickedEventArgs) Handles LinkLabel3.LinkClicked
        Process.Start("www.corebrace.com")
    End Sub

    Private Sub TextBox336_TextChanged(sender As Object, e As EventArgs) Handles TextBox336.TextChanged
        'If Sistema = "SCBF" Then
        '    PandeoGusset(TextBox336, Val(TextBox218N.Text), egW, TextBox218N, Label381, Pu, Label383, TextBox205)
        'End If
    End Sub

    Private Sub TextBox250_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox250.KeyPress
        soloNumeros(TextBox250, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox343.Text = ""
            TextBox342.Text = ""
            TextBox341.Text = ""
            GeometríaGusset4()
            TextBox246.Focus()
        End If
    End Sub

    Private Sub TextBox246_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox246.KeyPress
        soloNumeros(TextBox246, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox343.Text = ""
            TextBox342.Text = ""
            TextBox341.Text = ""
            GeometríaGusset4()
            TextBox248.Focus()
        End If
    End Sub

    Private Sub TextBox246_TextChanged(sender As Object, e As EventArgs) Handles TextBox246.TextChanged
        Label566.Text = TextBox246.Text & " in"
    End Sub

    Private Sub TextBox248_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox248.KeyPress
        soloNumeros(TextBox248, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox343.Text = ""
            TextBox342.Text = ""
            TextBox341.Text = ""
            GeometríaGusset4()
            TextBox247.Focus()
        End If
    End Sub

    Private Sub TextBox248_TextChanged(sender As Object, e As EventArgs) Handles TextBox248.TextChanged
        Label567.Location = New System.Drawing.Point(239, 62)
        Label567.Text = TextBox248.Text & " in"
    End Sub

    Private Sub TextBox247_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox247.KeyPress
        soloNumeros(TextBox247, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox343.Text = ""
            TextBox342.Text = ""
            TextBox341.Text = ""
            GeometríaGusset4()
            TextBox249.Focus()
        End If
    End Sub

    Private Sub TextBox249_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox249.KeyPress
        soloNumeros(TextBox249, e)
        If Asc(e.KeyChar) = 13 Then
            GeometríaGusset4()
            TextBox245.Focus()
        End If
    End Sub

    Private Sub TextBox245_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox245.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloEntero(e)
        If Asc(e.KeyChar) = 13 And TextBox245.Text <> "" Then
Line0:
            PernosBRBF(TextBox245, ListBox8, True)
            GeometríaGusset4()
            ComboBox18.Focus()
        End If
    End Sub

    Private Sub TextBox339_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox339.KeyPress
        soloNumeros(TextBox339, e)
        If Asc(e.KeyChar) = 13 And TextBox339.Text <> "" Then
            TextBox392.Text = ""
            TextBox391.Text = ""
            TextBox390.Text = ""
            Inferior = True
            GeometríaGusset4()
            TextBox252.Focus()
        End If
    End Sub

    Private Sub TextBox252_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox252.KeyPress
        soloNumeros(TextBox252, e)
        If Asc(e.KeyChar) = 13 And TextBox252.Text <> "" Then
            TextBox392.Text = ""
            TextBox391.Text = ""
            TextBox390.Text = ""
            Inferior = True
            GeometríaGusset4()
            TextBox254.Focus()
        End If
    End Sub

    Private Sub TextBox252_TextChanged(sender As Object, e As EventArgs) Handles TextBox252.TextChanged
        Label572.Text = TextBox252.Text & " in"
    End Sub

    Private Sub TextBox254_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox254.KeyPress
        soloNumeros(TextBox254, e)
        If Asc(e.KeyChar) = 13 And TextBox254.Text <> "" Then
            TextBox392.Text = ""
            TextBox391.Text = ""
            TextBox390.Text = ""
            Inferior = True
            GeometríaGusset4()
            TextBox253.Focus()
        End If
    End Sub

    Private Sub TextBox254_TextChanged(sender As Object, e As EventArgs) Handles TextBox254.TextChanged
        Label573.Location = New System.Drawing.Point(239, 468)
        Label573.Text = TextBox254.Text & " in"
    End Sub

    Private Sub TextBox253_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox253.KeyPress
        soloNumeros(TextBox253, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox392.Text = ""
            TextBox391.Text = ""
            TextBox390.Text = ""
            Inferior = True
            GeometríaGusset4()
            TextBox338.Focus()
        End If
    End Sub

    Private Sub TextBox338_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox338.KeyPress
        soloNumeros(TextBox338, e)
        If Asc(e.KeyChar) = 13 Then
            TextBox392.Text = ""
            TextBox391.Text = ""
            TextBox390.Text = ""
            Inferior = True
            GeometríaGusset4()
            TextBox251.Focus()
        End If
    End Sub

    Private Sub TextBox251_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox251.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloEntero(e)
        If Asc(e.KeyChar) = 13 And TextBox251.Text <> "" Then
Line0:
            PernosBRBF(TextBox251, ListBox9, False)
            TextBox392.Text = ""
            TextBox391.Text = ""
            TextBox390.Text = ""
            Inferior = True
            GeometríaGusset4()
            ComboBox20.Focus()
        End If
    End Sub

    '____________________________________________________________________________________________________________________*
    '       
    '                   PRIMER PESTAÑA ("Conexión de arriostre" - UN SOLO ARRIOSTRE BRB)
    '____________________________________________________________________________________________________________________!

    '----------------------------------------------------------------------------------------------
    '¡¡¡ Espesor de Placa Gusset en Primer Pestaña ("Conexión de arriostre" - UN SOLO ARRIOSTRE BRB) 
    Private Sub TextBox244_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox244.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox244, e)

        If Asc(e.KeyChar) = 13 And TextBox244.Text <> "" Then

            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox244.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox244.Text = Frac2Num(TextBox244.Text)
            End If
Line0:
            'PROCEDIMIENTOS DE CHEQUEO DE ESPESOR DE PLACA GUSSET---COMPLETAR!!!
            GeometríaGusset4()
            TextBox243.Focus()
        End If
    End Sub

    '----------------->>>> L (DIMENSION "L" EN PLACA GUSSET PRIMER PESTAÑA)
    Private Sub TextBox243_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox243.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloNumeros(TextBox243, e)
        If Asc(e.KeyChar) = 13 Then
Line0:
            'PROCEDIMIENTO DE GEOMETRIA DE PLACA GUSSET---COMPLETAR!!!
            GeometríaGusset4()
            TextBox242.Focus()
        End If
    End Sub

    '----------------->>>> LA (DIMENSION "L_A" EN PLACA GUSSET PRIMER PESTAÑA)
    Private Sub TextBox242_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox242.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloNumeros(TextBox242, e)
        If Asc(e.KeyChar) = 13 Then
Line0:
            'PROCEDIMIENTO DE GEOMETRIA DE PLACA GUSSET---COMPLETAR!!!
            GeometríaGusset4()
            TextBox241.Focus()
        End If
    End Sub

    '----------------->>>> LB (DIMENSION "L_B" EN PLACA GUSSET PRIMER PESTAÑA)
    Private Sub TextBox241_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox241.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloNumeros(TextBox241, e)
        If Asc(e.KeyChar) = 13 Then
Line0:
            'PROCEDIMIENTO DE GEOMETRIA DE PLACA GUSSET---COMPLETAR!!!
            GeometríaGusset4()
        End If
    End Sub


    '____________________________________________________________________________________________________________________*
    '       
    '                   SEGUNDA PESTAÑA ("Conexión de arriostre" - DOS ARRIOSTRES BRB's)
    '____________________________________________________________________________________________________________________!

    '[[[Arriostre Superior]]]
    '----------------------------------------------------------------------------------------------
    '¡¡¡ Espesor de Placa Gusset SUPERIOR en Segunda Pestaña ("Conexión de arriostre" - DOS ARRIOSTRES BRB's) 

    Private Sub TextBox340_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox340.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox340, e)

        If Asc(e.KeyChar) = 13 And TextBox340.Text <> "" Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox340.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox340.Text = Frac2Num(TextBox340.Text)
            End If
Line0:
            'PROCEDIMIENTOS DE CHEQUEO DE ESPESOR DE PLACA GUSSET---COMPLETAR!!!

            GeometríaGusset4()
            TextBox343.Focus()
        End If
    End Sub

    '----------------->>>> L (DIMENSION "L" EN PLACA GUSSET <<//SUPERIOR//>> SEGUNDA PESTAÑA/arriostre superior)
    Private Sub TextBox343_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox343.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloNumeros(TextBox343, e)
        If Asc(e.KeyChar) = 13 Then
Line0:
            'PROCEDIMIENTO DE GEOMETRIA DE PLACA GUSSET---COMPLETAR!!!
            GeometríaGusset4()
            TextBox342.Focus()
        End If
    End Sub

    '----------------->>>> LA (DIMENSION "L_A" EN PLACA GUSSET <<//SUPERIOR//>> SEGUNDA PESTAÑA/arriostre superior)
    Private Sub TextBox342_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox342.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloNumeros(TextBox342, e)
        If Asc(e.KeyChar) = 13 Then
Line0:
            'PROCEDIMIENTO DE GEOMETRIA DE PLACA GUSSET---COMPLETAR!!!
            GeometríaGusset4()
            TextBox341.Focus()
        End If
    End Sub

    '----------------->>>> LB (DIMENSION "L_B" EN PLACA GUSSET <<//SUPERIOR//>> SEGUNDA PESTAÑA/arriostre superior)
    Private Sub TextBox341_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox341.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloNumeros(TextBox341, e)
        If Asc(e.KeyChar) = 13 Then
Line0:
            'PROCEDIMIENTO DE GEOMETRIA DE PLACA GUSSET---COMPLETAR!!!
            GeometríaGusset4()
            TextBox389.Focus()
        End If
    End Sub

    '[[[Arriostre Inferior]]]
    '----------------------------------------------------------------------------------------------
    '¡¡¡ Espesor de Placa Gusset INFERIOR en Segunda Pestaña ("Conexión de arriostre" - DOS ARRIOSTRES BRB's) 

    Private Sub TextBox389_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox389.KeyPress

        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox389, e)

        If Asc(e.KeyChar) = 13 And TextBox389.Text <> "" Then

            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox389.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox389.Text = Frac2Num(TextBox389.Text)
            End If
Line0:
            'PROCEDIMIENTOS DE CHEQUEO DE ESPESOR DE PLACA GUSSET---COMPLETAR!!!
            Inferior = True
            GeometríaGusset4()
            TextBox392.Focus()
        End If
    End Sub

    '----------------->>>> L (DIMENSION "L" EN PLACA GUSSET <<//INFERIOR//>> SEGUNDA PESTAÑA/arriostre inferior)
    Private Sub TextBox392_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox392.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloNumeros(TextBox392, e)
        If Asc(e.KeyChar) = 13 Then
Line0:
            'PROCEDIMIENTO DE GEOMETRIA DE PLACA GUSSET---COMPLETAR!!!
            Inferior = True
            GeometríaGusset4()
            TextBox391.Focus()
        End If
    End Sub

    '----------------->>>> LA (DIMENSION "L_A" EN PLACA GUSSET <<//INFERIOR//>> SEGUNDA PESTAÑA/arriostre inferior)
    Private Sub TextBox391_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox391.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloNumeros(TextBox391, e)
        If Asc(e.KeyChar) = 13 Then
Line0:
            'PROCEDIMIENTO DE GEOMETRIA DE PLACA GUSSET---COMPLETAR!!!
            Inferior = True
            GeometríaGusset4()
            TextBox390.Focus()
        End If
    End Sub

    '----------------->>>> LB (DIMENSION "L_B" EN PLACA GUSSET <<//INFERIOR//>> SEGUNDA PESTAÑA/arriostre inferior)
    Private Sub TextBox390_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox390.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        soloNumeros(TextBox390, e)
        If Asc(e.KeyChar) = 13 Then
Line0:
            'PROCEDIMIENTO DE GEOMETRIA DE PLACA GUSSET---COMPLETAR!!!
            Inferior = True
            GeometríaGusset4()
        End If
    End Sub

    Private Sub MiembroDúctilBRBF()

        If Tipo = 17 Or Tipo = 18 Then

            'Columna altamente dúctil

            If bcf / 2 / tcf < 0.3 * Math.Sqrt(29000 / Fyc) Then
                HDCL = True
            Else
                HDBR = False
            End If

        End If

        'Viga altamente dúctil

        If bbf / 2 / tbf < 0.3 * Math.Sqrt(29000 / Fyb) Then
            HDBR = True
        Else
            HDBR = False
        End If

    End Sub

    Private Sub CargasBRBF()

        Dim Beta, Omega, Fysc, Ry, Asc As Double
        Dim Beta2, Omega2, Fysc2, Ry2, Asc2 As Double

        If Tipo = 17 Or Tipo = 18 Then

            Beta = Val(PerfilesBRBF.TextBox1.Text)
            Omega = Val(PerfilesBRBF.TextBox2.Text)
            Asc = Val(PerfilesBRBF.TextBox3.Text)
            Beta2 = Val(PerfilesBRBF.TextBox10.Text)
            Omega2 = Val(PerfilesBRBF.TextBox9.Text)
            Asc2 = Val(PerfilesBRBF.TextBox8.Text)
            Fysc = Val(SteelBRBF.TextBox1.Text)
            Ry = Val(SteelBRBF.TextBox2.Text)
            Fysc2 = Val(SteelBRBF.TextBox3.Text)
            Ry2 = Val(SteelBRBF.TextBox4.Text)

        Else

            Beta = Val(PerfilesBRBF2.TextBox1.Text)
            Omega = Val(PerfilesBRBF2.TextBox2.Text)
            Asc = Val(PerfilesBRBF2.TextBox3.Text)
            Beta2 = Val(PerfilesBRBF2.TextBox10.Text)
            Omega2 = Val(PerfilesBRBF2.TextBox9.Text)
            Asc2 = Val(PerfilesBRBF2.TextBox8.Text)
            Fysc = Val(SteelBRBF2.TextBox1.Text)
            Ry = Val(SteelBRBF2.TextBox2.Text)
            Fysc2 = Val(SteelBRBF2.TextBox3.Text)
            Ry2 = Val(SteelBRBF2.TextBox4.Text)

        End If

        Tu = Omega * Ry * Fysc * Asc
        Pu = Beta * Omega * Ry * Fysc * Asc
        Tu2 = Omega2 * Ry2 * Fysc2 * Asc2
        Pu2 = Beta2 * Omega2 * Ry2 * Fysc2 * Asc2

        Dim factcomp As Double

        If OpcionesDiseño.CompConsid = 1 Then
            factcomp = 1
        Else
            factcomp = 0.5
        End If

        '   Carga lateral sobre el marco
        '       Considera los casos de análisis del marco. 1's: Carga lateral en la dirección x positiva
        '                                                  2's: Carga lateral en la dirección x negativa

        Ast1a = Math.Round((Math.Sin(theta2) * (Tu2 + Pu2) - Math.Sin(theta) * (Tu + Pu)) * factcomp, 2)
        Ast2a = -Ast1a

        If Tipo = 17 Or Tipo = 18 Then
            '   Carga axial sobre la viga
            '       Determina por equilibrio de fuerzas la carga axial sobre la viga
            HBm1a = -((Tu * Math.Sin(theta)) - (Pu2 * Math.Sin(theta2)) + Ast1a)
            HBm2a = -((Tu2 * Math.Sin(theta2)) - (Pu * Math.Sin(theta)) - Ast2a)
        End If
        
        '   Cortante gravitacional en la viga
        RuBM = -Math.Round((1.4 * Val(TextBox326.Text) + 0.5 * Val(TextBox325.Text)) / 2, 2)

        '   Cortante por acción de los arriostres en la viga
        Dim CortVig1, CortVig2 As Double

        If Tipo = 17 Or Tipo = 18 Then

            CortVig1 = (Tu * Math.Cos(theta)) / 2
            CortVig2 = -(Pu * Math.Cos(theta)) / 2
            VBM = Math.Round(Math.Max(Math.Abs(RuBM + CortVig1), Math.Abs(RuBM + CortVig2)), 2)

        ElseIf Tipo = 18 Then

            CortVig1 = ((Tu * Math.Cos(theta)) + (Pu2 * Math.Cos(theta2))) / 2
            CortVig2 = -((Pu * Math.Cos(theta)) + (Tu2 * Math.Cos(theta2))) / 2
            VBM = Math.Round(Math.Max(Math.Abs(RuBM + CortVig1), Math.Abs(RuBM + CortVig2)), 2)

        ElseIf Tipo = 19 Then

            CortVig1 = Math.Round((-Tu2 * Math.Cos(theta2) + Pu2 * Math.Cos(theta2)), 2)
            CortVig2 = Math.Round(((Pu2 * Math.Cos(theta2)) - (Tu2 * Math.Cos(theta2))), 2)

            Label1526.Text = RuBM.ToString + " kips"

            If CortVig1 > 0 Then
                Label1528.Text = CortVig2.ToString + " kips"
            Else
                Label1528.Text = CortVig1.ToString + " kips"
            End If

            VBM = Math.Round(Math.Abs(Math.Max(Math.Abs(RuBM + CortVig1), Math.Abs(RuBM + CortVig2))), 2)

        ElseIf Tipo = 20 Then

            CortVig1 = Math.Round((Tu * Math.Cos(theta)) + (-Pu * Math.Cos(theta)), 2)
            CortVig2 = Math.Round((-Tu2 * Math.Cos(theta2) + Pu2 * Math.Cos(theta2)), 2)

            Label1541.Text = CortVig1.ToString + " kips"
            Label1540.Text = CortVig2.ToString + " kips"
            Label1538.Text = RuBM.ToString + " kips"

            VBM = Math.Round(Math.Abs(CortVig1 + CortVig2 + RuBM), 2)

        End If

        'Resistencia disponible al cortante en la viga

        VnBM = 0.6 * Fyb * (db * tbw)

    End Sub

    Private Sub PernosBRBF(Cantidad As TextBox, Diámetro As ListBox, Superior As Boolean)

        Dim Fnv, DiamBolt, NumBolts, Abolt, PhiRnBolts, CantReq As Double
        Fnv = 84
        If Diámetro.SelectedIndex <> -1 Then
            DiamBolt = Val(Diámetro.Text)
            If Cantidad.Text <> "" Then

                NumBolts = Val(Cantidad.Text)

                Abolt = Math.PI * DiamBolt ^ 2 / 4

                PhiRnBolts = 0.75 * Fnv * Abolt

                If Superior Then
                    CantReq = 1.1 * Pu / PhiRnBolts / 2
                Else
                    CantReq = 1.1 * Pu2 / PhiRnBolts / 2
                End If

                If CantReq >= Val(Cantidad.Text) Then
                    Cantidad.BackColor = Color.Red
                Else
                    Cantidad.BackColor = Color.White
                End If

            End If
        End If

    End Sub

    Private Sub TextBox227_TextChanged(sender As Object, e As EventArgs) Handles TextBox227.TextChanged

    End Sub

    Private Sub ComboBox18_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox18.SelectedIndexChanged
        ListBox8.SelectedIndex = ComboBox18.SelectedIndex
        ListBox10.SelectedIndex = ComboBox18.SelectedIndex
        PernosBRBF(TextBox245, ListBox8, True)
        GeometríaGusset4()
    End Sub

    Private Sub ComboBox20_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ComboBox20.SelectedIndexChanged
        ListBox9.SelectedIndex = ComboBox20.SelectedIndex
        ListBox11.SelectedIndex = ComboBox20.SelectedIndex
        PernosBRBF(TextBox251, ListBox9, False)
        Inferior = True
        GeometríaGusset4()
    End Sub

    Private Sub TextBox405_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox405.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox405, e)
        If Asc(e.KeyChar) = 13 And TextBox405.Text <> "" Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox405.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox405.Text = Frac2Num(TextBox405.Text)
            End If
Line0:
            CompD(TextBox405, Label1329, DreqBC, TextBox404)

        End If
    End Sub

    Private Sub TextBox404_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox404.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox405, e)
        If Asc(e.KeyChar) = 13 And TextBox404.Text <> "" Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox404.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox404.Text = Frac2Num(TextBox404.Text)
            End If
Line0:
            CompD(TextBox404, Label1314, DreqGB, TextBox402)

        End If
    End Sub

    Private Sub TextBox402_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox402.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox402, e)
        If Asc(e.KeyChar) = 13 And TextBox402.Text <> "" Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox402.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox402.Text = Frac2Num(TextBox402.Text)
            End If
Line0:
            If Tipo = 18 Then
                CompD(TextBox402, Label1254, DreqGC, TextBox403)
            Else
                CompD(TextBox402, Label1254, DreqGC, TextBox402)
            End If
        End If
    End Sub

    Private Sub TextBox403_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox403.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox403, e)
        If Asc(e.KeyChar) = 13 And TextBox403.Text <> "" Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox403.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox403.Text = Frac2Num(TextBox403.Text)
            End If
Line0:
            CompD(TextBox403, Label1284, DreqGB2, TextBox401)
        End If
    End Sub

    Private Sub TextBox401_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox401.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox401, e)
        If Asc(e.KeyChar) = 13 And TextBox401.Text <> "" Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox401.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox401.Text = Frac2Num(TextBox401.Text)
            End If
Line0:
            CompD(TextBox401, Label1024, DreqGC2, TextBox401)
        End If
    End Sub

    Private Sub Label1541_Click(sender As Object, e As EventArgs)

    End Sub

    Private Sub PictureBox439_Click(sender As Object, e As EventArgs)

    End Sub

    Private Sub GroupBox251_LocationChanged(sender As Object, e As EventArgs)
        Dim movido As Boolean
        movido = True
    End Sub

    Private Sub PictureBox438_LocationChanged(sender As Object, e As EventArgs)
        Dim movido As Boolean
        movido = True
    End Sub

    Private Sub GroupBox250_Enter(sender As Object, e As EventArgs)

    End Sub

    Private Sub GroupBox250_LocationChanged(sender As Object, e As EventArgs)

    End Sub

    Private Sub GroupBox229_LocationChanged(sender As Object, e As EventArgs) Handles GroupBox229.LocationChanged

    End Sub

    Private Sub GroupBox175_LocationChanged(sender As Object, e As EventArgs) Handles GroupBox175.LocationChanged

    End Sub

    Private Sub Button16_Click(sender As Object, e As EventArgs) Handles Button16.Click
        Button17.BackgroundImage = My.Resources.ICONObrbfSoldada
        Button18.BackgroundImage = My.Resources.ICONOsoldadabrbfDoble
        Button16.BackgroundImage = My.Resources.ICONObrbfV_ILUMINADO
        Button16.BackColor = Color.CadetBlue
        Button27.BackgroundImage = My.Resources.ICONObrbfX
        Button27.BackColor = Color.Transparent
        Button17.BackColor = Color.Transparent
        Button18.BackColor = Color.Transparent

        Button1.Enabled = False
        Button2.Enabled = False
        Button3.Enabled = False
        CalcularToolStripMenuItem1.Enabled = True
        GuardarComoToolStripMenuItem1.Enabled = True
        GuardarToolStripMenuItem1.Enabled = True

        GroupBox234.Size = New System.Drawing.Size(863, 895)
        GroupBox175.Visible = True
        GroupBox138N.Visible = False
        GroupBox1.Visible = False
        GroupBox177.Visible = False

        PictureBox338.Image = My.Resources.ConexVCHEVRONbrbf
        PictureBox339.Image = My.Resources.BRBF3

        GroupBox100.Size = New System.Drawing.Size(839, 625)
        PictureBox230.Visible = False
        Label453.Visible = False
        Label431.Visible = False
        Label1170.Visible = True
        Label1170.Location = New System.Drawing.Point(45, 528)
        PictureBox231.Image = My.Resources.BRB_GPLgInferior
        PictureBox231.Size = New System.Drawing.Size(413, 313)
        PictureBox231.Location = New System.Drawing.Point(9, 297)
        GroupBox101.Location = New System.Drawing.Point(18, 27)
        GroupBox102.Location = New System.Drawing.Point(18, 140)
        GroupBox102.Size = New System.Drawing.Size(405, 115)
        Label466.Location = New System.Drawing.Point(75, 38)
        Label465.Location = New System.Drawing.Point(75, 71)
        TextBox233.Location = New System.Drawing.Point(180, 34)
        Label464.Location = New System.Drawing.Point(233, 37)
        TextBox232.Location = New System.Drawing.Point(180, 68)
        Label463.Location = New System.Drawing.Point(224, 71)

        GroupBox120.Location = New System.Drawing.Point(480, 140)
        GroupBox120.Size = New System.Drawing.Size(323, 115)
        Label557.Location = New System.Drawing.Point(47, 56)
        TextBox244.Location = New System.Drawing.Point(146, 51)
        Label555.Location = New System.Drawing.Point(191, 56)
        GroupBox119.Location = New System.Drawing.Point(430, 306)

        'Cambios en las imágenes de geometría
        PictureBox372.Image = My.Resources.BRB_PLsupVC
        PictureBox379.Image = My.Resources.BRB_PLinfVC
        Label1171.Visible = False
        Label1199.Visible = False

        Tipo = 19

        '==============================================================
        'Cambios en Groupbox185 y Groupbox183
        Label1001.Text = "Arriostres:"
        Label1001.Location = New System.Drawing.Point(63, 87)
        Label968.Visible = False
        TextBox293.Visible = False

        Label993.Text = "Arriostres:"
        Label993.Location = New System.Drawing.Point(63, 106)
        Label969.Visible = False
        TextBox310.Visible = False

        GroupBox185.Size = New System.Drawing.Size(240, 117)
        GroupBox183.Size = New System.Drawing.Size(240, 139)
        GroupBox183.Location = New System.Drawing.Point(270, 141)
        GroupBox187.Location = New System.Drawing.Point(270, 282)
        GroupBox188.Location = New System.Drawing.Point(270, 377)

        GroupBox188.Text = "Arriostres"
        GroupBox184.Visible = False

        '==============================================================
        '==============================================================
        '==============================================================
        '==============================================================
        GroupBox237.Text = "Cargas Internas en la sección horizontal de la placa gusset"
        GroupBox243.Text = "Cargas Internas en la sección vertical de la placa gusset"
        GroupBox224.Text = "Soldadura entre la placa gusset y el patín de la viga"
        GroupBox233.Visible = True
        GroupBox247.Visible = False
        GroupBox251.Visible = False
        PictureBox373.Visible = True
        Label1527.Visible = True
        Label1531.Visible = False
        Label1535.Visible = False
        Label1536.Visible = False
        Label1539.Visible = False
        Label1526.Visible = True
        Label1528.Visible = True
        GroupBox248.Visible = False
        GroupBox249.Visible = False
        GroupBox250.Visible = False
        GroupBox251.Visible = False
        PictureBox430.Visible = False
        PictureBox440.Visible = False
        PictureBox441.Visible = False
        PictureBox439.Visible = False
        Label1533.Visible = False
        Label1532.Visible = False
        Label1530.Visible = False
        Label1537.Visible = False
        Label1534.Visible = False
        Label1530.Visible = False
        Label1541.Visible = False
        Label1538.Visible = False
        Label1540.Visible = False

        'PictureBox410.Visible = False
        'PictureBox411.Visible = False
        'PictureBox412.Visible = False
        'PictureBox413.Visible = False
        'GroupBox240.Visible = False
        'GroupBox241.Visible = False
        'GroupBox242.Visible = False
        'GroupBox246.Visible = False
        'GroupBox252.Visible = False
        '==============================================================
        '==============================================================


        labelStatusBar1.Text = "Diseño de conexión Arriostre-Viga en V o Chevron (BRBF)"
        LabelDiseño.Text = "Conexión Arriostre-Viga Chevron BRBF"
    End Sub

    Private Sub GroupBox219_Enter(sender As Object, e As EventArgs) Handles GroupBox219.Enter

    End Sub

    Private Sub TextBox408_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox408.KeyPress
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox408, e)
        If Asc(e.KeyChar) = 13 And TextBox408.Text <> "" Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox408.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox408.Text = Frac2Num(TextBox408.Text)
            End If
Line0:
            If Tipo = 20 Then
                CompD(TextBox408, Label1466, DreqGB, TextBox409)
            Else
                CompD(TextBox408, Label1466, DreqGB2, TextBox409)
            End If

        End If
    End Sub

    Private Sub TextBox409_KeyPress(sender As Object, e As KeyPressEventArgs)
        If OpenMode Then
            GoTo Line0
        End If
        SoloNumFrac(TextBox409, e)
        If Asc(e.KeyChar) = 13 And TextBox409.Text <> "" Then
            Dim exTexto As Integer
            exTexto = Strings.InStr(TextBox409.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox409.Text = Frac2Num(TextBox409.Text)
            End If
Line0:
            CompD(TextBox409, Label1507, DreqGB2, TextBox409)

        End If
    End Sub

    Private Sub TextBox350_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox350.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox350.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox350.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox350.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox350.Text = Frac2Num(TextBox350.Text)
            End If
Line0:
            If TextBox348.Text = "" Or TextBox347.Text = "" Or TextBox346.Text = "" Or TextBox345.Text = "" Or TextBox362.Text = "" Or TextBox359.Text = "" Or TextBox354.Text = "" Or TextBox361.Text = "" Or TextBox360.Text = "" Then
            Else
                GeometríaGusset4()
            End If
        End If
    End Sub

    Private Sub TextBox364_KeyPress(sender As Object, e As KeyPressEventArgs) Handles TextBox364.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox364.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox364.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox364.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox364.Text = Frac2Num(TextBox364.Text)
            End If
Line0:
            If TextBox379.Text <> "" Or TextBox378.Text <> "" Or TextBox377.Text <> "" Or TextBox376.Text <> "" Or TextBox373.Text <> "" Then
                Inferior = True
                GeometríaGusset4()
            End If
        End If
    End Sub

    Private Sub TextBox379_KeyPress_1(sender As Object, e As KeyPressEventArgs) Handles TextBox379.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox379.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox379.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox379.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox360.Text = Frac2Num(TextBox379.Text)
            End If
Line0:
            If TextBox380.Text = "" Or TextBox379.Text = "" Then
            Else
                TextBox375.Text = ""
                TextBox374.Text = ""
                TextBox364.Text = ""
                SoldaduraArriostre(TextBox380, Label1152, TextBox379, Label1150, Label1148, Tu2, Label1139, Label1154, True)
                Inferior = True
                GeometríaGusset4()
                TextBox378.Focus()
            End If
        End If

    End Sub

    Private Sub TextBox378_KeyPress_1(sender As Object, e As KeyPressEventArgs) Handles TextBox378.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox378.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox378.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox378.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox378.Text = Frac2Num(TextBox378.Text)
            End If

Line0:
            If TextBox380.Text <> "" And TextBox379.Text <> "" And TextBox378.Text <> "" Then
                TextBox375.Text = ""
                TextBox374.Text = ""
                TextBox364.Text = ""
                Inferior = True
                GeometríaGusset4()
                TextBox377.Focus()
            End If
        End If
    End Sub

    Private Sub TextBox377_KeyPress_1(sender As Object, e As KeyPressEventArgs) Handles TextBox377.KeyPress
        If OpenMode = True Then
            GoTo Line0
        End If
        If Char.IsDigit(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsControl(e.KeyChar) Then
            e.Handled = False
        ElseIf Char.IsSeparator(e.KeyChar) Then
            e.Handled = False
        ElseIf e.KeyChar = "/" And Not TextBox377.Text.IndexOf("/") Then
            e.Handled = True
        ElseIf e.KeyChar = "/" Then
            e.Handled = False
        ElseIf e.KeyChar = "." And Not TextBox377.Text.IndexOf(".") Then
            e.Handled = True
        ElseIf e.KeyChar = "." Then
            e.Handled = False
        Else
            e.Handled = True
        End If
        Dim exTexto As Integer
        If Asc(e.KeyChar) = 13 Then
            exTexto = Strings.InStr(TextBox377.Text, "/")
            If exTexto <> 0 Then
                'quiere decir que contiene "/" (es una fraccion la que ha ingresado el usuario)
                TextBox377.Text = Frac2Num(TextBox377.Text)
            End If
Line0:
            If TextBox380.Text = "" Or TextBox379.Text = "" Or TextBox378.Text = "" Or TextBox377.Text = "" Then
            Else
                TextBox375.Text = ""
                TextBox374.Text = ""
                TextBox364.Text = ""
                Inferior = True
                GeometríaGusset4()
                TextBox376.Focus()
            End If
        End If
    End Sub

    Private Sub ToolTip1_Popup(sender As Object, e As PopupEventArgs) Handles ToolTip1.Popup

    End Sub

    Private Sub TextBox229_MouseUp(sender As Object, e As MouseEventArgs) Handles TextBox229.MouseUp

    End Sub
End Class